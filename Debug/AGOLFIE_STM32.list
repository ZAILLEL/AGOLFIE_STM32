
AGOLFIE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007234  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800770c  0800770c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007714  08007714  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007718  08007718  00017718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800771c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba8  20000074  08007790  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  08007790  00024c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cbc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4e  00000000  00000000  00038d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  0003c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abe9  00000000  00000000  0003ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198bf  00000000  00000000  00059b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e944  00000000  00000000  00073438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111d7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  00111dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080073bc 	.word	0x080073bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080073bc 	.word	0x080073bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Agolfie_config_sensors>:
		URM13_begin(addr[i]);
	}
}


void Agolfie_config_sensors(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

	  uint8_t cfg = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	70fb      	strb	r3, [r7, #3]

	  cfg &= ~MEASURE_RANGE_BIT;//clear bit4,long-range ranging mode
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	f023 0310 	bic.w	r3, r3, #16
 8000594:	b2db      	uxtb	r3, r3
 8000596:	70fb      	strb	r3, [r7, #3]
	  //cfg |= MEASURE_RANGE_BIT;//set bit4,short-range ranging mode
	  //cfg |= MEASURE_MODE_BIT;//Set bit2，i2c passive mode
	  cfg &= ~MEASURE_MODE_BIT;//clear bit2 , set to Automatic ranging mode
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	f023 0304 	bic.w	r3, r3, #4
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	70fb      	strb	r3, [r7, #3]
	  cfg &= ~TEMP_CPT_ENABLE_BIT;//clear bit1,enable temperature compensation
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	f023 0302 	bic.w	r3, r3, #2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	70fb      	strb	r3, [r7, #3]
	  //cfg |= TEMP_CPT_ENABLE_BIT;//set bit1,disable temperature compensation
	  cfg &= ~TEMP_CPT_SEL_BIT;//clear bit0,select internal temperature compensation
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	70fb      	strb	r3, [r7, #3]
	  //cfg |= TEMP_CPT_SEL_BIT;//set bit0,select external temperature compensation

	  for (int i =0 ; i<NB_SENSORS ; i++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	e00b      	b.n	80005d4 <Agolfie_config_sensors+0x50>

		  writeReg(0x09, &cfg, sizeof(cfg),addr[i]);
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <Agolfie_config_sensors+0x60>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	1cf9      	adds	r1, r7, #3
 80005c6:	2201      	movs	r2, #1
 80005c8:	2009      	movs	r0, #9
 80005ca:	f000 fa6d 	bl	8000aa8 <writeReg>
	  for (int i =0 ; i<NB_SENSORS ; i++){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	ddf0      	ble.n	80005bc <Agolfie_config_sensors+0x38>
	  }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000154 	.word	0x20000154

080005e8 <Agolfie_update_sensors_value>:


void Agolfie_update_sensors_value()
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	b08f      	sub	sp, #60	; 0x3c
 80005ec:	af06      	add	r7, sp, #24

	uint16_t sensors_value[NB_SENSORS - 1];
	uint8_t cmd[8] = {0};
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i<NB_SENSORS; i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	e02b      	b.n	8000654 <Agolfie_update_sensors_value+0x6c>
	{
		cmd[i] |=0x01;
 80005fc:	1d3a      	adds	r2, r7, #4
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	b2d9      	uxtb	r1, r3
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	4413      	add	r3, r2
 8000610:	460a      	mov	r2, r1
 8000612:	701a      	strb	r2, [r3, #0]
		if (writeReg(0x0A, &cmd[i], sizeof(cmd[i]),addr[i]) != 0)
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	18d1      	adds	r1, r2, r3
 800061a:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <Agolfie_update_sensors_value+0xf0>)
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	4413      	add	r3, r2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2201      	movs	r2, #1
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fa3f 	bl	8000aa8 <writeReg>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00e      	beq.n	800064e <Agolfie_update_sensors_value+0x66>
		{
			sensors_value[i] = getDistanceCm(addr[i]);
 8000630:	4a29      	ldr	r2, [pc, #164]	; (80006d8 <Agolfie_update_sensors_value+0xf0>)
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa1a 	bl	8000a72 <getDistanceCm>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	3320      	adds	r3, #32
 8000648:	443b      	add	r3, r7
 800064a:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (int i = 0; i<NB_SENSORS; i++)
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3301      	adds	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	2b07      	cmp	r3, #7
 8000658:	ddd0      	ble.n	80005fc <Agolfie_update_sensors_value+0x14>
		}
	}
	AGOLFIE_SENSORS.Front_Left.distance         =   sensors_value[0];
 800065a:	89ba      	ldrh	r2, [r7, #12]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 800065e:	801a      	strh	r2, [r3, #0]
	AGOLFIE_SENSORS.Front_CenterLeft.distance   =   sensors_value[1];
 8000660:	89fa      	ldrh	r2, [r7, #14]
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000664:	809a      	strh	r2, [r3, #4]
	AGOLFIE_SENSORS.Front_CenterRight.distance  =   sensors_value[2];
 8000666:	8a3a      	ldrh	r2, [r7, #16]
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 800066a:	811a      	strh	r2, [r3, #8]
	AGOLFIE_SENSORS.Front_Right.distance        =   sensors_value[3];
 800066c:	8a7a      	ldrh	r2, [r7, #18]
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000670:	819a      	strh	r2, [r3, #12]
	AGOLFIE_SENSORS.Back_Left.distance          =   sensors_value[4];
 8000672:	8aba      	ldrh	r2, [r7, #20]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000676:	821a      	strh	r2, [r3, #16]
	AGOLFIE_SENSORS.Back_CenterLeft.distance    =   sensors_value[5];
 8000678:	8afa      	ldrh	r2, [r7, #22]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 800067c:	829a      	strh	r2, [r3, #20]
	AGOLFIE_SENSORS.Back_CenterRight.distance   =   sensors_value[6];
 800067e:	8b3a      	ldrh	r2, [r7, #24]
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000682:	831a      	strh	r2, [r3, #24]
	AGOLFIE_SENSORS.Back_Right.distance  	    =   sensors_value[7];
 8000684:	8b7a      	ldrh	r2, [r7, #26]
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000688:	839a      	strh	r2, [r3, #28]



	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
			AGOLFIE_SENSORS.Front_Left.distance,
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 800068c:	881b      	ldrh	r3, [r3, #0]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 800068e:	461d      	mov	r5, r3
			AGOLFIE_SENSORS.Front_CenterLeft.distance,
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000692:	889b      	ldrh	r3, [r3, #4]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 8000694:	461e      	mov	r6, r3
			AGOLFIE_SENSORS.Front_CenterRight.distance,
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 8000698:	891b      	ldrh	r3, [r3, #8]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 800069a:	469c      	mov	ip, r3
			AGOLFIE_SENSORS.Front_Right.distance,
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 800069e:	899b      	ldrh	r3, [r3, #12]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 80006a0:	461a      	mov	r2, r3
			AGOLFIE_SENSORS.Back_Left.distance,
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 80006a4:	8a1b      	ldrh	r3, [r3, #16]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 80006a6:	4619      	mov	r1, r3
			AGOLFIE_SENSORS.Back_CenterLeft.distance ,
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 80006aa:	8a9b      	ldrh	r3, [r3, #20]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 80006ac:	4618      	mov	r0, r3
			AGOLFIE_SENSORS.Back_CenterRight.distance ,
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 80006b0:	8b1b      	ldrh	r3, [r3, #24]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 80006b2:	461c      	mov	r4, r3
			AGOLFIE_SENSORS.Back_Right.distance  	  );
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <Agolfie_update_sensors_value+0xf4>)
 80006b6:	8b9b      	ldrh	r3, [r3, #28]
	udebug_formatted_eight("Front_Left = %d | Front_CL = %d | Front_CR = %d | Front_Right = %d  \r\n  Back_Left = %d | Back_CL = %d | Back_CR = %d | Back_Right = %d ",
 80006b8:	9304      	str	r3, [sp, #16]
 80006ba:	9403      	str	r4, [sp, #12]
 80006bc:	9002      	str	r0, [sp, #8]
 80006be:	9101      	str	r1, [sp, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	4663      	mov	r3, ip
 80006c4:	4632      	mov	r2, r6
 80006c6:	4629      	mov	r1, r5
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <Agolfie_update_sensors_value+0xf8>)
 80006ca:	f000 fea3 	bl	8001414 <udebug_formatted_eight>

}
 80006ce:	bf00      	nop
 80006d0:	3724      	adds	r7, #36	; 0x24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000154 	.word	0x20000154
 80006dc:	20000090 	.word	0x20000090
 80006e0:	0800745c 	.word	0x0800745c

080006e4 <refresh_obstacle>:





void refresh_obstacle(uint8_t distance_cm) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]


	Agolfie_update_sensors_value();
 80006ee:	f7ff ff7b 	bl	80005e8 <Agolfie_update_sensors_value>

	obstacle.position.FL  = (AGOLFIE_SENSORS.Front_Left.distance         < distance_cm);
 80006f2:	4b69      	ldr	r3, [pc, #420]	; (8000898 <refresh_obstacle+0x1b4>)
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	429a      	cmp	r2, r3
 80006fc:	bf34      	ite	cc
 80006fe:	2301      	movcc	r3, #1
 8000700:	2300      	movcs	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b65      	ldr	r3, [pc, #404]	; (800089c <refresh_obstacle+0x1b8>)
 8000708:	601a      	str	r2, [r3, #0]
	obstacle.position.FCL = (AGOLFIE_SENSORS.Front_CenterLeft.distance   < distance_cm);
 800070a:	4b63      	ldr	r3, [pc, #396]	; (8000898 <refresh_obstacle+0x1b4>)
 800070c:	889a      	ldrh	r2, [r3, #4]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	b29b      	uxth	r3, r3
 8000712:	429a      	cmp	r2, r3
 8000714:	bf34      	ite	cc
 8000716:	2301      	movcc	r3, #1
 8000718:	2300      	movcs	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	4b5f      	ldr	r3, [pc, #380]	; (800089c <refresh_obstacle+0x1b8>)
 8000720:	605a      	str	r2, [r3, #4]
	obstacle.position.FCR = (AGOLFIE_SENSORS.Front_CenterRight.distance  < distance_cm);
 8000722:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <refresh_obstacle+0x1b4>)
 8000724:	891a      	ldrh	r2, [r3, #8]
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	b29b      	uxth	r3, r3
 800072a:	429a      	cmp	r2, r3
 800072c:	bf34      	ite	cc
 800072e:	2301      	movcc	r3, #1
 8000730:	2300      	movcs	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	4b59      	ldr	r3, [pc, #356]	; (800089c <refresh_obstacle+0x1b8>)
 8000738:	609a      	str	r2, [r3, #8]
	obstacle.position.FR  = (AGOLFIE_SENSORS.Front_Right.distance        < distance_cm);
 800073a:	4b57      	ldr	r3, [pc, #348]	; (8000898 <refresh_obstacle+0x1b4>)
 800073c:	899a      	ldrh	r2, [r3, #12]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	b29b      	uxth	r3, r3
 8000742:	429a      	cmp	r2, r3
 8000744:	bf34      	ite	cc
 8000746:	2301      	movcc	r3, #1
 8000748:	2300      	movcs	r3, #0
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4b53      	ldr	r3, [pc, #332]	; (800089c <refresh_obstacle+0x1b8>)
 8000750:	60da      	str	r2, [r3, #12]

	obstacle.position.BL  = (AGOLFIE_SENSORS.Back_Left.distance          < distance_cm);
 8000752:	4b51      	ldr	r3, [pc, #324]	; (8000898 <refresh_obstacle+0x1b4>)
 8000754:	8a1a      	ldrh	r2, [r3, #16]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b29b      	uxth	r3, r3
 800075a:	429a      	cmp	r2, r3
 800075c:	bf34      	ite	cc
 800075e:	2301      	movcc	r3, #1
 8000760:	2300      	movcs	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	4b4d      	ldr	r3, [pc, #308]	; (800089c <refresh_obstacle+0x1b8>)
 8000768:	611a      	str	r2, [r3, #16]
	obstacle.position.BCL = (AGOLFIE_SENSORS.Back_CenterLeft.distance    < distance_cm);
 800076a:	4b4b      	ldr	r3, [pc, #300]	; (8000898 <refresh_obstacle+0x1b4>)
 800076c:	8a9a      	ldrh	r2, [r3, #20]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	b29b      	uxth	r3, r3
 8000772:	429a      	cmp	r2, r3
 8000774:	bf34      	ite	cc
 8000776:	2301      	movcc	r3, #1
 8000778:	2300      	movcs	r3, #0
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	4b47      	ldr	r3, [pc, #284]	; (800089c <refresh_obstacle+0x1b8>)
 8000780:	615a      	str	r2, [r3, #20]
	obstacle.position.BCR = (AGOLFIE_SENSORS.Back_CenterRight.distance   < distance_cm);
 8000782:	4b45      	ldr	r3, [pc, #276]	; (8000898 <refresh_obstacle+0x1b4>)
 8000784:	8b1a      	ldrh	r2, [r3, #24]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	b29b      	uxth	r3, r3
 800078a:	429a      	cmp	r2, r3
 800078c:	bf34      	ite	cc
 800078e:	2301      	movcc	r3, #1
 8000790:	2300      	movcs	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	461a      	mov	r2, r3
 8000796:	4b41      	ldr	r3, [pc, #260]	; (800089c <refresh_obstacle+0x1b8>)
 8000798:	619a      	str	r2, [r3, #24]
	obstacle.position.BR  = (AGOLFIE_SENSORS.Back_Right.distance  	     < distance_cm);
 800079a:	4b3f      	ldr	r3, [pc, #252]	; (8000898 <refresh_obstacle+0x1b4>)
 800079c:	8b9a      	ldrh	r2, [r3, #28]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	429a      	cmp	r2, r3
 80007a4:	bf34      	ite	cc
 80007a6:	2301      	movcc	r3, #1
 80007a8:	2300      	movcs	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <refresh_obstacle+0x1b8>)
 80007b0:	61da      	str	r2, [r3, #28]

	AGOLFIE_SENSORS.front_status |=  obstacle.position.FL  << 3;
 80007b2:	4b39      	ldr	r3, [pc, #228]	; (8000898 <refresh_obstacle+0x1b4>)
 80007b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007b8:	b25a      	sxtb	r2, r3
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <refresh_obstacle+0x1b8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <refresh_obstacle+0x1b4>)
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]
	AGOLFIE_SENSORS.front_status |=  obstacle.position.FCL << 2;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <refresh_obstacle+0x1b4>)
 80007d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	4b31      	ldr	r3, [pc, #196]	; (800089c <refresh_obstacle+0x1b8>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <refresh_obstacle+0x1b4>)
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
	AGOLFIE_SENSORS.front_status |=  obstacle.position.FCR << 1;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <refresh_obstacle+0x1b4>)
 80007ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	4b2a      	ldr	r3, [pc, #168]	; (800089c <refresh_obstacle+0x1b8>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <refresh_obstacle+0x1b4>)
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
	AGOLFIE_SENSORS.front_status |=  obstacle.position.FR  << 0;
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <refresh_obstacle+0x1b4>)
 8000808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <refresh_obstacle+0x1b8>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b25b      	sxtb	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <refresh_obstacle+0x1b4>)
 800081c:	f883 2020 	strb.w	r2, [r3, #32]


	AGOLFIE_SENSORS.back_status |=  obstacle.position.FL   << 3;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <refresh_obstacle+0x1b4>)
 8000822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000826:	b25a      	sxtb	r2, r3
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <refresh_obstacle+0x1b8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	b25b      	sxtb	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <refresh_obstacle+0x1b4>)
 8000838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	AGOLFIE_SENSORS.back_status |=  obstacle.position.FCL  << 2;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <refresh_obstacle+0x1b4>)
 800083e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000842:	b25a      	sxtb	r2, r3
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <refresh_obstacle+0x1b8>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b25b      	sxtb	r3, r3
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <refresh_obstacle+0x1b4>)
 8000854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	AGOLFIE_SENSORS.back_status |=  obstacle.position.FCR  << 1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <refresh_obstacle+0x1b4>)
 800085a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800085e:	b25a      	sxtb	r2, r3
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <refresh_obstacle+0x1b8>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b25b      	sxtb	r3, r3
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <refresh_obstacle+0x1b4>)
 8000870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	AGOLFIE_SENSORS.back_status |=  obstacle.position.FR   << 0;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <refresh_obstacle+0x1b4>)
 8000876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800087a:	b25a      	sxtb	r2, r3
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <refresh_obstacle+0x1b8>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	4313      	orrs	r3, r2
 8000884:	b25b      	sxtb	r3, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <refresh_obstacle+0x1b4>)
 800088a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000090 	.word	0x20000090
 800089c:	200000b4 	.word	0x200000b4

080008a0 <Agolfie_Forward_dostep>:
//
//
//}

void Agolfie_Forward_dostep(uint8_t ZONE)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	ZONE = refresh_front(ZONE);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f855 	bl	800095c <refresh_front>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]

	switch(ZONE){
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d827      	bhi.n	800090c <Agolfie_Forward_dostep+0x6c>
 80008bc:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <Agolfie_Forward_dostep+0x24>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008dd 	.word	0x080008dd
 80008c8:	080008e5 	.word	0x080008e5
 80008cc:	080008ed 	.word	0x080008ed
 80008d0:	080008f5 	.word	0x080008f5
 80008d4:	080008fd 	.word	0x080008fd
 80008d8:	08000905 	.word	0x08000905

	case FRONT_OUT:
		Agolfie_SetSpeed(50);
 80008dc:	2032      	movs	r0, #50	; 0x32
 80008de:	f000 f8bd 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 80008e2:	e013      	b.n	800090c <Agolfie_Forward_dostep+0x6c>
	case FRONT_L:
		Agolfie_SetSpeed(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 f8b9 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 80008ea:	e00f      	b.n	800090c <Agolfie_Forward_dostep+0x6c>
	case FRONT_R:
		Agolfie_SetSpeed(0);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 f8b5 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 80008f2:	e00b      	b.n	800090c <Agolfie_Forward_dostep+0x6c>
	case FRONT_C:
		Agolfie_SetSpeed(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f8b1 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 80008fa:	e007      	b.n	800090c <Agolfie_Forward_dostep+0x6c>
	case FRONT_CL:
		Agolfie_SetSpeed(0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f000 f8ad 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 8000902:	e003      	b.n	800090c <Agolfie_Forward_dostep+0x6c>
	case FRONT_CR:
		Agolfie_SetSpeed(0);
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f8a9 	bl	8000a5c <Agolfie_SetSpeed>
		break;
 800090a:	bf00      	nop
	}
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Agolfie_Backward_dostep>:


void Agolfie_Backward_dostep(uint8_t ZONE) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]

	ZONE = refresh_back(ZONE);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f85b 	bl	80009dc <refresh_back>
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]

	switch(ZONE){
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d810      	bhi.n	8000952 <Agolfie_Backward_dostep+0x3e>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <Agolfie_Backward_dostep+0x24>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000951 	.word	0x08000951
 800093c:	08000951 	.word	0x08000951
 8000940:	08000951 	.word	0x08000951
 8000944:	08000951 	.word	0x08000951
 8000948:	08000951 	.word	0x08000951
 800094c:	08000951 	.word	0x08000951

	case BACK_OUT:
		break;
 8000950:	bf00      	nop
		break;
	case BACK_CR:
		break;
	}

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop

0800095c <refresh_front>:


uint8_t refresh_front(uint8_t ZONE) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]

	switch (AGOLFIE_SENSORS.front_status) {
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <refresh_front+0x7c>)
 8000968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800096c:	2b0a      	cmp	r3, #10
 800096e:	d82b      	bhi.n	80009c8 <refresh_front+0x6c>
 8000970:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <refresh_front+0x1c>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	080009a5 	.word	0x080009a5
 800097c:	080009ab 	.word	0x080009ab
 8000980:	080009c9 	.word	0x080009c9
 8000984:	080009c9 	.word	0x080009c9
 8000988:	080009c9 	.word	0x080009c9
 800098c:	080009b7 	.word	0x080009b7
 8000990:	080009c3 	.word	0x080009c3
 8000994:	080009c9 	.word	0x080009c9
 8000998:	080009bd 	.word	0x080009bd
 800099c:	080009c9 	.word	0x080009c9
 80009a0:	080009b1 	.word	0x080009b1
	case 0b0000:
		ZONE = FRONT_OUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	71fb      	strb	r3, [r7, #7]
		break;
 80009a8:	e00e      	b.n	80009c8 <refresh_front+0x6c>
	case 0b0001:
		ZONE = FRONT_R;
 80009aa:	2302      	movs	r3, #2
 80009ac:	71fb      	strb	r3, [r7, #7]
		break;
 80009ae:	e00b      	b.n	80009c8 <refresh_front+0x6c>
	case 0b1010:
		ZONE = FRONT_CR;
 80009b0:	2305      	movs	r3, #5
 80009b2:	71fb      	strb	r3, [r7, #7]
		break;
 80009b4:	e008      	b.n	80009c8 <refresh_front+0x6c>
	case 0b0101:
		ZONE = FRONT_CL;
 80009b6:	2304      	movs	r3, #4
 80009b8:	71fb      	strb	r3, [r7, #7]
		break;
 80009ba:	e005      	b.n	80009c8 <refresh_front+0x6c>
	case 0b1000:
		ZONE = FRONT_L;
 80009bc:	2301      	movs	r3, #1
 80009be:	71fb      	strb	r3, [r7, #7]
		break;
 80009c0:	e002      	b.n	80009c8 <refresh_front+0x6c>
	case 0b0110:
		ZONE = FRONT_C;
 80009c2:	2303      	movs	r3, #3
 80009c4:	71fb      	strb	r3, [r7, #7]
		break;
 80009c6:	bf00      	nop
	}

	return ZONE;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000090 	.word	0x20000090

080009dc <refresh_back>:

}


uint8_t refresh_back(uint8_t ZONE)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (AGOLFIE_SENSORS.back_status) {
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <refresh_back+0x7c>)
 80009e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ec:	2b0a      	cmp	r3, #10
 80009ee:	d82b      	bhi.n	8000a48 <refresh_back+0x6c>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <refresh_back+0x1c>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a25 	.word	0x08000a25
 80009fc:	08000a2b 	.word	0x08000a2b
 8000a00:	08000a49 	.word	0x08000a49
 8000a04:	08000a49 	.word	0x08000a49
 8000a08:	08000a49 	.word	0x08000a49
 8000a0c:	08000a37 	.word	0x08000a37
 8000a10:	08000a43 	.word	0x08000a43
 8000a14:	08000a49 	.word	0x08000a49
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000a49 	.word	0x08000a49
 8000a20:	08000a31 	.word	0x08000a31
	case 0b0000:
		ZONE = BACK_OUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	71fb      	strb	r3, [r7, #7]
		break;
 8000a28:	e00e      	b.n	8000a48 <refresh_back+0x6c>
	case 0b0001:
		ZONE = BACK_R;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	71fb      	strb	r3, [r7, #7]
		break;
 8000a2e:	e00b      	b.n	8000a48 <refresh_back+0x6c>
	case 0b1010:
		ZONE = BACK_CR;
 8000a30:	2305      	movs	r3, #5
 8000a32:	71fb      	strb	r3, [r7, #7]
		break;
 8000a34:	e008      	b.n	8000a48 <refresh_back+0x6c>
	case 0b0101:
		ZONE = BACK_CL;
 8000a36:	2304      	movs	r3, #4
 8000a38:	71fb      	strb	r3, [r7, #7]
		break;
 8000a3a:	e005      	b.n	8000a48 <refresh_back+0x6c>
	case 0b1000:
		ZONE = BACK_L;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	71fb      	strb	r3, [r7, #7]
		break;
 8000a40:	e002      	b.n	8000a48 <refresh_back+0x6c>
	case 0b0110:
		ZONE = BACK_C;
 8000a42:	2303      	movs	r3, #3
 8000a44:	71fb      	strb	r3, [r7, #7]
		break;
 8000a46:	bf00      	nop
	}

	return ZONE;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000090 	.word	0x20000090

08000a5c <Agolfie_SetSpeed>:
{
	AGOLFIE_SENSORS.ZONE_BACK = BACK_OUT;
	AGOLFIE_SENSORS.ZONE_FRONT = FRONT_OUT;
}

void Agolfie_SetSpeed(uint8_t p) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    while (DAC_GetFlagStatus(DAC_Channel_1, DAC_FLAG_DMAUDR) == RESET) {

    }

    */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <getDistanceCm>:
    }

}

uint16_t getDistanceCm(uint8_t i2cAddr)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = {0};
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	81bb      	strh	r3, [r7, #12]

  uint16_t distanceCm;


  readReg(URM13_DISTANCE_MSB_REG_I2C, &buf, 2, i2cAddr);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f107 010c 	add.w	r1, r7, #12
 8000a86:	2202      	movs	r2, #2
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f83b 	bl	8000b04 <readReg>

  distanceCm = (buf[0] << 8) | buf[1];
 8000a8e:	7b3b      	ldrb	r3, [r7, #12]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7b7b      	ldrb	r3, [r7, #13]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	81fb      	strh	r3, [r7, #14]


  return distanceCm;
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <writeReg>:




size_t writeReg(uint8_t reg, const void* pBuf, size_t size, uint8_t i2cAddr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	73bb      	strb	r3, [r7, #14]
  if (pBuf == NULL)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <writeReg+0x1e>
  {
    DBG("pBuf ERROR!! : null pointer");
    return 0;  // Ou une valeur d'erreur appropriée.
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e017      	b.n	8000af6 <writeReg+0x4e>
  }

  if (HAL_I2C_Mem_Write(&hi2c1, i2cAddr<<1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b299      	uxth	r1, r3
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ada:	9002      	str	r0, [sp, #8]
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <writeReg+0x58>)
 8000ae6:	f001 fbab 	bl	8002240 <HAL_I2C_Mem_Write>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <writeReg+0x4c>
  {
    return 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	e000      	b.n	8000af6 <writeReg+0x4e>
  }

  return size;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001b0 	.word	0x200001b0

08000b04 <readReg>:

size_t readReg(uint8_t reg, void* pBuf, size_t size, uint8_t i2cAddr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af04      	add	r7, sp, #16
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	4613      	mov	r3, r2
 8000b16:	73bb      	strb	r3, [r7, #14]
  if (pBuf == NULL)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <readReg+0x1e>
  {
    DBG("pBuf ERROR!! : null pointer");
    return 0;  // Ou une valeur d'erreur appropriée.
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e02e      	b.n	8000b80 <readReg+0x7c>
  }

  // Début de la transmission
  if (HAL_I2C_Mem_Write(&hi2c1, i2cAddr << 1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f04f 30ff 	mov.w	r0, #4294967295
 8000b36:	9002      	str	r0, [sp, #8]
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2301      	movs	r3, #1
 8000b40:	4811      	ldr	r0, [pc, #68]	; (8000b88 <readReg+0x84>)
 8000b42:	f001 fb7d 	bl	8002240 <HAL_I2C_Mem_Write>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <readReg+0x4c>
  {
    // Gestion de l'erreur
    // Ici, vous pouvez afficher un message d'erreur ou renvoyer une valeur d'erreur au lieu d'appeler Error_Handler().
    return 0;  // Ou une valeur d'erreur appropriée.
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e017      	b.n	8000b80 <readReg+0x7c>
  }

  // Début de la réception
  if (HAL_I2C_Mem_Read(&hi2c1, i2cAddr << 1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	b299      	uxth	r1, r3
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	9002      	str	r0, [sp, #8]
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <readReg+0x84>)
 8000b70:	f001 fc60 	bl	8002434 <HAL_I2C_Mem_Read>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <readReg+0x7a>
  {
    // Gestion de l'erreur
    // Ici, vous pouvez afficher un message d'erreur ou renvoyer une valeur d'erreur au lieu d'appeler Error_Handler().
    return 0;  // Ou une valeur d'erreur appropriée.
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <readReg+0x7c>
  }

  return size;  // Ou le nombre d'octets lus, selon votre application.
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000ba0:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <MX_ADC1_Init+0x9c>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <MX_ADC1_Init+0xa0>)
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000bec:	f000 fcfe 	bl	80015ec <HAL_ADC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 fa23 	bl	8001040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_ADC1_Init+0x98>)
 8000c0c:	f000 fd32 	bl	8001674 <HAL_ADC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f000 fa13 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000015c 	.word	0x2000015c
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	0f000001 	.word	0x0f000001

08000c30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_ADC_MspInit+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d127      	bne.n	8000ca2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_ADC_MspInit+0x80>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_ADC_MspInit+0x84>)
 8000c9e:	f000 ffed 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40012000 	.word	0x40012000
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RefreshObstacle */
  RefreshObstacleHandle = osThreadNew(StartRefreshObstacle, NULL, &RefreshObstacle_attributes);
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <MX_FREERTOS_Init+0x38>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_FREERTOS_Init+0x3c>)
 8000cc2:	f003 f9d1 	bl	8004068 <osThreadNew>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <MX_FREERTOS_Init+0x40>)
 8000cca:	6013      	str	r3, [r2, #0]

  /* creation of Front_sm */
  Front_smHandle = osThreadNew(StartFront_sm, NULL, &Front_sm_attributes);
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <MX_FREERTOS_Init+0x44>)
 8000cce:	2100      	movs	r1, #0
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_FREERTOS_Init+0x48>)
 8000cd2:	f003 f9c9 	bl	8004068 <osThreadNew>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <MX_FREERTOS_Init+0x4c>)
 8000cda:	6013      	str	r3, [r2, #0]

  /* creation of Back_sm */
  Back_smHandle = osThreadNew(StartBack_sm, NULL, &Back_sm_attributes);
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <MX_FREERTOS_Init+0x50>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <MX_FREERTOS_Init+0x54>)
 8000ce2:	f003 f9c1 	bl	8004068 <osThreadNew>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a09      	ldr	r2, [pc, #36]	; (8000d10 <MX_FREERTOS_Init+0x58>)
 8000cea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08007654 	.word	0x08007654
 8000cf4:	08000d15 	.word	0x08000d15
 8000cf8:	200001a4 	.word	0x200001a4
 8000cfc:	08007678 	.word	0x08007678
 8000d00:	08000d2d 	.word	0x08000d2d
 8000d04:	200001a8 	.word	0x200001a8
 8000d08:	0800769c 	.word	0x0800769c
 8000d0c:	08000d4d 	.word	0x08000d4d
 8000d10:	200001ac 	.word	0x200001ac

08000d14 <StartRefreshObstacle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRefreshObstacle */
void StartRefreshObstacle(void *argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRefreshObstacle */
  /* Infinite loop */
  for(;;)
  {

	refresh_obstacle(100);
 8000d1c:	2064      	movs	r0, #100	; 0x64
 8000d1e:	f7ff fce1 	bl	80006e4 <refresh_obstacle>
    osDelay(100);
 8000d22:	2064      	movs	r0, #100	; 0x64
 8000d24:	f003 fa32 	bl	800418c <osDelay>
	refresh_obstacle(100);
 8000d28:	e7f8      	b.n	8000d1c <StartRefreshObstacle+0x8>
	...

08000d2c <StartFront_sm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFront_sm */
void StartFront_sm(void *argument)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFront_sm */
  /* Infinite loop */
  for(;;)
  {
	Agolfie_Forward_dostep(AGOLFIE_SENSORS.ZONE_FRONT);
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <StartFront_sm+0x1c>)
 8000d36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fdb0 	bl	80008a0 <Agolfie_Forward_dostep>
    osDelay(100);
 8000d40:	2064      	movs	r0, #100	; 0x64
 8000d42:	f003 fa23 	bl	800418c <osDelay>
	Agolfie_Forward_dostep(AGOLFIE_SENSORS.ZONE_FRONT);
 8000d46:	e7f5      	b.n	8000d34 <StartFront_sm+0x8>
 8000d48:	20000090 	.word	0x20000090

08000d4c <StartBack_sm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBack_sm */
void StartBack_sm(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBack_sm */
  /* Infinite loop */
  for(;;)
  {
	Agolfie_Backward_dostep(AGOLFIE_SENSORS.ZONE_BACK);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <StartBack_sm+0x1c>)
 8000d56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fdda 	bl	8000914 <Agolfie_Backward_dostep>
    osDelay(100);
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f003 fa13 	bl	800418c <osDelay>
	Agolfie_Backward_dostep(AGOLFIE_SENSORS.ZONE_BACK);
 8000d66:	e7f5      	b.n	8000d54 <StartBack_sm+0x8>
 8000d68:	20000090 	.word	0x20000090

08000d6c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_GPIO_Init+0xc4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_FL_Pin|LED_FCL_Pin|LED_FCR_Pin|LED_FR_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000ddc:	4815      	ldr	r0, [pc, #84]	; (8000e34 <MX_GPIO_Init+0xc8>)
 8000dde:	f001 f8d1 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BL_Pin|LED_BCL_Pin|LED_BCR_Pin|LED_BR_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	211e      	movs	r1, #30
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <MX_GPIO_Init+0xcc>)
 8000de8:	f001 f8cc 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_FL_Pin|LED_FCL_Pin|LED_FCR_Pin|LED_FR_Pin;
 8000dec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000df0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <MX_GPIO_Init+0xc8>)
 8000e06:	f000 ff39 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_BL_Pin|LED_BCL_Pin|LED_BCR_Pin|LED_BR_Pin;
 8000e0a:	231e      	movs	r3, #30
 8000e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_GPIO_Init+0xcc>)
 8000e22:	f000 ff2b 	bl	8001c7c <HAL_GPIO_Init>

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020400 	.word	0x40020400

08000e3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <MX_I2C1_Init+0x54>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <MX_I2C1_Init+0x58>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_I2C1_Init+0x50>)
 8000e7a:	f001 f89d 	bl	8001fb8 <HAL_I2C_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e84:	f000 f8dc 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200001b0 	.word	0x200001b0
 8000e90:	40005400 	.word	0x40005400
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <HAL_I2C_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12c      	bne.n	8000f14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <HAL_I2C_MspInit+0x8c>)
 8000ef4:	f000 fec2 	bl	8001c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_I2C_MspInit+0x88>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2c:	f000 fac8 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f30:	f000 f826 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f34:	f7ff ff1a 	bl	8000d6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f38:	f7ff ff80 	bl	8000e3c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 f948 	bl	80011d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 f91c 	bl	800117c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f44:	f7ff fe22 	bl	8000b8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  udebug_init(&huart2);
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <main+0x50>)
 8000f4a:	f000 fa11 	bl	8001370 <udebug_init>
  udebug(FG_RED("\r\n\r\n\r\n\r\n-- START\r\n"));
 8000f4e:	480b      	ldr	r0, [pc, #44]	; (8000f7c <main+0x54>)
 8000f50:	f000 fa38 	bl	80013c4 <udebug>


  //Agolfie_sensors_begin();
  Agolfie_config_sensors();
 8000f54:	f7ff fb16 	bl	8000584 <Agolfie_config_sensors>

  uint16_t valeur_ADC;

   HAL_Delay(100);
 8000f58:	2064      	movs	r0, #100	; 0x64
 8000f5a:	f000 fb23 	bl	80015a4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000f5e:	f003 f839 	bl	8003fd4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000f62:	f7ff fea9 	bl	8000cb8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f66:	f003 f859 	bl	800401c <osKernelStart>

	  // Lisez la valeur convertie
	 // valeur_ADC = HAL_ADC_GetValue(&hadc1);

	  //uint16_t valeur_etalonnee = int_rescale(valeur_ADC, 0, 4095, 0, 150);
	  Agolfie_update_sensors_value();
 8000f6a:	f7ff fb3d 	bl	80005e8 <Agolfie_update_sensors_value>
	   //proto_sm();

	 // udebug_formatted_float("V = %f  \r",valeur_etalonnee);
	 // udebug_formatted_twice("ADC = %d    |  D = % d  \r",valeur_ADC,valeur_etalonnee);

	  HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fb18 	bl	80015a4 <HAL_Delay>
	  Agolfie_update_sensors_value();
 8000f74:	e7f9      	b.n	8000f6a <main+0x42>
 8000f76:	bf00      	nop
 8000f78:	2000024c 	.word	0x2000024c
 8000f7c:	08007618 	.word	0x08007618

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	; 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0320 	add.w	r3, r7, #32
 8000f8a:	2230      	movs	r2, #48	; 0x30
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fdac 	bl	8006aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <SystemClock_Config+0xb8>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <SystemClock_Config+0xb8>)
 8000fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <SystemClock_Config+0xb8>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <SystemClock_Config+0xbc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <SystemClock_Config+0xbc>)
 8000fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <SystemClock_Config+0xbc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 ff9f 	bl	8002f38 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001000:	f000 f81e 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fa02 	bl	8003428 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800102a:	f000 f809 	bl	8001040 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	; 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x54>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <HAL_MspInit+0x54>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x54>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_MspInit+0x54>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <HAL_MspInit+0x54>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_MspInit+0x54>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	210f      	movs	r1, #15
 800108e:	f06f 0001 	mvn.w	r0, #1
 8001092:	f000 fdca 	bl	8001c2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fa46 	bl	8001564 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010d8:	f004 fc66 	bl	80059a8 <xTaskGetSchedulerState>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d001      	beq.n	80010e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010e2:	f005 fa51 	bl	8006588 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f005 fcae 	bl	8006a7c <__errno>
 8001120:	4603      	mov	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	4a05      	ldr	r2, [pc, #20]	; (8001150 <_sbrk+0x64>)
 800113c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20018000 	.word	0x20018000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000204 	.word	0x20000204
 8001154:	20004c20 	.word	0x20004c20

08001158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <SystemInit+0x20>)
 800115e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <SystemInit+0x20>)
 8001164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART1_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART1_UART_Init+0x4c>)
 80011b4:	f002 fb18 	bl	80037e8 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f7ff ff3f 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000208 	.word	0x20000208
 80011cc:	40011000 	.word	0x40011000

080011d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <MX_USART2_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART2_UART_Init+0x4c>)
 8001208:	f002 faee 	bl	80037e8 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001212:	f7ff ff15 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000024c 	.word	0x2000024c
 8001220:	40004400 	.word	0x40004400

08001224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_UART_MspInit+0xe8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12d      	bne.n	80012a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_UART_MspInit+0xec>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a30      	ldr	r2, [pc, #192]	; (8001310 <HAL_UART_MspInit+0xec>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <HAL_UART_MspInit+0xec>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <HAL_UART_MspInit+0xec>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_UART_MspInit+0xec>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_UART_MspInit+0xec>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800127e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001290:	2307      	movs	r3, #7
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	481e      	ldr	r0, [pc, #120]	; (8001314 <HAL_UART_MspInit+0xf0>)
 800129c:	f000 fcee 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012a0:	e030      	b.n	8001304 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_UART_MspInit+0xf4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d12b      	bne.n	8001304 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6413      	str	r3, [r2, #64]	; 0x40
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_UART_MspInit+0xec>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012e4:	230c      	movs	r3, #12
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f4:	2307      	movs	r3, #7
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_UART_MspInit+0xf0>)
 8001300:	f000 fcbc 	bl	8001c7c <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40011000 	.word	0x40011000
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000
 8001318:	40004400 	.word	0x40004400

0800131c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800131c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001354 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001322:	490e      	ldr	r1, [pc, #56]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001324:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001338:	4c0b      	ldr	r4, [pc, #44]	; (8001368 <LoopFillZerobss+0x26>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001346:	f7ff ff07 	bl	8001158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f005 fb9d 	bl	8006a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134e:	f7ff fdeb 	bl	8000f28 <main>
  bx  lr    
 8001352:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001354:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001360:	0800771c 	.word	0x0800771c
  ldr r2, =_sbss
 8001364:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001368:	20004c1c 	.word	0x20004c1c

0800136c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC_IRQHandler>
	...

08001370 <udebug_init>:
//



void udebug_init(UART_HandleTypeDef *what)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	udebug_uart_handler=what;		// for next prints
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <udebug_init+0x44>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
	udebug_CommandReady=_FALSE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <udebug_init+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	udebug_Command=0;
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <udebug_init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
	uint32_t c;
	for(c=0;c<32;c++) udebug_RxBuffer[c]=0;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	e007      	b.n	80013a0 <udebug_init+0x30>
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <udebug_init+0x50>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b1f      	cmp	r3, #31
 80013a4:	d9f4      	bls.n	8001390 <udebug_init+0x20>
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000290 	.word	0x20000290
 80013b8:	200002b4 	.word	0x200002b4
 80013bc:	200002b5 	.word	0x200002b5
 80013c0:	20000294 	.word	0x20000294

080013c4 <udebug>:
	udebug_CommandReady=_FALSE;
	return HAL_UART_Receive_IT(udebug_uart_handler, udebug_RxBuffer, char_count); //<- rearm  for RX : again 'til next rx complete
}
// output functions
void udebug(char *text)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80013d0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013d4:	6018      	str	r0, [r3, #0]
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text);
 80013d6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80013da:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80013de:	f107 020c 	add.w	r2, r7, #12
 80013e2:	6819      	ldr	r1, [r3, #0]
 80013e4:	4610      	mov	r0, r2
 80013e6:	f005 fb89 	bl	8006afc <siprintf>
 80013ea:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <udebug+0x4c>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 010c 	add.w	r1, r7, #12
 80013fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001400:	f002 fa3f 	bl	8003882 <HAL_UART_Transmit>
}
 8001404:	bf00      	nop
 8001406:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000290 	.word	0x20000290

08001414 <udebug_formatted_eight>:
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text,integer_val,integer_wal,integer_xal,integer_yal);
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
}
void udebug_formatted_eight(char* text,int integer_val,int integer_wal,int integer_xal,int integer_yal,int integer_zal,int integer_qal,int integer_nal,int integer_mal)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
 800141a:	af06      	add	r7, sp, #24
 800141c:	f507 6483 	add.w	r4, r7, #1048	; 0x418
 8001420:	f2a4 440c 	subw	r4, r4, #1036	; 0x40c
 8001424:	6020      	str	r0, [r4, #0]
 8001426:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 800142a:	f5a0 6082 	sub.w	r0, r0, #1040	; 0x410
 800142e:	6001      	str	r1, [r0, #0]
 8001430:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8001434:	f2a1 4114 	subw	r1, r1, #1044	; 0x414
 8001438:	600a      	str	r2, [r1, #0]
 800143a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 800143e:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 8001442:	6013      	str	r3, [r2, #0]
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text,integer_val,integer_wal,integer_xal,integer_yal,integer_zal,integer_qal,integer_nal,integer_mal);
 8001444:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001448:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800144c:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8001450:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8001454:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8001458:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 800145c:	f107 0414 	add.w	r4, r7, #20
 8001460:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8001464:	9005      	str	r0, [sp, #20]
 8001466:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 800146a:	9004      	str	r0, [sp, #16]
 800146c:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8001470:	9003      	str	r0, [sp, #12]
 8001472:	f8d7 042c 	ldr.w	r0, [r7, #1068]	; 0x42c
 8001476:	9002      	str	r0, [sp, #8]
 8001478:	f8d7 0428 	ldr.w	r0, [r7, #1064]	; 0x428
 800147c:	9001      	str	r0, [sp, #4]
 800147e:	f507 6083 	add.w	r0, r7, #1048	; 0x418
 8001482:	f5a0 6083 	sub.w	r0, r0, #1048	; 0x418
 8001486:	6800      	ldr	r0, [r0, #0]
 8001488:	9000      	str	r0, [sp, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	6809      	ldr	r1, [r1, #0]
 8001490:	4620      	mov	r0, r4
 8001492:	f005 fb33 	bl	8006afc <siprintf>
 8001496:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <udebug_formatted_eight+0xa8>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 0114 	add.w	r1, r7, #20
 80014a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ac:	f002 f9e9 	bl	8003882 <HAL_UART_Transmit>
}
 80014b0:	bf00      	nop
 80014b2:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000290 	.word	0x20000290

080014c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_Init+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <HAL_Init+0x40>)
 80014ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <HAL_Init+0x40>)
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a07      	ldr	r2, [pc, #28]	; (8001500 <HAL_Init+0x40>)
 80014e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 fb93 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f808 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f4:	f7ff fdaa 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x54>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x58>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f000 fb9d 	bl	8001c62 <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00e      	b.n	8001550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d80a      	bhi.n	800154e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 fb73 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001544:	4a06      	ldr	r2, [pc, #24]	; (8001560 <HAL_InitTick+0x5c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e000      	b.n	8001550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	20000008 	.word	0x20000008
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	200002b8 	.word	0x200002b8

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	200002b8 	.word	0x200002b8

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e033      	b.n	800166a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fb10 	bl	8000c30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001632:	f023 0302 	bic.w	r3, r3, #2
 8001636:	f043 0202 	orr.w	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f93a 	bl	80018b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
 800165a:	e001      	b.n	8001660 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x1c>
 800168c:	2302      	movs	r3, #2
 800168e:	e105      	b.n	800189c <HAL_ADC_ConfigChannel+0x228>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b09      	cmp	r3, #9
 800169e:	d925      	bls.n	80016ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68d9      	ldr	r1, [r3, #12]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	3b1e      	subs	r3, #30
 80016b6:	2207      	movs	r2, #7
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43da      	mvns	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	400a      	ands	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68d9      	ldr	r1, [r3, #12]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4403      	add	r3, r0
 80016de:	3b1e      	subs	r3, #30
 80016e0:	409a      	lsls	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	e022      	b.n	8001732 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6919      	ldr	r1, [r3, #16]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	2207      	movs	r2, #7
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	4603      	mov	r3, r0
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4403      	add	r3, r0
 8001728:	409a      	lsls	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b06      	cmp	r3, #6
 8001738:	d824      	bhi.n	8001784 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	3b05      	subs	r3, #5
 800174c:	221f      	movs	r2, #31
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	400a      	ands	r2, r1
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3b05      	subs	r3, #5
 8001776:	fa00 f203 	lsl.w	r2, r0, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	e04c      	b.n	800181e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d824      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	3b23      	subs	r3, #35	; 0x23
 800179e:	221f      	movs	r2, #31
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43da      	mvns	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	400a      	ands	r2, r1
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b23      	subs	r3, #35	; 0x23
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
 80017d4:	e023      	b.n	800181e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	3b41      	subs	r3, #65	; 0x41
 80017e8:	221f      	movs	r2, #31
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	400a      	ands	r2, r1
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b41      	subs	r3, #65	; 0x41
 8001812:	fa00 f203 	lsl.w	r2, r0, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_ADC_ConfigChannel+0x234>)
 8001820:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a21      	ldr	r2, [pc, #132]	; (80018ac <HAL_ADC_ConfigChannel+0x238>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d109      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1cc>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b12      	cmp	r3, #18
 8001832:	d105      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_ADC_ConfigChannel+0x238>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d123      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x21e>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d003      	beq.n	800185a <HAL_ADC_ConfigChannel+0x1e6>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b11      	cmp	r3, #17
 8001858:	d11b      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b10      	cmp	r3, #16
 800186c:	d111      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_ADC_ConfigChannel+0x23c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_ADC_ConfigChannel+0x240>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	0c9a      	lsrs	r2, r3, #18
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001884:	e002      	b.n	800188c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3b01      	subs	r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40012300 	.word	0x40012300
 80018ac:	40012000 	.word	0x40012000
 80018b0:	20000000 	.word	0x20000000
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c0:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <ADC_Init+0x1f0>)
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	021a      	lsls	r2, r3, #8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6899      	ldr	r1, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <ADC_Init+0x1f4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800195e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6899      	ldr	r1, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	e00f      	b.n	80019b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0202 	bic.w	r2, r2, #2
 80019c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
 80019d0:	005a      	lsls	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01b      	beq.n	8001a1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6859      	ldr	r1, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	035a      	lsls	r2, r3, #13
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	e007      	b.n	8001a2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	051a      	lsls	r2, r3, #20
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6899      	ldr	r1, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a6e:	025a      	lsls	r2, r3, #9
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	029a      	lsls	r2, r3, #10
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	609a      	str	r2, [r3, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40012300 	.word	0x40012300
 8001aac:	0f000001 	.word	0x0f000001

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff47 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff5c 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffb0 	bl	8001bd0 <SysTick_Config>
 8001c70:	4603      	mov	r3, r0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e159      	b.n	8001f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8148 	bne.w	8001f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a2 	beq.w	8001f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_GPIO_Init+0x2f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x1fe>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_GPIO_Init+0x2f8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x1f6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a45      	ldr	r2, [pc, #276]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x1f2>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f aea2 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e12b      	b.n	8002222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe ff5a 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800201c:	f001 fbbc 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a81      	ldr	r2, [pc, #516]	; (800222c <HAL_I2C_Init+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <HAL_I2C_Init+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a80      	ldr	r2, [pc, #512]	; (8002230 <HAL_I2C_Init+0x278>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e006      	b.n	800204a <HAL_I2C_Init+0x92>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <HAL_I2C_Init+0x27c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e7      	b.n	8002222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a78      	ldr	r2, [pc, #480]	; (8002238 <HAL_I2C_Init+0x280>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a6a      	ldr	r2, [pc, #424]	; (800222c <HAL_I2C_Init+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d802      	bhi.n	800208c <HAL_I2C_Init+0xd4>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	e009      	b.n	80020a0 <HAL_I2C_Init+0xe8>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a69      	ldr	r2, [pc, #420]	; (800223c <HAL_I2C_Init+0x284>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	495c      	ldr	r1, [pc, #368]	; (800222c <HAL_I2C_Init+0x274>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d819      	bhi.n	80020f4 <HAL_I2C_Init+0x13c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_I2C_Init+0x138>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e59      	subs	r1, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	e051      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e04f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <HAL_I2C_Init+0x168>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e012      	b.n	8002146 <HAL_I2C_Init+0x18e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x196>
 800214a:	2301      	movs	r3, #1
 800214c:	e022      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <HAL_I2C_Init+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e58      	subs	r0, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	fbb0 f3f3 	udiv	r3, r0, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002172:	e00f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	0099      	lsls	r1, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6809      	ldr	r1, [r1, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6911      	ldr	r1, [r2, #16]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68d2      	ldr	r2, [r2, #12]
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	000186a0 	.word	0x000186a0
 8002230:	001e847f 	.word	0x001e847f
 8002234:	003d08ff 	.word	0x003d08ff
 8002238:	431bde83 	.word	0x431bde83
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	817b      	strh	r3, [r7, #10]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225a:	f7ff f997 	bl	800158c <HAL_GetTick>
 800225e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b20      	cmp	r3, #32
 800226a:	f040 80d9 	bne.w	8002420 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2319      	movs	r3, #25
 8002274:	2201      	movs	r2, #1
 8002276:	496d      	ldr	r1, [pc, #436]	; (800242c <HAL_I2C_Mem_Write+0x1ec>)
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fc7f 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
 8002286:	e0cc      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Mem_Write+0x56>
 8002292:	2302      	movs	r3, #2
 8002294:	e0c5      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2221      	movs	r2, #33	; 0x21
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_I2C_Mem_Write+0x1f0>)
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fe:	88f8      	ldrh	r0, [r7, #6]
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	8979      	ldrh	r1, [r7, #10]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4603      	mov	r3, r0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fab6 	bl	8002880 <I2C_RequestMemoryWrite>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d052      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e081      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fd00 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b04      	cmp	r3, #4
 8002334:	d107      	bne.n	8002346 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_I2C_Mem_Write+0x180>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1aa      	bne.n	800231e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fcec 	bl	8002daa <I2C_WaitOnBTFFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e016      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	00100002 	.word	0x00100002
 8002430:	ffff0000 	.word	0xffff0000

08002434 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244e:	f7ff f89d 	bl	800158c <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	f040 8208 	bne.w	8002872 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2319      	movs	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	497b      	ldr	r1, [pc, #492]	; (8002658 <HAL_I2C_Mem_Read+0x224>)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fb85 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	e1fb      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_I2C_Mem_Read+0x56>
 8002486:	2302      	movs	r3, #2
 8002488:	e1f4      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2222      	movs	r2, #34	; 0x22
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <HAL_I2C_Mem_Read+0x228>)
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f2:	88f8      	ldrh	r0, [r7, #6]
 80024f4:	893a      	ldrh	r2, [r7, #8]
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4603      	mov	r3, r0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa52 	bl	80029ac <I2C_RequestMemoryRead>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1b0      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e184      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11b      	bne.n	8002582 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e164      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b02      	cmp	r3, #2
 8002588:	d11b      	bne.n	80025c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	e144      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025d8:	e138      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b03      	cmp	r3, #3
 80025e0:	f200 80f1 	bhi.w	80027c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d123      	bne.n	8002634 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fc1b 	bl	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e139      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002632:	e10b      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b02      	cmp	r3, #2
 800263a:	d14e      	bne.n	80026da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2200      	movs	r2, #0
 8002644:	4906      	ldr	r1, [pc, #24]	; (8002660 <HAL_I2C_Mem_Read+0x22c>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fa98 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e10e      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
 8002656:	bf00      	nop
 8002658:	00100002 	.word	0x00100002
 800265c:	ffff0000 	.word	0xffff0000
 8002660:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d8:	e0b8      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2200      	movs	r2, #0
 80026e2:	4966      	ldr	r1, [pc, #408]	; (800287c <HAL_I2C_Mem_Read+0x448>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa49 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0bf      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2200      	movs	r2, #0
 800273e:	494f      	ldr	r1, [pc, #316]	; (800287c <HAL_I2C_Mem_Read+0x448>)
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa1b 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e091      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c4:	e042      	b.n	800284c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb2e 	bl	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e04c      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d118      	bne.n	800284c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f aec2 	bne.w	80025da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3728      	adds	r7, #40	; 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	00010004 	.word	0x00010004

08002880 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	4608      	mov	r0, r1
 800288a:	4611      	mov	r1, r2
 800288c:	461a      	mov	r2, r3
 800288e:	4603      	mov	r3, r0
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	460b      	mov	r3, r1
 8002894:	813b      	strh	r3, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f960 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d103      	bne.n	80028da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e05f      	b.n	800299e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	492d      	ldr	r1, [pc, #180]	; (80029a8 <I2C_RequestMemoryWrite+0x128>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f998 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e04c      	b.n	800299e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fa02 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e02b      	b.n	800299e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d105      	bne.n	8002958 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]
 8002956:	e021      	b.n	800299c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	b29b      	uxth	r3, r3
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9dc 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e005      	b.n	800299e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	00010002 	.word	0x00010002

080029ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	817b      	strh	r3, [r7, #10]
 80029be:	460b      	mov	r3, r1
 80029c0:	813b      	strh	r3, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f8c2 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a0c:	d103      	bne.n	8002a16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0aa      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	4952      	ldr	r1, [pc, #328]	; (8002b78 <I2C_RequestMemoryRead+0x1cc>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f8fa 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e097      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f964 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d107      	bne.n	8002a7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e076      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d105      	bne.n	8002a94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a88:	893b      	ldrh	r3, [r7, #8]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	e021      	b.n	8002ad8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a94:	893b      	ldrh	r3, [r7, #8]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	6a39      	ldr	r1, [r7, #32]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f93e 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d107      	bne.n	8002aca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e050      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ace:	893b      	ldrh	r3, [r7, #8]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ada:	6a39      	ldr	r1, [r7, #32]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f923 	bl	8002d28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00d      	beq.n	8002b04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d107      	bne.n	8002b00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e035      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f82b 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3a:	d103      	bne.n	8002b44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e013      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	4906      	ldr	r1, [pc, #24]	; (8002b78 <I2C_RequestMemoryRead+0x1cc>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f863 	bl	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8c:	e025      	b.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d021      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b96:	f7fe fcf9 	bl	800158c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d302      	bcc.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e023      	b.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d10d      	bne.n	8002c00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	e00c      	b.n	8002c1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0b6      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c38:	e051      	b.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d123      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e046      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d021      	beq.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9a:	f7fe fc77 	bl	800158c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d302      	bcc.n	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d116      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e020      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10c      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e00b      	b.n	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d18d      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d34:	e02d      	b.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f8ce 	bl	8002ed8 <I2C_IsAcknowledgeFailed>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e02d      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d021      	beq.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4e:	f7fe fc1d 	bl	800158c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d116      	bne.n	8002d92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0220 	orr.w	r2, r3, #32
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d1ca      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db6:	e02d      	b.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f88d 	bl	8002ed8 <I2C_IsAcknowledgeFailed>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e02d      	b.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d021      	beq.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7fe fbdc 	bl	800158c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d1ca      	bne.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e38:	e042      	b.n	8002ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d119      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0210 	mvn.w	r2, #16
 8002e50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e029      	b.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fe fb86 	bl	800158c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d1b5      	bne.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d11b      	bne.n	8002f28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ef8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e267      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d075      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e242      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x74>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe facc 	bl	800158c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fac8 	bl	800158c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e207      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fab8 	bl	800158c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fab4 	bl	800158c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1f3      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c7      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe fa6d 	bl	800158c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fe fa69 	bl	800158c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a8      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fa4c 	bl	800158c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe fa48 	bl	800158c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e187      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fe fa2c 	bl	800158c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe fa28 	bl	800158c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e167      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x200>
 8003156:	e01b      	b.n	8003190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fe fa15 	bl	800158c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00e      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fe fa11 	bl	800158c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d907      	bls.n	8003184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e150      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8097 	beq.w	80032cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b77      	ldr	r3, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe f9d1 	bl	800158c <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe f9cd 	bl	800158c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e10c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ea>
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e01c      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x30c>
 800322a:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b5c      	ldr	r3, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe f992 	bl	800158c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe f98e 	bl	800158c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0cb      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RCC_OscConfig+0x334>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fe f97c 	bl	800158c <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fe f978 	bl	800158c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0b5      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a1 	beq.w	8003418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d05c      	beq.n	800339c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d141      	bne.n	800336e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe f94c 	bl	800158c <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe f948 	bl	800158c <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e087      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe f921 	bl	800158c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe f91d 	bl	800158c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e05c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x416>
 800336c:	e054      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe f90a 	bl	800158c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe f906 	bl	800158c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e045      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x444>
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e038      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d121      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0cc      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d90c      	bls.n	8003464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d044      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e067      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4934      	ldr	r1, [pc, #208]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe f838 	bl	800158c <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe f834 	bl	800158c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d20c      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd ff98 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	080076c0 	.word	0x080076c0
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b090      	sub	sp, #64	; 0x40
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80a1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x16c>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e09b      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_GetSysClockFreq+0x184>)
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800362c:	e09b      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003632:	e098      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d028      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	627a      	str	r2, [r7, #36]	; 0x24
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800365c:	2100      	movs	r1, #0
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 8003660:	fb03 f201 	mul.w	r2, r3, r1
 8003664:	2300      	movs	r3, #0
 8003666:	fb00 f303 	mul.w	r3, r0, r3
 800366a:	4413      	add	r3, r2
 800366c:	4a43      	ldr	r2, [pc, #268]	; (800377c <HAL_RCC_GetSysClockFreq+0x188>)
 800366e:	fba0 1202 	umull	r1, r2, r0, r2
 8003672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003674:	460a      	mov	r2, r1
 8003676:	62ba      	str	r2, [r7, #40]	; 0x28
 8003678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367a:	4413      	add	r3, r2
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	2200      	movs	r2, #0
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	61fa      	str	r2, [r7, #28]
 8003686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800368a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800368e:	f7fc fdf7 	bl	8000280 <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4613      	mov	r3, r2
 8003698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369a:	e053      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369c:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	2200      	movs	r2, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	617a      	str	r2, [r7, #20]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036ae:	f04f 0b00 	mov.w	fp, #0
 80036b2:	4652      	mov	r2, sl
 80036b4:	465b      	mov	r3, fp
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	ebb2 080a 	subs.w	r8, r2, sl
 80036ce:	eb63 090b 	sbc.w	r9, r3, fp
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036e6:	ebb2 0408 	subs.w	r4, r2, r8
 80036ea:	eb63 0509 	sbc.w	r5, r3, r9
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	00eb      	lsls	r3, r5, #3
 80036f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fc:	00e2      	lsls	r2, r4, #3
 80036fe:	4614      	mov	r4, r2
 8003700:	461d      	mov	r5, r3
 8003702:	eb14 030a 	adds.w	r3, r4, sl
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	eb45 030b 	adc.w	r3, r5, fp
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	2200      	movs	r2, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	60fa      	str	r2, [r7, #12]
 8003734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003738:	f7fc fda2 	bl	8000280 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x180>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x184>)
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003768:	4618      	mov	r0, r3
 800376a:	3740      	adds	r7, #64	; 0x40
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	017d7840 	.word	0x017d7840

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	080076d0 	.word	0x080076d0

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	080076d0 	.word	0x080076d0

080037e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e03f      	b.n	800387a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fd08 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f929 	bl	8003a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b08a      	sub	sp, #40	; 0x28
 8003886:	af02      	add	r7, sp, #8
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d17c      	bne.n	800399c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_UART_Transmit+0x2c>
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e075      	b.n	800399e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_UART_Transmit+0x3e>
 80038bc:	2302      	movs	r3, #2
 80038be:	e06e      	b.n	800399e <HAL_UART_Transmit+0x11c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	; 0x21
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fe59 	bl	800158c <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d108      	bne.n	8003904 <HAL_UART_Transmit+0x82>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d104      	bne.n	8003904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e003      	b.n	800390c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003914:	e02a      	b.n	800396c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2200      	movs	r2, #0
 800391e:	2180      	movs	r1, #128	; 0x80
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f840 	bl	80039a6 <UART_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e036      	b.n	800399e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	3302      	adds	r3, #2
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e007      	b.n	800395e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3301      	adds	r3, #1
 800395c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1cf      	bne.n	8003916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f810 	bl	80039a6 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e006      	b.n	800399e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b090      	sub	sp, #64	; 0x40
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b6:	e050      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039be:	d04c      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c6:	f7fd fde1 	bl	800158c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d241      	bcs.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039f6:	637a      	str	r2, [r7, #52]	; 0x34
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a2a:	623a      	str	r2, [r7, #32]
 8003a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e5      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e00f      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d09f      	beq.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3740      	adds	r7, #64	; 0x40
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a88:	b0c0      	sub	sp, #256	; 0x100
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	68d9      	ldr	r1, [r3, #12]
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	ea40 0301 	orr.w	r3, r0, r1
 8003aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003adc:	f021 010c 	bic.w	r1, r1, #12
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003aea:	430b      	orrs	r3, r1
 8003aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afe:	6999      	ldr	r1, [r3, #24]
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	ea40 0301 	orr.w	r3, r0, r1
 8003b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b8f      	ldr	r3, [pc, #572]	; (8003d50 <UART_SetConfig+0x2cc>)
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d005      	beq.n	8003b24 <UART_SetConfig+0xa0>
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b8d      	ldr	r3, [pc, #564]	; (8003d54 <UART_SetConfig+0x2d0>)
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d104      	bne.n	8003b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7ff fe4c 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8003b28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b2c:	e003      	b.n	8003b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b2e:	f7ff fe33 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8003b32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b40:	f040 810c 	bne.w	8003d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b56:	4622      	mov	r2, r4
 8003b58:	462b      	mov	r3, r5
 8003b5a:	1891      	adds	r1, r2, r2
 8003b5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b66:	4621      	mov	r1, r4
 8003b68:	eb12 0801 	adds.w	r8, r2, r1
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	eb43 0901 	adc.w	r9, r3, r1
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b86:	4690      	mov	r8, r2
 8003b88:	4699      	mov	r9, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	eb18 0303 	adds.w	r3, r8, r3
 8003b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b94:	462b      	mov	r3, r5
 8003b96:	eb49 0303 	adc.w	r3, r9, r3
 8003b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003baa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	18db      	adds	r3, r3, r3
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bb8:	4613      	mov	r3, r2
 8003bba:	eb42 0303 	adc.w	r3, r2, r3
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bc8:	f7fc fb5a 	bl	8000280 <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <UART_SetConfig+0x2d4>)
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	011c      	lsls	r4, r3, #4
 8003bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8003c02:	4649      	mov	r1, r9
 8003c04:	eb43 0b01 	adc.w	fp, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c1c:	4692      	mov	sl, r2
 8003c1e:	469b      	mov	fp, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	eb1a 0303 	adds.w	r3, sl, r3
 8003c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	18db      	adds	r3, r3, r3
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4e:	4613      	mov	r3, r2
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
 8003c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c5e:	f7fc fb0f 	bl	8000280 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <UART_SetConfig+0x2d4>)
 8003c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2264      	movs	r2, #100	; 0x64
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	1acb      	subs	r3, r1, r3
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <UART_SetConfig+0x2d4>)
 8003c80:	fba3 2302 	umull	r2, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c8c:	441c      	add	r4, r3
 8003c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	1891      	adds	r1, r2, r2
 8003ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	1851      	adds	r1, r2, r1
 8003cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	414b      	adcs	r3, r1
 8003cba:	637b      	str	r3, [r7, #52]	; 0x34
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cc8:	4659      	mov	r1, fp
 8003cca:	00cb      	lsls	r3, r1, #3
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	00ca      	lsls	r2, r1, #3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4642      	mov	r2, r8
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	eb42 0303 	adc.w	r3, r2, r3
 8003cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d04:	460b      	mov	r3, r1
 8003d06:	18db      	adds	r3, r3, r3
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d1a:	f7fc fab1 	bl	8000280 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <UART_SetConfig+0x2d4>)
 8003d24:	fba3 1302 	umull	r1, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	2164      	movs	r1, #100	; 0x64
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	3332      	adds	r3, #50	; 0x32
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <UART_SetConfig+0x2d4>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	f003 0207 	and.w	r2, r3, #7
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4422      	add	r2, r4
 8003d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d4c:	e105      	b.n	8003f5a <UART_SetConfig+0x4d6>
 8003d4e:	bf00      	nop
 8003d50:	40011000 	.word	0x40011000
 8003d54:	40011400 	.word	0x40011400
 8003d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d6e:	4642      	mov	r2, r8
 8003d70:	464b      	mov	r3, r9
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	6239      	str	r1, [r7, #32]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d7e:	4641      	mov	r1, r8
 8003d80:	1854      	adds	r4, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb43 0501 	adc.w	r5, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003da4:	464b      	mov	r3, r9
 8003da6:	eb45 0303 	adc.w	r3, r5, r3
 8003daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dca:	4629      	mov	r1, r5
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	008a      	lsls	r2, r1, #2
 8003dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ddc:	f7fc fa50 	bl	8000280 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b60      	ldr	r3, [pc, #384]	; (8003f68 <UART_SetConfig+0x4e4>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	011c      	lsls	r4, r3, #4
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	61b9      	str	r1, [r7, #24]
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	6139      	str	r1, [r7, #16]
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e44:	464b      	mov	r3, r9
 8003e46:	460a      	mov	r2, r1
 8003e48:	eb42 0303 	adc.w	r3, r2, r3
 8003e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e68:	4649      	mov	r1, r9
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e72:	4641      	mov	r1, r8
 8003e74:	008a      	lsls	r2, r1, #2
 8003e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e7a:	f7fc fa01 	bl	8000280 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <UART_SetConfig+0x4e4>)
 8003e84:	fba3 1302 	umull	r1, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2164      	movs	r1, #100	; 0x64
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a34      	ldr	r2, [pc, #208]	; (8003f68 <UART_SetConfig+0x4e4>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea2:	441c      	add	r4, r3
 8003ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8003eac:	677a      	str	r2, [r7, #116]	; 0x74
 8003eae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	464b      	mov	r3, r9
 8003eb6:	1891      	adds	r1, r2, r2
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	415b      	adcs	r3, r3
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	1851      	adds	r1, r2, r1
 8003ec6:	6039      	str	r1, [r7, #0]
 8003ec8:	4649      	mov	r1, r9
 8003eca:	414b      	adcs	r3, r1
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003eda:	4659      	mov	r1, fp
 8003edc:	00cb      	lsls	r3, r1, #3
 8003ede:	4651      	mov	r1, sl
 8003ee0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	00ca      	lsls	r2, r1, #3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	4603      	mov	r3, r0
 8003eee:	4642      	mov	r2, r8
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	663b      	str	r3, [r7, #96]	; 0x60
 8003f08:	667a      	str	r2, [r7, #100]	; 0x64
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f16:	4649      	mov	r1, r9
 8003f18:	008b      	lsls	r3, r1, #2
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f20:	4641      	mov	r1, r8
 8003f22:	008a      	lsls	r2, r1, #2
 8003f24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f28:	f7fc f9aa 	bl	8000280 <__aeabi_uldivmod>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <UART_SetConfig+0x4e4>)
 8003f32:	fba3 1302 	umull	r1, r3, r3, r2
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	2164      	movs	r1, #100	; 0x64
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	3332      	adds	r3, #50	; 0x32
 8003f44:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <UART_SetConfig+0x4e4>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4422      	add	r2, r4
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	51eb851f 	.word	0x51eb851f

08003f6c <__NVIC_SetPriority>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	6039      	str	r1, [r7, #0]
 8003f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	db0a      	blt.n	8003f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <__NVIC_SetPriority+0x4c>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	0112      	lsls	r2, r2, #4
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f94:	e00a      	b.n	8003fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4908      	ldr	r1, [pc, #32]	; (8003fbc <__NVIC_SetPriority+0x50>)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	0112      	lsls	r2, r2, #4
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	440b      	add	r3, r1
 8003faa:	761a      	strb	r2, [r3, #24]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000e100 	.word	0xe000e100
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f06f 0004 	mvn.w	r0, #4
 8003fca:	f7ff ffcf 	bl	8003f6c <__NVIC_SetPriority>
#endif
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fda:	f3ef 8305 	mrs	r3, IPSR
 8003fde:	603b      	str	r3, [r7, #0]
  return(result);
 8003fe0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fe6:	f06f 0305 	mvn.w	r3, #5
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e00c      	b.n	8004008 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <osKernelInitialize+0x44>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <osKernelInitialize+0x44>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	e002      	b.n	8004008 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004008:	687b      	ldr	r3, [r7, #4]
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	200002bc 	.word	0x200002bc

0800401c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	603b      	str	r3, [r7, #0]
  return(result);
 8004028:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <osKernelStart+0x1a>
    stat = osErrorISR;
 800402e:	f06f 0305 	mvn.w	r3, #5
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	e010      	b.n	8004058 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <osKernelStart+0x48>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d109      	bne.n	8004052 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800403e:	f7ff ffbf 	bl	8003fc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <osKernelStart+0x48>)
 8004044:	2202      	movs	r2, #2
 8004046:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004048:	f001 f866 	bl	8005118 <vTaskStartScheduler>
      stat = osOK;
 800404c:	2300      	movs	r3, #0
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	e002      	b.n	8004058 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004058:	687b      	ldr	r3, [r7, #4]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200002bc 	.word	0x200002bc

08004068 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	; 0x38
 800406c:	af04      	add	r7, sp, #16
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004078:	f3ef 8305 	mrs	r3, IPSR
 800407c:	617b      	str	r3, [r7, #20]
  return(result);
 800407e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004080:	2b00      	cmp	r3, #0
 8004082:	d17e      	bne.n	8004182 <osThreadNew+0x11a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07b      	beq.n	8004182 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800408e:	2318      	movs	r3, #24
 8004090:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d045      	beq.n	800412e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <osThreadNew+0x48>
        name = attr->name;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <osThreadNew+0x6e>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b38      	cmp	r3, #56	; 0x38
 80040c8:	d805      	bhi.n	80040d6 <osThreadNew+0x6e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <osThreadNew+0x72>
        return (NULL);
 80040d6:	2300      	movs	r3, #0
 80040d8:	e054      	b.n	8004184 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00e      	beq.n	8004110 <osThreadNew+0xa8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b5b      	cmp	r3, #91	; 0x5b
 80040f8:	d90a      	bls.n	8004110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <osThreadNew+0xa8>
        mem = 1;
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e010      	b.n	8004132 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10c      	bne.n	8004132 <osThreadNew+0xca>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d108      	bne.n	8004132 <osThreadNew+0xca>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <osThreadNew+0xca>
          mem = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e001      	b.n	8004132 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d110      	bne.n	800415a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004140:	9202      	str	r2, [sp, #8]
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fe0c 	bl	8004d6c <xTaskCreateStatic>
 8004154:	4603      	mov	r3, r0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e013      	b.n	8004182 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d110      	bne.n	8004182 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	b29a      	uxth	r2, r3
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fe57 	bl	8004e26 <xTaskCreate>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d001      	beq.n	8004182 <osThreadNew+0x11a>
            hTask = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004182:	693b      	ldr	r3, [r7, #16]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3728      	adds	r7, #40	; 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004194:	f3ef 8305 	mrs	r3, IPSR
 8004198:	60bb      	str	r3, [r7, #8]
  return(result);
 800419a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <osDelay+0x1c>
    stat = osErrorISR;
 80041a0:	f06f 0305 	mvn.w	r3, #5
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e007      	b.n	80041b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 ff7c 	bl	80050b0 <vTaskDelay>
    }
  }

  return (stat);
 80041b8:	68fb      	ldr	r3, [r7, #12]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80041d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4a06      	ldr	r2, [pc, #24]	; (80041f4 <vApplicationGetIdleTaskMemory+0x30>)
 80041da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	200002c0 	.word	0x200002c0
 80041f4:	2000031c 	.word	0x2000031c

080041f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <vApplicationGetTimerTaskMemory+0x2c>)
 8004208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4a06      	ldr	r2, [pc, #24]	; (8004228 <vApplicationGetTimerTaskMemory+0x30>)
 800420e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	2000051c 	.word	0x2000051c
 8004228:	20000578 	.word	0x20000578

0800422c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 0208 	add.w	r2, r3, #8
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f103 0208 	add.w	r2, r3, #8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f103 0208 	add.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d103      	bne.n	80042ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e00c      	b.n	8004308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3308      	adds	r3, #8
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e002      	b.n	80042fc <vListInsert+0x2e>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d2f6      	bcs.n	80042f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6852      	ldr	r2, [r2, #4]
 8004360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d103      	bne.n	8004374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043be:	f002 f851 	bl	8006464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	441a      	add	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	3b01      	subs	r3, #1
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	441a      	add	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	22ff      	movs	r2, #255	; 0xff
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d114      	bne.n	800443e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01a      	beq.n	8004452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3310      	adds	r3, #16
 8004420:	4618      	mov	r0, r3
 8004422:	f001 f903 	bl	800562c <xTaskRemoveFromEventList>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <xQueueGenericReset+0xcc>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	e009      	b.n	8004452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3310      	adds	r3, #16
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fef2 	bl	800422c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff feed 	bl	800422c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004452:	f002 f837 	bl	80064c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004456:	2301      	movs	r3, #1
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08e      	sub	sp, #56	; 0x38
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <xQueueGenericCreateStatic+0x52>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <xQueueGenericCreateStatic+0x56>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <xQueueGenericCreateStatic+0x58>
 80044ba:	2300      	movs	r3, #0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <xQueueGenericCreateStatic+0x7e>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <xQueueGenericCreateStatic+0x82>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <xQueueGenericCreateStatic+0x84>
 80044e6:	2300      	movs	r3, #0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	61fb      	str	r3, [r7, #28]
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004502:	2350      	movs	r3, #80	; 0x50
 8004504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b50      	cmp	r3, #80	; 0x50
 800450a:	d00a      	beq.n	8004522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	61bb      	str	r3, [r7, #24]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f805 	bl	8004554 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800454c:	4618      	mov	r0, r3
 800454e:	3730      	adds	r7, #48	; 0x30
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e002      	b.n	8004576 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004582:	2101      	movs	r1, #1
 8004584:	69b8      	ldr	r0, [r7, #24]
 8004586:	f7ff ff05 	bl	8004394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08e      	sub	sp, #56	; 0x38
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045aa:	2300      	movs	r3, #0
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <xQueueGenericSend+0x32>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <xQueueGenericSend+0x40>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <xQueueGenericSend+0x44>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <xQueueGenericSend+0x46>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10a      	bne.n	80045fc <xQueueGenericSend+0x60>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d103      	bne.n	800460a <xQueueGenericSend+0x6e>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <xQueueGenericSend+0x72>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericSend+0x74>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xQueueGenericSend+0x8e>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	623b      	str	r3, [r7, #32]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800462a:	f001 f9bd 	bl	80059a8 <xTaskGetSchedulerState>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <xQueueGenericSend+0x9e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <xQueueGenericSend+0xa2>
 800463a:	2301      	movs	r3, #1
 800463c:	e000      	b.n	8004640 <xQueueGenericSend+0xa4>
 800463e:	2300      	movs	r3, #0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xQueueGenericSend+0xbe>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	61fb      	str	r3, [r7, #28]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800465a:	f001 ff03 	bl	8006464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <xQueueGenericSend+0xd4>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d129      	bne.n	80046c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004676:	f000 fa0b 	bl	8004a90 <prvCopyDataToQueue>
 800467a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	3324      	adds	r3, #36	; 0x24
 8004688:	4618      	mov	r0, r3
 800468a:	f000 ffcf 	bl	800562c <xTaskRemoveFromEventList>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d013      	beq.n	80046bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004694:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <xQueueGenericSend+0x1f8>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	e00a      	b.n	80046bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046ac:	4b39      	ldr	r3, [pc, #228]	; (8004794 <xQueueGenericSend+0x1f8>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046bc:	f001 ff02 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e063      	b.n	800478c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ca:	f001 fefb 	bl	80064c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	e05c      	b.n	800478c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046d8:	f107 0314 	add.w	r3, r7, #20
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 f809 	bl	80056f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046e6:	f001 feed 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ea:	f000 fd7b 	bl	80051e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046ee:	f001 feb9 	bl	8006464 <vPortEnterCritical>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f8:	b25b      	sxtb	r3, r3
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d103      	bne.n	8004708 <xQueueGenericSend+0x16c>
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800470e:	b25b      	sxtb	r3, r3
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d103      	bne.n	800471e <xQueueGenericSend+0x182>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800471e:	f001 fed1 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004722:	1d3a      	adds	r2, r7, #4
 8004724:	f107 0314 	add.w	r3, r7, #20
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fff8 	bl	8005720 <xTaskCheckForTimeOut>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d124      	bne.n	8004780 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004738:	f000 faa2 	bl	8004c80 <prvIsQueueFull>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	3310      	adds	r3, #16
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff1e 	bl	800558c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004752:	f000 fa2d 	bl	8004bb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004756:	f000 fd53 	bl	8005200 <xTaskResumeAll>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f47f af7c 	bne.w	800465a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <xQueueGenericSend+0x1f8>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	e772      	b.n	800465a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004776:	f000 fa1b 	bl	8004bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800477a:	f000 fd41 	bl	8005200 <xTaskResumeAll>
 800477e:	e76c      	b.n	800465a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004782:	f000 fa15 	bl	8004bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004786:	f000 fd3b 	bl	8005200 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800478a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800478c:	4618      	mov	r0, r3
 800478e:	3738      	adds	r7, #56	; 0x38
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b090      	sub	sp, #64	; 0x40
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <xQueueGenericSendFromISR+0x3c>
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xQueueGenericSendFromISR+0x40>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <xQueueGenericSendFromISR+0x42>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSendFromISR+0x6a>
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <xQueueGenericSendFromISR+0x6e>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericSendFromISR+0x70>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10a      	bne.n	8004822 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	623b      	str	r3, [r7, #32]
}
 800481e:	bf00      	nop
 8004820:	e7fe      	b.n	8004820 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004822:	f001 ff01 	bl	8006628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004826:	f3ef 8211 	mrs	r2, BASEPRI
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	61fa      	str	r2, [r7, #28]
 800483c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800483e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <xQueueGenericSendFromISR+0xbc>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d12f      	bne.n	80048b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800485a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800486a:	f000 f911 	bl	8004a90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800486e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d112      	bne.n	800489e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d016      	beq.n	80048ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	3324      	adds	r3, #36	; 0x24
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fed1 	bl	800562c <xTaskRemoveFromEventList>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e007      	b.n	80048ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800489e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048a2:	3301      	adds	r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	b25a      	sxtb	r2, r3
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048ae:	2301      	movs	r3, #1
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80048b2:	e001      	b.n	80048b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3740      	adds	r7, #64	; 0x40
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueReceive+0x30>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	623b      	str	r3, [r7, #32]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <xQueueReceive+0x3e>
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueReceive+0x42>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueReceive+0x44>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueReceive+0x5e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61fb      	str	r3, [r7, #28]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492e:	f001 f83b 	bl	80059a8 <xTaskGetSchedulerState>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueReceive+0x6e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueReceive+0x72>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueReceive+0x74>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueReceive+0x8e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61bb      	str	r3, [r7, #24]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495e:	f001 fd81 	bl	8006464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01f      	beq.n	80049ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004972:	f000 f8f7 	bl	8004b64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00f      	beq.n	80049a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	3310      	adds	r3, #16
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fe4e 	bl	800562c <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004996:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <xQueueReceive+0x1bc>)
 8004998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049a6:	f001 fd8d 	bl	80064c4 <vPortExitCritical>
				return pdPASS;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e069      	b.n	8004a82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049b4:	f001 fd86 	bl	80064c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e062      	b.n	8004a82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c2:	f107 0310 	add.w	r3, r7, #16
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fe94 	bl	80056f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d0:	f001 fd78 	bl	80064c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d4:	f000 fc06 	bl	80051e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049d8:	f001 fd44 	bl	8006464 <vPortEnterCritical>
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e8:	d103      	bne.n	80049f2 <xQueueReceive+0x122>
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f8:	b25b      	sxtb	r3, r3
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d103      	bne.n	8004a08 <xQueueReceive+0x138>
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a08:	f001 fd5c 	bl	80064c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a0c:	1d3a      	adds	r2, r7, #4
 8004a0e:	f107 0310 	add.w	r3, r7, #16
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fe83 	bl	8005720 <xTaskCheckForTimeOut>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d123      	bne.n	8004a68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a22:	f000 f917 	bl	8004c54 <prvIsQueueEmpty>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d017      	beq.n	8004a5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fda9 	bl	800558c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3c:	f000 f8b8 	bl	8004bb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a40:	f000 fbde 	bl	8005200 <xTaskResumeAll>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d189      	bne.n	800495e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a4a:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <xQueueReceive+0x1bc>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	e780      	b.n	800495e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5e:	f000 f8a7 	bl	8004bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a62:	f000 fbcd 	bl	8005200 <xTaskResumeAll>
 8004a66:	e77a      	b.n	800495e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6a:	f000 f8a1 	bl	8004bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a6e:	f000 fbc7 	bl	8005200 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a74:	f000 f8ee 	bl	8004c54 <prvIsQueueEmpty>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f43f af6f 	beq.w	800495e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3730      	adds	r7, #48	; 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10d      	bne.n	8004aca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d14d      	bne.n	8004b52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff92 	bl	80059e4 <xTaskPriorityDisinherit>
 8004ac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	e043      	b.n	8004b52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d119      	bne.n	8004b04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6858      	ldr	r0, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	f001 fff8 	bl	8006ad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	441a      	add	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d32b      	bcc.n	8004b52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	e026      	b.n	8004b52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68d8      	ldr	r0, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	f001 ffde 	bl	8006ad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	425b      	negs	r3, r3
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d207      	bcs.n	8004b40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	425b      	negs	r3, r3
 8004b3a:	441a      	add	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d105      	bne.n	8004b52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b5a:	697b      	ldr	r3, [r7, #20]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	441a      	add	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d303      	bcc.n	8004b98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68d9      	ldr	r1, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6838      	ldr	r0, [r7, #0]
 8004ba4:	f001 ff94 	bl	8006ad0 <memcpy>
	}
}
 8004ba8:	bf00      	nop
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bb8:	f001 fc54 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bc4:	e011      	b.n	8004bea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3324      	adds	r3, #36	; 0x24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fd2a 	bl	800562c <xTaskRemoveFromEventList>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bde:	f000 fe01 	bl	80057e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dce9      	bgt.n	8004bc6 <prvUnlockQueue+0x16>
 8004bf2:	e000      	b.n	8004bf6 <prvUnlockQueue+0x46>
					break;
 8004bf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bfe:	f001 fc61 	bl	80064c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c02:	f001 fc2f 	bl	8006464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c0e:	e011      	b.n	8004c34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d012      	beq.n	8004c3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd05 	bl	800562c <xTaskRemoveFromEventList>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c28:	f000 fddc 	bl	80057e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c2c:	7bbb      	ldrb	r3, [r7, #14]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	dce9      	bgt.n	8004c10 <prvUnlockQueue+0x60>
 8004c3c:	e000      	b.n	8004c40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	22ff      	movs	r2, #255	; 0xff
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c48:	f001 fc3c 	bl	80064c4 <vPortExitCritical>
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c5c:	f001 fc02 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e001      	b.n	8004c72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c72:	f001 fc27 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 8004c76:	68fb      	ldr	r3, [r7, #12]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c88:	f001 fbec 	bl	8006464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d102      	bne.n	8004c9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e001      	b.n	8004ca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ca2:	f001 fc0f 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e014      	b.n	8004cea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <vQueueAddToRegistry+0x50>)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ccc:	490c      	ldr	r1, [pc, #48]	; (8004d00 <vQueueAddToRegistry+0x50>)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <vQueueAddToRegistry+0x50>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ce2:	e006      	b.n	8004cf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d9e7      	bls.n	8004cc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000978 	.word	0x20000978

08004d04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d14:	f001 fba6 	bl	8006464 <vPortEnterCritical>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d103      	bne.n	8004d2e <vQueueWaitForMessageRestricted+0x2a>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d103      	bne.n	8004d44 <vQueueWaitForMessageRestricted+0x40>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d44:	f001 fbbe 	bl	80064c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fc3b 	bl	80055d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d5e:	6978      	ldr	r0, [r7, #20]
 8004d60:	f7ff ff26 	bl	8004bb0 <prvUnlockQueue>
	}
 8004d64:	bf00      	nop
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08e      	sub	sp, #56	; 0x38
 8004d70:	af04      	add	r7, sp, #16
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	623b      	str	r3, [r7, #32]
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	61fb      	str	r3, [r7, #28]
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004db2:	235c      	movs	r3, #92	; 0x5c
 8004db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b5c      	cmp	r3, #92	; 0x5c
 8004dba:	d00a      	beq.n	8004dd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	61bb      	str	r3, [r7, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01e      	beq.n	8004e18 <xTaskCreateStatic+0xac>
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01b      	beq.n	8004e18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004df2:	2300      	movs	r3, #0
 8004df4:	9303      	str	r3, [sp, #12]
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	9302      	str	r3, [sp, #8]
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f850 	bl	8004eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e12:	f000 f8dd 	bl	8004fd0 <prvAddNewTaskToReadyList>
 8004e16:	e001      	b.n	8004e1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e1c:	697b      	ldr	r3, [r7, #20]
	}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b08c      	sub	sp, #48	; 0x30
 8004e2a:	af04      	add	r7, sp, #16
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 fc34 	bl	80066a8 <pvPortMalloc>
 8004e40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e48:	205c      	movs	r0, #92	; 0x5c
 8004e4a:	f001 fc2d 	bl	80066a8 <pvPortMalloc>
 8004e4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e5c:	e005      	b.n	8004e6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f001 fcee 	bl	8006840 <vPortFree>
 8004e64:	e001      	b.n	8004e6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f80e 	bl	8004eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e94:	69f8      	ldr	r0, [r7, #28]
 8004e96:	f000 f89b 	bl	8004fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e002      	b.n	8004ea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	21a5      	movs	r1, #165	; 0xa5
 8004eca:	f001 fe0f 	bl	8006aec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f023 0307 	bic.w	r3, r3, #7
 8004ee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	617b      	str	r3, [r7, #20]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01f      	beq.n	8004f4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e012      	b.n	8004f3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	3334      	adds	r3, #52	; 0x34
 8004f24:	460a      	mov	r2, r1
 8004f26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d9e9      	bls.n	8004f14 <prvInitialiseNewTask+0x64>
 8004f40:	e000      	b.n	8004f44 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f4c:	e003      	b.n	8004f56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	2b37      	cmp	r3, #55	; 0x37
 8004f5a:	d901      	bls.n	8004f60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f5c:	2337      	movs	r3, #55	; 0x37
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	2200      	movs	r2, #0
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	3304      	adds	r3, #4
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff f978 	bl	800426c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	3318      	adds	r3, #24
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff f973 	bl	800426c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	69b8      	ldr	r0, [r7, #24]
 8004fb0:	f001 f928 	bl	8006204 <pxPortInitialiseStack>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fd8:	f001 fa44 	bl	8006464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fdc:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <prvAddNewTaskToReadyList+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d110      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ffc:	f000 fc16 	bl	800582c <prvInitialiseTaskLists>
 8005000:	e00d      	b.n	800501e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005002:	4b26      	ldr	r3, [pc, #152]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800500a:	4b23      	ldr	r3, [pc, #140]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	429a      	cmp	r2, r3
 8005016:	d802      	bhi.n	800501e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800501e:	4b20      	ldr	r3, [pc, #128]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3301      	adds	r3, #1
 8005024:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 8005026:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005028:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <prvAddNewTaskToReadyList+0xd0>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <prvAddNewTaskToReadyList+0x74>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <prvAddNewTaskToReadyList+0xd4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <prvAddNewTaskToReadyList+0xd8>)
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7ff f913 	bl	8004286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005060:	f001 fa30 	bl	80064c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <prvAddNewTaskToReadyList+0xcc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvAddNewTaskToReadyList+0xc8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	429a      	cmp	r2, r3
 8005078:	d207      	bcs.n	800508a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvAddNewTaskToReadyList+0xdc>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000e8c 	.word	0x20000e8c
 8005098:	200009b8 	.word	0x200009b8
 800509c:	20000e98 	.word	0x20000e98
 80050a0:	20000ea8 	.word	0x20000ea8
 80050a4:	20000e94 	.word	0x20000e94
 80050a8:	200009bc 	.word	0x200009bc
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d017      	beq.n	80050f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050c2:	4b13      	ldr	r3, [pc, #76]	; (8005110 <vTaskDelay+0x60>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <vTaskDelay+0x30>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60bb      	str	r3, [r7, #8]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050e0:	f000 f880 	bl	80051e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050e4:	2100      	movs	r1, #0
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcea 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ec:	f000 f888 	bl	8005200 <xTaskResumeAll>
 80050f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <vTaskDelay+0x64>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000eb4 	.word	0x20000eb4
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005126:	463a      	mov	r2, r7
 8005128:	1d39      	adds	r1, r7, #4
 800512a:	f107 0308 	add.w	r3, r7, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff f848 	bl	80041c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	9202      	str	r2, [sp, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	460a      	mov	r2, r1
 8005146:	4921      	ldr	r1, [pc, #132]	; (80051cc <vTaskStartScheduler+0xb4>)
 8005148:	4821      	ldr	r0, [pc, #132]	; (80051d0 <vTaskStartScheduler+0xb8>)
 800514a:	f7ff fe0f 	bl	8004d6c <xTaskCreateStatic>
 800514e:	4603      	mov	r3, r0
 8005150:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <vTaskStartScheduler+0xbc>)
 8005152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <vTaskStartScheduler+0xbc>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e001      	b.n	8005166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d102      	bne.n	8005172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800516c:	f000 fcfc 	bl	8005b68 <xTimerCreateTimerTask>
 8005170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d116      	bne.n	80051a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	613b      	str	r3, [r7, #16]
}
 800518a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <vTaskStartScheduler+0xc0>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <vTaskStartScheduler+0xc4>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800519a:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <vTaskStartScheduler+0xc8>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051a0:	f001 f8be 	bl	8006320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051a4:	e00e      	b.n	80051c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d10a      	bne.n	80051c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60fb      	str	r3, [r7, #12]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <vTaskStartScheduler+0xaa>
}
 80051c4:	bf00      	nop
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	0800763c 	.word	0x0800763c
 80051d0:	080057fd 	.word	0x080057fd
 80051d4:	20000eb0 	.word	0x20000eb0
 80051d8:	20000eac 	.word	0x20000eac
 80051dc:	20000e98 	.word	0x20000e98
 80051e0:	20000e90 	.word	0x20000e90

080051e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051e8:	4b04      	ldr	r3, [pc, #16]	; (80051fc <vTaskSuspendAll+0x18>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4a03      	ldr	r2, [pc, #12]	; (80051fc <vTaskSuspendAll+0x18>)
 80051f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000eb4 	.word	0x20000eb4

08005200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800520e:	4b42      	ldr	r3, [pc, #264]	; (8005318 <xTaskResumeAll+0x118>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <xTaskResumeAll+0x2c>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	603b      	str	r3, [r7, #0]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800522c:	f001 f91a 	bl	8006464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <xTaskResumeAll+0x118>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3b01      	subs	r3, #1
 8005236:	4a38      	ldr	r2, [pc, #224]	; (8005318 <xTaskResumeAll+0x118>)
 8005238:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <xTaskResumeAll+0x118>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d162      	bne.n	8005308 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <xTaskResumeAll+0x11c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d05e      	beq.n	8005308 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800524a:	e02f      	b.n	80052ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <xTaskResumeAll+0x120>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3318      	adds	r3, #24
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff f871 	bl	8004340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3304      	adds	r3, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff f86c 	bl	8004340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <xTaskResumeAll+0x124>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <xTaskResumeAll+0x7c>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <xTaskResumeAll+0x124>)
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4a27      	ldr	r2, [pc, #156]	; (8005328 <xTaskResumeAll+0x128>)
 800528a:	441a      	add	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3304      	adds	r3, #4
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7fe fff7 	bl	8004286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4b23      	ldr	r3, [pc, #140]	; (800532c <xTaskResumeAll+0x12c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <xTaskResumeAll+0x130>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052ac:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <xTaskResumeAll+0x120>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1cb      	bne.n	800524c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052ba:	f000 fb55 	bl	8005968 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052be:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <xTaskResumeAll+0x134>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d010      	beq.n	80052ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ca:	f000 f847 	bl	800535c <xTaskIncrementTick>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052d4:	4b16      	ldr	r3, [pc, #88]	; (8005330 <xTaskResumeAll+0x130>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3b01      	subs	r3, #1
 80052de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f1      	bne.n	80052ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052e6:	4b13      	ldr	r3, [pc, #76]	; (8005334 <xTaskResumeAll+0x134>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052ec:	4b10      	ldr	r3, [pc, #64]	; (8005330 <xTaskResumeAll+0x130>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052f8:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <xTaskResumeAll+0x138>)
 80052fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005308:	f001 f8dc 	bl	80064c4 <vPortExitCritical>

	return xAlreadyYielded;
 800530c:	68bb      	ldr	r3, [r7, #8]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000eb4 	.word	0x20000eb4
 800531c:	20000e8c 	.word	0x20000e8c
 8005320:	20000e4c 	.word	0x20000e4c
 8005324:	20000e94 	.word	0x20000e94
 8005328:	200009bc 	.word	0x200009bc
 800532c:	200009b8 	.word	0x200009b8
 8005330:	20000ea0 	.word	0x20000ea0
 8005334:	20000e9c 	.word	0x20000e9c
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <xTaskGetTickCount+0x1c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005348:	687b      	ldr	r3, [r7, #4]
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000e90 	.word	0x20000e90

0800535c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005366:	4b4f      	ldr	r3, [pc, #316]	; (80054a4 <xTaskIncrementTick+0x148>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 808f 	bne.w	800548e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005370:	4b4d      	ldr	r3, [pc, #308]	; (80054a8 <xTaskIncrementTick+0x14c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005378:	4a4b      	ldr	r2, [pc, #300]	; (80054a8 <xTaskIncrementTick+0x14c>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d120      	bne.n	80053c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005384:	4b49      	ldr	r3, [pc, #292]	; (80054ac <xTaskIncrementTick+0x150>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xTaskIncrementTick+0x46>
 80053a4:	4b41      	ldr	r3, [pc, #260]	; (80054ac <xTaskIncrementTick+0x150>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <xTaskIncrementTick+0x154>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3f      	ldr	r2, [pc, #252]	; (80054ac <xTaskIncrementTick+0x150>)
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	4a3f      	ldr	r2, [pc, #252]	; (80054b0 <xTaskIncrementTick+0x154>)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b3e      	ldr	r3, [pc, #248]	; (80054b4 <xTaskIncrementTick+0x158>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3301      	adds	r3, #1
 80053be:	4a3d      	ldr	r2, [pc, #244]	; (80054b4 <xTaskIncrementTick+0x158>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	f000 fad1 	bl	8005968 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c6:	4b3c      	ldr	r3, [pc, #240]	; (80054b8 <xTaskIncrementTick+0x15c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d349      	bcc.n	8005464 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <xTaskIncrementTick+0x150>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053da:	4b37      	ldr	r3, [pc, #220]	; (80054b8 <xTaskIncrementTick+0x15c>)
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	601a      	str	r2, [r3, #0]
					break;
 80053e2:	e03f      	b.n	8005464 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <xTaskIncrementTick+0x150>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d203      	bcs.n	8005404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053fc:	4a2e      	ldr	r2, [pc, #184]	; (80054b8 <xTaskIncrementTick+0x15c>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005402:	e02f      	b.n	8005464 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	3304      	adds	r3, #4
 8005408:	4618      	mov	r0, r3
 800540a:	f7fe ff99 	bl	8004340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3318      	adds	r3, #24
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe ff90 	bl	8004340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <xTaskIncrementTick+0x160>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d903      	bls.n	8005434 <xTaskIncrementTick+0xd8>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <xTaskIncrementTick+0x160>)
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <xTaskIncrementTick+0x164>)
 8005442:	441a      	add	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f7fe ff1b 	bl	8004286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <xTaskIncrementTick+0x168>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	429a      	cmp	r2, r3
 800545c:	d3b8      	bcc.n	80053d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800545e:	2301      	movs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005462:	e7b5      	b.n	80053d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005464:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <xTaskIncrementTick+0x168>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546a:	4915      	ldr	r1, [pc, #84]	; (80054c0 <xTaskIncrementTick+0x164>)
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d901      	bls.n	8005480 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <xTaskIncrementTick+0x16c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e004      	b.n	8005498 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <xTaskIncrementTick+0x170>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3301      	adds	r3, #1
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <xTaskIncrementTick+0x170>)
 8005496:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005498:	697b      	ldr	r3, [r7, #20]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000eb4 	.word	0x20000eb4
 80054a8:	20000e90 	.word	0x20000e90
 80054ac:	20000e44 	.word	0x20000e44
 80054b0:	20000e48 	.word	0x20000e48
 80054b4:	20000ea4 	.word	0x20000ea4
 80054b8:	20000eac 	.word	0x20000eac
 80054bc:	20000e94 	.word	0x20000e94
 80054c0:	200009bc 	.word	0x200009bc
 80054c4:	200009b8 	.word	0x200009b8
 80054c8:	20000ea0 	.word	0x20000ea0
 80054cc:	20000e9c 	.word	0x20000e9c

080054d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <vTaskSwitchContext+0xa8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054de:	4b27      	ldr	r3, [pc, #156]	; (800557c <vTaskSwitchContext+0xac>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054e4:	e041      	b.n	800556a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054e6:	4b25      	ldr	r3, [pc, #148]	; (800557c <vTaskSwitchContext+0xac>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <vTaskSwitchContext+0xb0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e010      	b.n	8005516 <vTaskSwitchContext+0x46>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <vTaskSwitchContext+0x40>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <vTaskSwitchContext+0x3e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3b01      	subs	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	491b      	ldr	r1, [pc, #108]	; (8005584 <vTaskSwitchContext+0xb4>)
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0e4      	beq.n	80054f4 <vTaskSwitchContext+0x24>
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4a13      	ldr	r2, [pc, #76]	; (8005584 <vTaskSwitchContext+0xb4>)
 8005536:	4413      	add	r3, r2
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3308      	adds	r3, #8
 800554c:	429a      	cmp	r2, r3
 800554e:	d104      	bne.n	800555a <vTaskSwitchContext+0x8a>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <vTaskSwitchContext+0xb8>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4a06      	ldr	r2, [pc, #24]	; (8005580 <vTaskSwitchContext+0xb0>)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6013      	str	r3, [r2, #0]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000eb4 	.word	0x20000eb4
 800557c:	20000ea0 	.word	0x20000ea0
 8005580:	20000e94 	.word	0x20000e94
 8005584:	200009bc 	.word	0x200009bc
 8005588:	200009b8 	.word	0x200009b8

0800558c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60fb      	str	r3, [r7, #12]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055b2:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <vTaskPlaceOnEventList+0x44>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fe fe87 	bl	80042ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055c0:	2101      	movs	r1, #1
 80055c2:	6838      	ldr	r0, [r7, #0]
 80055c4:	f000 fa7c 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
}
 80055c8:	bf00      	nop
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200009b8 	.word	0x200009b8

080055d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	617b      	str	r3, [r7, #20]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <vTaskPlaceOnEventListRestricted+0x54>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3318      	adds	r3, #24
 8005602:	4619      	mov	r1, r3
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7fe fe3e 	bl	8004286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005610:	f04f 33ff 	mov.w	r3, #4294967295
 8005614:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	68b8      	ldr	r0, [r7, #8]
 800561a:	f000 fa51 	bl	8005ac0 <prvAddCurrentTaskToDelayedList>
	}
 800561e:	bf00      	nop
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	200009b8 	.word	0x200009b8

0800562c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60fb      	str	r3, [r7, #12]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3318      	adds	r3, #24
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fe6f 	bl	8004340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <xTaskRemoveFromEventList+0xb0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d11d      	bne.n	80056a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3304      	adds	r3, #4
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe fe66 	bl	8004340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <xTaskRemoveFromEventList+0xb4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d903      	bls.n	8005688 <xTaskRemoveFromEventList+0x5c>
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <xTaskRemoveFromEventList+0xb4>)
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <xTaskRemoveFromEventList+0xb8>)
 8005696:	441a      	add	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe fdf1 	bl	8004286 <vListInsertEnd>
 80056a4:	e005      	b.n	80056b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3318      	adds	r3, #24
 80056aa:	4619      	mov	r1, r3
 80056ac:	480e      	ldr	r0, [pc, #56]	; (80056e8 <xTaskRemoveFromEventList+0xbc>)
 80056ae:	f7fe fdea 	bl	8004286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <xTaskRemoveFromEventList+0xc0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	429a      	cmp	r2, r3
 80056be:	d905      	bls.n	80056cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <xTaskRemoveFromEventList+0xc4>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	e001      	b.n	80056d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80056d0:	697b      	ldr	r3, [r7, #20]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000eb4 	.word	0x20000eb4
 80056e0:	20000e94 	.word	0x20000e94
 80056e4:	200009bc 	.word	0x200009bc
 80056e8:	20000e4c 	.word	0x20000e4c
 80056ec:	200009b8 	.word	0x200009b8
 80056f0:	20000ea0 	.word	0x20000ea0

080056f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <vTaskInternalSetTimeOutState+0x24>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <vTaskInternalSetTimeOutState+0x28>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20000ea4 	.word	0x20000ea4
 800571c:	20000e90 	.word	0x20000e90

08005720 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005762:	f000 fe7f 	bl	8006464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <xTaskCheckForTimeOut+0xbc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d102      	bne.n	8005786 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e023      	b.n	80057ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <xTaskCheckForTimeOut+0xc0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d007      	beq.n	80057a2 <xTaskCheckForTimeOut+0x82>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e015      	b.n	80057ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d20b      	bcs.n	80057c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad2      	subs	r2, r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff9b 	bl	80056f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e004      	b.n	80057ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057ca:	2301      	movs	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057ce:	f000 fe79 	bl	80064c4 <vPortExitCritical>

	return xReturn;
 80057d2:	69fb      	ldr	r3, [r7, #28]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3720      	adds	r7, #32
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000e90 	.word	0x20000e90
 80057e0:	20000ea4 	.word	0x20000ea4

080057e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <vTaskMissedYield+0x14>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	20000ea0 	.word	0x20000ea0

080057fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005804:	f000 f852 	bl	80058ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <prvIdleTask+0x28>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d9f9      	bls.n	8005804 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <prvIdleTask+0x2c>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005820:	e7f0      	b.n	8005804 <prvIdleTask+0x8>
 8005822:	bf00      	nop
 8005824:	200009bc 	.word	0x200009bc
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	e00c      	b.n	8005852 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <prvInitialiseTaskLists+0x60>)
 8005844:	4413      	add	r3, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fcf0 	bl	800422c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3301      	adds	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b37      	cmp	r3, #55	; 0x37
 8005856:	d9ef      	bls.n	8005838 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005858:	480d      	ldr	r0, [pc, #52]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800585a:	f7fe fce7 	bl	800422c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800585e:	480d      	ldr	r0, [pc, #52]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005860:	f7fe fce4 	bl	800422c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005864:	480c      	ldr	r0, [pc, #48]	; (8005898 <prvInitialiseTaskLists+0x6c>)
 8005866:	f7fe fce1 	bl	800422c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800586a:	480c      	ldr	r0, [pc, #48]	; (800589c <prvInitialiseTaskLists+0x70>)
 800586c:	f7fe fcde 	bl	800422c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <prvInitialiseTaskLists+0x74>)
 8005872:	f7fe fcdb 	bl	800422c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <prvInitialiseTaskLists+0x78>)
 8005878:	4a05      	ldr	r2, [pc, #20]	; (8005890 <prvInitialiseTaskLists+0x64>)
 800587a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800587c:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <prvInitialiseTaskLists+0x7c>)
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <prvInitialiseTaskLists+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200009bc 	.word	0x200009bc
 8005890:	20000e1c 	.word	0x20000e1c
 8005894:	20000e30 	.word	0x20000e30
 8005898:	20000e4c 	.word	0x20000e4c
 800589c:	20000e60 	.word	0x20000e60
 80058a0:	20000e78 	.word	0x20000e78
 80058a4:	20000e44 	.word	0x20000e44
 80058a8:	20000e48 	.word	0x20000e48

080058ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058b2:	e019      	b.n	80058e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058b4:	f000 fdd6 	bl	8006464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058b8:	4b10      	ldr	r3, [pc, #64]	; (80058fc <prvCheckTasksWaitingTermination+0x50>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fd3b 	bl	8004340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <prvCheckTasksWaitingTermination+0x54>)
 80058d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3b01      	subs	r3, #1
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80058de:	f000 fdf1 	bl	80064c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f810 	bl	8005908 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <prvCheckTasksWaitingTermination+0x58>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e1      	bne.n	80058b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000e60 	.word	0x20000e60
 8005900:	20000e8c 	.word	0x20000e8c
 8005904:	20000e74 	.word	0x20000e74

08005908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	4618      	mov	r0, r3
 8005920:	f000 ff8e 	bl	8006840 <vPortFree>
				vPortFree( pxTCB );
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 ff8b 	bl	8006840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800592a:	e018      	b.n	800595e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005932:	2b01      	cmp	r3, #1
 8005934:	d103      	bne.n	800593e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 ff82 	bl	8006840 <vPortFree>
	}
 800593c:	e00f      	b.n	800595e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005944:	2b02      	cmp	r3, #2
 8005946:	d00a      	beq.n	800595e <prvDeleteTCB+0x56>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <prvDeleteTCB+0x54>
	}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <prvResetNextTaskUnblockTime+0x38>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005978:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <prvResetNextTaskUnblockTime+0x3c>)
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005980:	e008      	b.n	8005994 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <prvResetNextTaskUnblockTime+0x38>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <prvResetNextTaskUnblockTime+0x3c>)
 8005992:	6013      	str	r3, [r2, #0]
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	20000e44 	.word	0x20000e44
 80059a4:	20000eac 	.word	0x20000eac

080059a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059ae:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <xTaskGetSchedulerState+0x34>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059b6:	2301      	movs	r3, #1
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e008      	b.n	80059ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <xTaskGetSchedulerState+0x38>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059c4:	2302      	movs	r3, #2
 80059c6:	607b      	str	r3, [r7, #4]
 80059c8:	e001      	b.n	80059ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059ce:	687b      	ldr	r3, [r7, #4]
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	20000e98 	.word	0x20000e98
 80059e0:	20000eb4 	.word	0x20000eb4

080059e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d056      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <xTaskPriorityDisinherit+0xd0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d00a      	beq.n	8005a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	1e5a      	subs	r2, r3, #1
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d02c      	beq.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d128      	bne.n	8005aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fc70 	bl	8004340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <xTaskPriorityDisinherit+0xd4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d903      	bls.n	8005a88 <xTaskPriorityDisinherit+0xa4>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <xTaskPriorityDisinherit+0xd4>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <xTaskPriorityDisinherit+0xd8>)
 8005a96:	441a      	add	r2, r3
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe fbf1 	bl	8004286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
	}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200009b8 	.word	0x200009b8
 8005ab8:	20000e94 	.word	0x20000e94
 8005abc:	200009bc 	.word	0x200009bc

08005ac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fc32 	bl	8004340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d10a      	bne.n	8005afa <prvAddCurrentTaskToDelayedList+0x3a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4819      	ldr	r0, [pc, #100]	; (8005b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8005af4:	f7fe fbc7 	bl	8004286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af8:	e026      	b.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d209      	bcs.n	8005b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fbd5 	bl	80042ce <vListInsert>
}
 8005b24:	e010      	b.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f7fe fbcb 	bl	80042ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d202      	bcs.n	8005b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b42:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20000e90 	.word	0x20000e90
 8005b54:	200009b8 	.word	0x200009b8
 8005b58:	20000e78 	.word	0x20000e78
 8005b5c:	20000e48 	.word	0x20000e48
 8005b60:	20000e44 	.word	0x20000e44
 8005b64:	20000eac 	.word	0x20000eac

08005b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b72:	f000 fb07 	bl	8006184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b76:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <xTimerCreateTimerTask+0x80>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d021      	beq.n	8005bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b86:	1d3a      	adds	r2, r7, #4
 8005b88:	f107 0108 	add.w	r1, r7, #8
 8005b8c:	f107 030c 	add.w	r3, r7, #12
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fb31 	bl	80041f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	9202      	str	r2, [sp, #8]
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	4910      	ldr	r1, [pc, #64]	; (8005bec <xTimerCreateTimerTask+0x84>)
 8005baa:	4811      	ldr	r0, [pc, #68]	; (8005bf0 <xTimerCreateTimerTask+0x88>)
 8005bac:	f7ff f8de 	bl	8004d6c <xTaskCreateStatic>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a10      	ldr	r2, [pc, #64]	; (8005bf4 <xTimerCreateTimerTask+0x8c>)
 8005bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	; (8005bf4 <xTimerCreateTimerTask+0x8c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	613b      	str	r3, [r7, #16]
}
 8005bda:	bf00      	nop
 8005bdc:	e7fe      	b.n	8005bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bde:	697b      	ldr	r3, [r7, #20]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000ee8 	.word	0x20000ee8
 8005bec:	08007644 	.word	0x08007644
 8005bf0:	08005d2d 	.word	0x08005d2d
 8005bf4:	20000eec 	.word	0x20000eec

08005bf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	623b      	str	r3, [r7, #32]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <xTimerGenericCommand+0x98>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02a      	beq.n	8005c84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	dc18      	bgt.n	8005c72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c40:	f7ff feb2 	bl	80059a8 <xTaskGetSchedulerState>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d109      	bne.n	8005c5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <xTimerGenericCommand+0x98>)
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	f107 0110 	add.w	r1, r7, #16
 8005c52:	2300      	movs	r3, #0
 8005c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c56:	f7fe fca1 	bl	800459c <xQueueGenericSend>
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005c5c:	e012      	b.n	8005c84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <xTimerGenericCommand+0x98>)
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	f107 0110 	add.w	r1, r7, #16
 8005c66:	2300      	movs	r3, #0
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f7fe fc97 	bl	800459c <xQueueGenericSend>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24
 8005c70:	e008      	b.n	8005c84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <xTimerGenericCommand+0x98>)
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	f107 0110 	add.w	r1, r7, #16
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	f7fe fd8b 	bl	8004798 <xQueueGenericSendFromISR>
 8005c82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3728      	adds	r7, #40	; 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000ee8 	.word	0x20000ee8

08005c94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9e:	4b22      	ldr	r3, [pc, #136]	; (8005d28 <prvProcessExpiredTimer+0x94>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fe fb47 	bl	8004340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d022      	beq.n	8005d06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	18d1      	adds	r1, r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	6978      	ldr	r0, [r7, #20]
 8005cce:	f000 f8d1 	bl	8005e74 <prvInsertTimerInActiveList>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01f      	beq.n	8005d18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f7ff ff88 	bl	8005bf8 <xTimerGenericCommand>
 8005ce8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d113      	bne.n	8005d18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	60fb      	str	r3, [r7, #12]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	6978      	ldr	r0, [r7, #20]
 8005d1e:	4798      	blx	r3
}
 8005d20:	bf00      	nop
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000ee0 	.word	0x20000ee0

08005d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f857 	bl	8005dec <prvGetNextExpireTime>
 8005d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f803 	bl	8005d50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d4a:	f000 f8d5 	bl	8005ef8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d4e:	e7f1      	b.n	8005d34 <prvTimerTask+0x8>

08005d50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d5a:	f7ff fa43 	bl	80051e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d5e:	f107 0308 	add.w	r3, r7, #8
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f866 	bl	8005e34 <prvSampleTimeNow>
 8005d68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d130      	bne.n	8005dd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <prvProcessTimerOrBlockTask+0x3c>
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d806      	bhi.n	8005d8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d7e:	f7ff fa3f 	bl	8005200 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff85 	bl	8005c94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d8a:	e024      	b.n	8005dd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d008      	beq.n	8005da4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d92:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <prvProcessTimerOrBlockTask+0x90>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <prvProcessTimerOrBlockTask+0x50>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <prvProcessTimerOrBlockTask+0x52>
 8005da0:	2300      	movs	r3, #0
 8005da2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <prvProcessTimerOrBlockTask+0x94>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	f7fe ffa7 	bl	8004d04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005db6:	f7ff fa23 	bl	8005200 <xTaskResumeAll>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <prvProcessTimerOrBlockTask+0x98>)
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
}
 8005dd0:	e001      	b.n	8005dd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dd2:	f7ff fa15 	bl	8005200 <xTaskResumeAll>
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000ee4 	.word	0x20000ee4
 8005de4:	20000ee8 	.word	0x20000ee8
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005df4:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <prvGetNextExpireTime+0x44>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <prvGetNextExpireTime+0x16>
 8005dfe:	2201      	movs	r2, #1
 8005e00:	e000      	b.n	8005e04 <prvGetNextExpireTime+0x18>
 8005e02:	2200      	movs	r2, #0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <prvGetNextExpireTime+0x44>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e001      	b.n	8005e20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e20:	68fb      	ldr	r3, [r7, #12]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000ee0 	.word	0x20000ee0

08005e34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e3c:	f7ff fa7e 	bl	800533c <xTaskGetTickCount>
 8005e40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <prvSampleTimeNow+0x3c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d205      	bcs.n	8005e58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e4c:	f000 f936 	bl	80060bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e5e:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <prvSampleTimeNow+0x3c>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e64:	68fb      	ldr	r3, [r7, #12]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000ef0 	.word	0x20000ef0

08005e74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d812      	bhi.n	8005ec0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e01b      	b.n	8005ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eae:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <prvInsertTimerInActiveList+0x7c>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7fe fa08 	bl	80042ce <vListInsert>
 8005ebe:	e012      	b.n	8005ee6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d206      	bcs.n	8005ed6 <prvInsertTimerInActiveList+0x62>
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d302      	bcc.n	8005ed6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	e007      	b.n	8005ee6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ed6:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <prvInsertTimerInActiveList+0x80>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3304      	adds	r3, #4
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f7fe f9f4 	bl	80042ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ee6:	697b      	ldr	r3, [r7, #20]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000ee4 	.word	0x20000ee4
 8005ef4:	20000ee0 	.word	0x20000ee0

08005ef8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08e      	sub	sp, #56	; 0x38
 8005efc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005efe:	e0ca      	b.n	8006096 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da18      	bge.n	8005f38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	3304      	adds	r3, #4
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61fb      	str	r3, [r7, #28]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f2e:	6850      	ldr	r0, [r2, #4]
 8005f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f32:	6892      	ldr	r2, [r2, #8]
 8005f34:	4611      	mov	r1, r2
 8005f36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f2c0 80aa 	blt.w	8006094 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe f9f5 	bl	8004340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f56:	463b      	mov	r3, r7
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff6b 	bl	8005e34 <prvSampleTimeNow>
 8005f5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	f200 8097 	bhi.w	8006096 <prvProcessReceivedCommands+0x19e>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <prvProcessReceivedCommands+0x78>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f99 	.word	0x08005f99
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	0800600d 	.word	0x0800600d
 8005f80:	08006021 	.word	0x08006021
 8005f84:	0800606b 	.word	0x0800606b
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005f99 	.word	0x08005f99
 8005f90:	0800600d 	.word	0x0800600d
 8005f94:	08006021 	.word	0x08006021
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f9e:	f043 0301 	orr.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	18d1      	adds	r1, r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb8:	f7ff ff5c 	bl	8005e74 <prvInsertTimerInActiveList>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d069      	beq.n	8006096 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05e      	beq.n	8006096 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	441a      	add	r2, r3
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fea:	f7ff fe05 	bl	8005bf8 <xTimerGenericCommand>
 8005fee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d14f      	bne.n	8006096 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	61bb      	str	r3, [r7, #24]
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800601e:	e03a      	b.n	8006096 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	b2da      	uxtb	r2, r3
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	617b      	str	r3, [r7, #20]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	18d1      	adds	r1, r2, r3
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006064:	f7ff ff06 	bl	8005e74 <prvInsertTimerInActiveList>
					break;
 8006068:	e015      	b.n	8006096 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d103      	bne.n	8006080 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607a:	f000 fbe1 	bl	8006840 <vPortFree>
 800607e:	e00a      	b.n	8006096 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006092:	e000      	b.n	8006096 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006094:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006096:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <prvProcessReceivedCommands+0x1c0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	1d39      	adds	r1, r7, #4
 800609c:	2200      	movs	r2, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fc16 	bl	80048d0 <xQueueReceive>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f47f af2a 	bne.w	8005f00 <prvProcessReceivedCommands+0x8>
	}
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	3730      	adds	r7, #48	; 0x30
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000ee8 	.word	0x20000ee8

080060bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060c2:	e048      	b.n	8006156 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060c4:	4b2d      	ldr	r3, [pc, #180]	; (800617c <prvSwitchTimerLists+0xc0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ce:	4b2b      	ldr	r3, [pc, #172]	; (800617c <prvSwitchTimerLists+0xc0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe f92f 	bl	8004340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02e      	beq.n	8006156 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	429a      	cmp	r2, r3
 8006108:	d90e      	bls.n	8006128 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006116:	4b19      	ldr	r3, [pc, #100]	; (800617c <prvSwitchTimerLists+0xc0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe f8d4 	bl	80042ce <vListInsert>
 8006126:	e016      	b.n	8006156 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	2100      	movs	r1, #0
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fd60 	bl	8005bf8 <xTimerGenericCommand>
 8006138:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	603b      	str	r3, [r7, #0]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <prvSwitchTimerLists+0xc0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1b1      	bne.n	80060c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <prvSwitchTimerLists+0xc0>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006166:	4b06      	ldr	r3, [pc, #24]	; (8006180 <prvSwitchTimerLists+0xc4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a04      	ldr	r2, [pc, #16]	; (800617c <prvSwitchTimerLists+0xc0>)
 800616c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800616e:	4a04      	ldr	r2, [pc, #16]	; (8006180 <prvSwitchTimerLists+0xc4>)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	6013      	str	r3, [r2, #0]
}
 8006174:	bf00      	nop
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000ee0 	.word	0x20000ee0
 8006180:	20000ee4 	.word	0x20000ee4

08006184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800618a:	f000 f96b 	bl	8006464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <prvCheckForValidListAndQueue+0x60>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d120      	bne.n	80061d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006196:	4814      	ldr	r0, [pc, #80]	; (80061e8 <prvCheckForValidListAndQueue+0x64>)
 8006198:	f7fe f848 	bl	800422c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800619c:	4813      	ldr	r0, [pc, #76]	; (80061ec <prvCheckForValidListAndQueue+0x68>)
 800619e:	f7fe f845 	bl	800422c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <prvCheckForValidListAndQueue+0x6c>)
 80061a4:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <prvCheckForValidListAndQueue+0x64>)
 80061a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061a8:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <prvCheckForValidListAndQueue+0x70>)
 80061aa:	4a10      	ldr	r2, [pc, #64]	; (80061ec <prvCheckForValidListAndQueue+0x68>)
 80061ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <prvCheckForValidListAndQueue+0x74>)
 80061b4:	4a11      	ldr	r2, [pc, #68]	; (80061fc <prvCheckForValidListAndQueue+0x78>)
 80061b6:	2110      	movs	r1, #16
 80061b8:	200a      	movs	r0, #10
 80061ba:	f7fe f953 	bl	8004464 <xQueueGenericCreateStatic>
 80061be:	4603      	mov	r3, r0
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <prvCheckForValidListAndQueue+0x60>)
 80061c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061c4:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <prvCheckForValidListAndQueue+0x60>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <prvCheckForValidListAndQueue+0x60>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	490b      	ldr	r1, [pc, #44]	; (8006200 <prvCheckForValidListAndQueue+0x7c>)
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fd6c 	bl	8004cb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061d8:	f000 f974 	bl	80064c4 <vPortExitCritical>
}
 80061dc:	bf00      	nop
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000ee8 	.word	0x20000ee8
 80061e8:	20000eb8 	.word	0x20000eb8
 80061ec:	20000ecc 	.word	0x20000ecc
 80061f0:	20000ee0 	.word	0x20000ee0
 80061f4:	20000ee4 	.word	0x20000ee4
 80061f8:	20000f94 	.word	0x20000f94
 80061fc:	20000ef4 	.word	0x20000ef4
 8006200:	0800764c 	.word	0x0800764c

08006204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b04      	subs	r3, #4
 8006214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800621c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b04      	subs	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3b04      	subs	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006234:	4a0c      	ldr	r2, [pc, #48]	; (8006268 <pxPortInitialiseStack+0x64>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3b14      	subs	r3, #20
 800623e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3b04      	subs	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f06f 0202 	mvn.w	r2, #2
 8006252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3b20      	subs	r3, #32
 8006258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	0800626d 	.word	0x0800626d

0800626c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006276:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <prvTaskExitError+0x54>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d00a      	beq.n	8006296 <prvTaskExitError+0x2a>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <prvTaskExitError+0x28>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062aa:	bf00      	nop
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0fc      	beq.n	80062ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000000c 	.word	0x2000000c
	...

080062d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <pxCurrentTCBConst2>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	6808      	ldr	r0, [r1, #0]
 80062d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	f380 8809 	msr	PSP, r0
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f04f 0000 	mov.w	r0, #0
 80062e6:	f380 8811 	msr	BASEPRI, r0
 80062ea:	4770      	bx	lr
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst2>:
 80062f0:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062f8:	4808      	ldr	r0, [pc, #32]	; (800631c <prvPortStartFirstTask+0x24>)
 80062fa:	6800      	ldr	r0, [r0, #0]
 80062fc:	6800      	ldr	r0, [r0, #0]
 80062fe:	f380 8808 	msr	MSP, r0
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f380 8814 	msr	CONTROL, r0
 800630a:	b662      	cpsie	i
 800630c:	b661      	cpsie	f
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	df00      	svc	0
 8006318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800631a:	bf00      	nop
 800631c:	e000ed08 	.word	0xe000ed08

08006320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006326:	4b46      	ldr	r3, [pc, #280]	; (8006440 <xPortStartScheduler+0x120>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a46      	ldr	r2, [pc, #280]	; (8006444 <xPortStartScheduler+0x124>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10a      	bne.n	8006346 <xPortStartScheduler+0x26>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <xPortStartScheduler+0x120>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a3f      	ldr	r2, [pc, #252]	; (8006448 <xPortStartScheduler+0x128>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d10a      	bne.n	8006366 <xPortStartScheduler+0x46>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	60fb      	str	r3, [r7, #12]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <xPortStartScheduler+0x12c>)
 8006368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	22ff      	movs	r2, #255	; 0xff
 8006376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006388:	b2da      	uxtb	r2, r3
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <xPortStartScheduler+0x130>)
 800638c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <xPortStartScheduler+0x134>)
 8006390:	2207      	movs	r2, #7
 8006392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006394:	e009      	b.n	80063aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <xPortStartScheduler+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3b01      	subs	r3, #1
 800639c:	4a2d      	ldr	r2, [pc, #180]	; (8006454 <xPortStartScheduler+0x134>)
 800639e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d0ef      	beq.n	8006396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063b6:	4b27      	ldr	r3, [pc, #156]	; (8006454 <xPortStartScheduler+0x134>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f1c3 0307 	rsb	r3, r3, #7
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d00a      	beq.n	80063d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063d8:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <xPortStartScheduler+0x134>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <xPortStartScheduler+0x134>)
 80063e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063e2:	4b1c      	ldr	r3, [pc, #112]	; (8006454 <xPortStartScheduler+0x134>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ea:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <xPortStartScheduler+0x134>)
 80063ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <xPortStartScheduler+0x138>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <xPortStartScheduler+0x138>)
 80063fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006402:	4b15      	ldr	r3, [pc, #84]	; (8006458 <xPortStartScheduler+0x138>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a14      	ldr	r2, [pc, #80]	; (8006458 <xPortStartScheduler+0x138>)
 8006408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800640c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800640e:	f000 f8dd 	bl	80065cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <xPortStartScheduler+0x13c>)
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006418:	f000 f8fc 	bl	8006614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800641c:	4b10      	ldr	r3, [pc, #64]	; (8006460 <xPortStartScheduler+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a0f      	ldr	r2, [pc, #60]	; (8006460 <xPortStartScheduler+0x140>)
 8006422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006428:	f7ff ff66 	bl	80062f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800642c:	f7ff f850 	bl	80054d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006430:	f7ff ff1c 	bl	800626c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	e000ed00 	.word	0xe000ed00
 8006444:	410fc271 	.word	0x410fc271
 8006448:	410fc270 	.word	0x410fc270
 800644c:	e000e400 	.word	0xe000e400
 8006450:	20000fe4 	.word	0x20000fe4
 8006454:	20000fe8 	.word	0x20000fe8
 8006458:	e000ed20 	.word	0xe000ed20
 800645c:	2000000c 	.word	0x2000000c
 8006460:	e000ef34 	.word	0xe000ef34

08006464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	607b      	str	r3, [r7, #4]
}
 800647c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800647e:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <vPortEnterCritical+0x58>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <vPortEnterCritical+0x58>)
 8006486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <vPortEnterCritical+0x58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <vPortEnterCritical+0x5c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	603b      	str	r3, [r7, #0]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vPortEnterCritical+0x4a>
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000000c 	.word	0x2000000c
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <vPortExitCritical+0x50>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <vPortExitCritical+0x24>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <vPortExitCritical+0x50>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <vPortExitCritical+0x50>)
 80064f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <vPortExitCritical+0x50>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <vPortExitCritical+0x42>
 80064fa:	2300      	movs	r3, #0
 80064fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f383 8811 	msr	BASEPRI, r3
}
 8006504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	2000000c 	.word	0x2000000c
	...

08006520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006520:	f3ef 8009 	mrs	r0, PSP
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	4b15      	ldr	r3, [pc, #84]	; (8006580 <pxCurrentTCBConst>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f01e 0f10 	tst.w	lr, #16
 8006530:	bf08      	it	eq
 8006532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	6010      	str	r0, [r2, #0]
 800653c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006544:	f380 8811 	msr	BASEPRI, r0
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f7fe ffbe 	bl	80054d0 <vTaskSwitchContext>
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f380 8811 	msr	BASEPRI, r0
 800655c:	bc09      	pop	{r0, r3}
 800655e:	6819      	ldr	r1, [r3, #0]
 8006560:	6808      	ldr	r0, [r1, #0]
 8006562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006566:	f01e 0f10 	tst.w	lr, #16
 800656a:	bf08      	it	eq
 800656c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006570:	f380 8809 	msr	PSP, r0
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst>:
 8006580:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	607b      	str	r3, [r7, #4]
}
 80065a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065a2:	f7fe fedb 	bl	800535c <xTaskIncrementTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <xPortSysTickHandler+0x40>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	2300      	movs	r3, #0
 80065b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f383 8811 	msr	BASEPRI, r3
}
 80065be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065c0:	bf00      	nop
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	e000ed04 	.word	0xe000ed04

080065cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortSetupTimerInterrupt+0x38>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <vPortSetupTimerInterrupt+0x3c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <vPortSetupTimerInterrupt+0x40>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	099b      	lsrs	r3, r3, #6
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <vPortSetupTimerInterrupt+0x44>)
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065ee:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vPortSetupTimerInterrupt+0x34>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	e000e010 	.word	0xe000e010
 8006604:	e000e018 	.word	0xe000e018
 8006608:	20000000 	.word	0x20000000
 800660c:	10624dd3 	.word	0x10624dd3
 8006610:	e000e014 	.word	0xe000e014

08006614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006624 <vPortEnableVFP+0x10>
 8006618:	6801      	ldr	r1, [r0, #0]
 800661a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800661e:	6001      	str	r1, [r0, #0]
 8006620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006622:	bf00      	nop
 8006624:	e000ed88 	.word	0xe000ed88

08006628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800662e:	f3ef 8305 	mrs	r3, IPSR
 8006632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d914      	bls.n	8006664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <vPortValidateInterruptPriority+0x70>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006644:	4b15      	ldr	r3, [pc, #84]	; (800669c <vPortValidateInterruptPriority+0x74>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	7afa      	ldrb	r2, [r7, #11]
 800664a:	429a      	cmp	r2, r3
 800664c:	d20a      	bcs.n	8006664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	607b      	str	r3, [r7, #4]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006664:	4b0e      	ldr	r3, [pc, #56]	; (80066a0 <vPortValidateInterruptPriority+0x78>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <vPortValidateInterruptPriority+0x7c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d90a      	bls.n	800668a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	603b      	str	r3, [r7, #0]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <vPortValidateInterruptPriority+0x60>
	}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	e000e3f0 	.word	0xe000e3f0
 800669c:	20000fe4 	.word	0x20000fe4
 80066a0:	e000ed0c 	.word	0xe000ed0c
 80066a4:	20000fe8 	.word	0x20000fe8

080066a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	; 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066b4:	f7fe fd96 	bl	80051e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066b8:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <pvPortMalloc+0x180>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066c0:	f000 f920 	bl	8006904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066c4:	4b59      	ldr	r3, [pc, #356]	; (800682c <pvPortMalloc+0x184>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8093 	bne.w	80067f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01d      	beq.n	8006714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066d8:	2208      	movs	r2, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4413      	add	r3, r2
 80066de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f023 0307 	bic.w	r3, r3, #7
 80066f0:	3308      	adds	r3, #8
 80066f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <pvPortMalloc+0x6c>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	617b      	str	r3, [r7, #20]
}
 8006710:	bf00      	nop
 8006712:	e7fe      	b.n	8006712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d06e      	beq.n	80067f8 <pvPortMalloc+0x150>
 800671a:	4b45      	ldr	r3, [pc, #276]	; (8006830 <pvPortMalloc+0x188>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	429a      	cmp	r2, r3
 8006722:	d869      	bhi.n	80067f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006724:	4b43      	ldr	r3, [pc, #268]	; (8006834 <pvPortMalloc+0x18c>)
 8006726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <pvPortMalloc+0x18c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800672e:	e004      	b.n	800673a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <pvPortMalloc+0xa4>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f1      	bne.n	8006730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800674c:	4b36      	ldr	r3, [pc, #216]	; (8006828 <pvPortMalloc+0x180>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	429a      	cmp	r2, r3
 8006754:	d050      	beq.n	80067f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4413      	add	r3, r2
 800675e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	2308      	movs	r3, #8
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	429a      	cmp	r2, r3
 8006776:	d91f      	bls.n	80067b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <pvPortMalloc+0xf8>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	613b      	str	r3, [r7, #16]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f000 f908 	bl	80069c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <pvPortMalloc+0x188>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <pvPortMalloc+0x188>)
 80067c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <pvPortMalloc+0x188>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <pvPortMalloc+0x190>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d203      	bcs.n	80067da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <pvPortMalloc+0x188>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <pvPortMalloc+0x190>)
 80067d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <pvPortMalloc+0x184>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <pvPortMalloc+0x194>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <pvPortMalloc+0x194>)
 80067f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f8:	f7fe fd02 	bl	8005200 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <pvPortMalloc+0x174>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680a:	f383 8811 	msr	BASEPRI, r3
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	60fb      	str	r3, [r7, #12]
}
 8006818:	bf00      	nop
 800681a:	e7fe      	b.n	800681a <pvPortMalloc+0x172>
	return pvReturn;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20004bf4 	.word	0x20004bf4
 800682c:	20004c08 	.word	0x20004c08
 8006830:	20004bf8 	.word	0x20004bf8
 8006834:	20004bec 	.word	0x20004bec
 8006838:	20004bfc 	.word	0x20004bfc
 800683c:	20004c00 	.word	0x20004c00

08006840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04d      	beq.n	80068ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006852:	2308      	movs	r3, #8
 8006854:	425b      	negs	r3, r3
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <vPortFree+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <vPortFree+0x44>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60fb      	str	r3, [r7, #12]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <vPortFree+0x62>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60bb      	str	r3, [r7, #8]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <vPortFree+0xb8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4013      	ands	r3, r2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01e      	beq.n	80068ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11a      	bne.n	80068ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <vPortFree+0xb8>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	401a      	ands	r2, r3
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c8:	f7fe fc8c 	bl	80051e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortFree+0xbc>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	4a09      	ldr	r2, [pc, #36]	; (80068fc <vPortFree+0xbc>)
 80068d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f000 f874 	bl	80069c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <vPortFree+0xc0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vPortFree+0xc0>)
 80068e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ea:	f7fe fc89 	bl	8005200 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20004c08 	.word	0x20004c08
 80068fc:	20004bf8 	.word	0x20004bf8
 8006900:	20004c04 	.word	0x20004c04

08006904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800690a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800690e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <prvHeapInit+0xac>)
 8006912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3307      	adds	r3, #7
 8006922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0307 	bic.w	r3, r3, #7
 800692a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <prvHeapInit+0xac>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <prvHeapInit+0xb0>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <prvHeapInit+0xb0>)
 8006944:	2200      	movs	r2, #0
 8006946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006950:	2208      	movs	r2, #8
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0307 	bic.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <prvHeapInit+0xb4>)
 8006964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <prvHeapInit+0xb4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696e:	4b12      	ldr	r3, [pc, #72]	; (80069b8 <prvHeapInit+0xb4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <prvHeapInit+0xb4>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <prvHeapInit+0xb8>)
 8006992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <prvHeapInit+0xbc>)
 800699a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800699c:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <prvHeapInit+0xc0>)
 800699e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20000fec 	.word	0x20000fec
 80069b4:	20004bec 	.word	0x20004bec
 80069b8:	20004bf4 	.word	0x20004bf4
 80069bc:	20004bfc 	.word	0x20004bfc
 80069c0:	20004bf8 	.word	0x20004bf8
 80069c4:	20004c08 	.word	0x20004c08

080069c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d0:	4b28      	ldr	r3, [pc, #160]	; (8006a74 <prvInsertBlockIntoFreeList+0xac>)
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e002      	b.n	80069dc <prvInsertBlockIntoFreeList+0x14>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d8f7      	bhi.n	80069d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d108      	bne.n	8006a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d118      	bne.n	8006a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4b15      	ldr	r3, [pc, #84]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d00d      	beq.n	8006a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	441a      	add	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	e008      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <prvInsertBlockIntoFreeList+0xb0>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d002      	beq.n	8006a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20004bec 	.word	0x20004bec
 8006a78:	20004bf4 	.word	0x20004bf4

08006a7c <__errno>:
 8006a7c:	4b01      	ldr	r3, [pc, #4]	; (8006a84 <__errno+0x8>)
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000010 	.word	0x20000010

08006a88 <__libc_init_array>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	4d0d      	ldr	r5, [pc, #52]	; (8006ac0 <__libc_init_array+0x38>)
 8006a8c:	4c0d      	ldr	r4, [pc, #52]	; (8006ac4 <__libc_init_array+0x3c>)
 8006a8e:	1b64      	subs	r4, r4, r5
 8006a90:	10a4      	asrs	r4, r4, #2
 8006a92:	2600      	movs	r6, #0
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	d109      	bne.n	8006aac <__libc_init_array+0x24>
 8006a98:	4d0b      	ldr	r5, [pc, #44]	; (8006ac8 <__libc_init_array+0x40>)
 8006a9a:	4c0c      	ldr	r4, [pc, #48]	; (8006acc <__libc_init_array+0x44>)
 8006a9c:	f000 fc8e 	bl	80073bc <_init>
 8006aa0:	1b64      	subs	r4, r4, r5
 8006aa2:	10a4      	asrs	r4, r4, #2
 8006aa4:	2600      	movs	r6, #0
 8006aa6:	42a6      	cmp	r6, r4
 8006aa8:	d105      	bne.n	8006ab6 <__libc_init_array+0x2e>
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab0:	4798      	blx	r3
 8006ab2:	3601      	adds	r6, #1
 8006ab4:	e7ee      	b.n	8006a94 <__libc_init_array+0xc>
 8006ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aba:	4798      	blx	r3
 8006abc:	3601      	adds	r6, #1
 8006abe:	e7f2      	b.n	8006aa6 <__libc_init_array+0x1e>
 8006ac0:	08007714 	.word	0x08007714
 8006ac4:	08007714 	.word	0x08007714
 8006ac8:	08007714 	.word	0x08007714
 8006acc:	08007718 	.word	0x08007718

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <memset>:
 8006aec:	4402      	add	r2, r0
 8006aee:	4603      	mov	r3, r0
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d100      	bne.n	8006af6 <memset+0xa>
 8006af4:	4770      	bx	lr
 8006af6:	f803 1b01 	strb.w	r1, [r3], #1
 8006afa:	e7f9      	b.n	8006af0 <memset+0x4>

08006afc <siprintf>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b500      	push	{lr}
 8006b00:	b09c      	sub	sp, #112	; 0x70
 8006b02:	ab1d      	add	r3, sp, #116	; 0x74
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	9006      	str	r0, [sp, #24]
 8006b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <siprintf+0x38>)
 8006b0e:	9107      	str	r1, [sp, #28]
 8006b10:	9104      	str	r1, [sp, #16]
 8006b12:	4909      	ldr	r1, [pc, #36]	; (8006b38 <siprintf+0x3c>)
 8006b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	a902      	add	r1, sp, #8
 8006b20:	f000 f868 	bl	8006bf4 <_svfiprintf_r>
 8006b24:	9b02      	ldr	r3, [sp, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	b01c      	add	sp, #112	; 0x70
 8006b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b30:	b003      	add	sp, #12
 8006b32:	4770      	bx	lr
 8006b34:	20000010 	.word	0x20000010
 8006b38:	ffff0208 	.word	0xffff0208

08006b3c <__ssputs_r>:
 8006b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b40:	688e      	ldr	r6, [r1, #8]
 8006b42:	429e      	cmp	r6, r3
 8006b44:	4682      	mov	sl, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	4690      	mov	r8, r2
 8006b4a:	461f      	mov	r7, r3
 8006b4c:	d838      	bhi.n	8006bc0 <__ssputs_r+0x84>
 8006b4e:	898a      	ldrh	r2, [r1, #12]
 8006b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b54:	d032      	beq.n	8006bbc <__ssputs_r+0x80>
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	6909      	ldr	r1, [r1, #16]
 8006b5a:	eba5 0901 	sub.w	r9, r5, r1
 8006b5e:	6965      	ldr	r5, [r4, #20]
 8006b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b68:	3301      	adds	r3, #1
 8006b6a:	444b      	add	r3, r9
 8006b6c:	106d      	asrs	r5, r5, #1
 8006b6e:	429d      	cmp	r5, r3
 8006b70:	bf38      	it	cc
 8006b72:	461d      	movcc	r5, r3
 8006b74:	0553      	lsls	r3, r2, #21
 8006b76:	d531      	bpl.n	8006bdc <__ssputs_r+0xa0>
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f000 fb55 	bl	8007228 <_malloc_r>
 8006b7e:	4606      	mov	r6, r0
 8006b80:	b950      	cbnz	r0, 8006b98 <__ssputs_r+0x5c>
 8006b82:	230c      	movs	r3, #12
 8006b84:	f8ca 3000 	str.w	r3, [sl]
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	6921      	ldr	r1, [r4, #16]
 8006b9a:	464a      	mov	r2, r9
 8006b9c:	f7ff ff98 	bl	8006ad0 <memcpy>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	81a3      	strh	r3, [r4, #12]
 8006bac:	6126      	str	r6, [r4, #16]
 8006bae:	6165      	str	r5, [r4, #20]
 8006bb0:	444e      	add	r6, r9
 8006bb2:	eba5 0509 	sub.w	r5, r5, r9
 8006bb6:	6026      	str	r6, [r4, #0]
 8006bb8:	60a5      	str	r5, [r4, #8]
 8006bba:	463e      	mov	r6, r7
 8006bbc:	42be      	cmp	r6, r7
 8006bbe:	d900      	bls.n	8006bc2 <__ssputs_r+0x86>
 8006bc0:	463e      	mov	r6, r7
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	4641      	mov	r1, r8
 8006bc8:	f000 faa8 	bl	800711c <memmove>
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	1b9b      	subs	r3, r3, r6
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	4433      	add	r3, r6
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e7db      	b.n	8006b94 <__ssputs_r+0x58>
 8006bdc:	462a      	mov	r2, r5
 8006bde:	f000 fb97 	bl	8007310 <_realloc_r>
 8006be2:	4606      	mov	r6, r0
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d1e1      	bne.n	8006bac <__ssputs_r+0x70>
 8006be8:	6921      	ldr	r1, [r4, #16]
 8006bea:	4650      	mov	r0, sl
 8006bec:	f000 fab0 	bl	8007150 <_free_r>
 8006bf0:	e7c7      	b.n	8006b82 <__ssputs_r+0x46>
	...

08006bf4 <_svfiprintf_r>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4698      	mov	r8, r3
 8006bfa:	898b      	ldrh	r3, [r1, #12]
 8006bfc:	061b      	lsls	r3, r3, #24
 8006bfe:	b09d      	sub	sp, #116	; 0x74
 8006c00:	4607      	mov	r7, r0
 8006c02:	460d      	mov	r5, r1
 8006c04:	4614      	mov	r4, r2
 8006c06:	d50e      	bpl.n	8006c26 <_svfiprintf_r+0x32>
 8006c08:	690b      	ldr	r3, [r1, #16]
 8006c0a:	b963      	cbnz	r3, 8006c26 <_svfiprintf_r+0x32>
 8006c0c:	2140      	movs	r1, #64	; 0x40
 8006c0e:	f000 fb0b 	bl	8007228 <_malloc_r>
 8006c12:	6028      	str	r0, [r5, #0]
 8006c14:	6128      	str	r0, [r5, #16]
 8006c16:	b920      	cbnz	r0, 8006c22 <_svfiprintf_r+0x2e>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	e0d1      	b.n	8006dc6 <_svfiprintf_r+0x1d2>
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	616b      	str	r3, [r5, #20]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2a:	2320      	movs	r3, #32
 8006c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c34:	2330      	movs	r3, #48	; 0x30
 8006c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006de0 <_svfiprintf_r+0x1ec>
 8006c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3e:	f04f 0901 	mov.w	r9, #1
 8006c42:	4623      	mov	r3, r4
 8006c44:	469a      	mov	sl, r3
 8006c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c4a:	b10a      	cbz	r2, 8006c50 <_svfiprintf_r+0x5c>
 8006c4c:	2a25      	cmp	r2, #37	; 0x25
 8006c4e:	d1f9      	bne.n	8006c44 <_svfiprintf_r+0x50>
 8006c50:	ebba 0b04 	subs.w	fp, sl, r4
 8006c54:	d00b      	beq.n	8006c6e <_svfiprintf_r+0x7a>
 8006c56:	465b      	mov	r3, fp
 8006c58:	4622      	mov	r2, r4
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f7ff ff6d 	bl	8006b3c <__ssputs_r>
 8006c62:	3001      	adds	r0, #1
 8006c64:	f000 80aa 	beq.w	8006dbc <_svfiprintf_r+0x1c8>
 8006c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c6a:	445a      	add	r2, fp
 8006c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80a2 	beq.w	8006dbc <_svfiprintf_r+0x1c8>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c82:	f10a 0a01 	add.w	sl, sl, #1
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	9307      	str	r3, [sp, #28]
 8006c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c90:	4654      	mov	r4, sl
 8006c92:	2205      	movs	r2, #5
 8006c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c98:	4851      	ldr	r0, [pc, #324]	; (8006de0 <_svfiprintf_r+0x1ec>)
 8006c9a:	f7f9 faa1 	bl	80001e0 <memchr>
 8006c9e:	9a04      	ldr	r2, [sp, #16]
 8006ca0:	b9d8      	cbnz	r0, 8006cda <_svfiprintf_r+0xe6>
 8006ca2:	06d0      	lsls	r0, r2, #27
 8006ca4:	bf44      	itt	mi
 8006ca6:	2320      	movmi	r3, #32
 8006ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cac:	0711      	lsls	r1, r2, #28
 8006cae:	bf44      	itt	mi
 8006cb0:	232b      	movmi	r3, #43	; 0x2b
 8006cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cba:	2b2a      	cmp	r3, #42	; 0x2a
 8006cbc:	d015      	beq.n	8006cea <_svfiprintf_r+0xf6>
 8006cbe:	9a07      	ldr	r2, [sp, #28]
 8006cc0:	4654      	mov	r4, sl
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f04f 0c0a 	mov.w	ip, #10
 8006cc8:	4621      	mov	r1, r4
 8006cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cce:	3b30      	subs	r3, #48	; 0x30
 8006cd0:	2b09      	cmp	r3, #9
 8006cd2:	d94e      	bls.n	8006d72 <_svfiprintf_r+0x17e>
 8006cd4:	b1b0      	cbz	r0, 8006d04 <_svfiprintf_r+0x110>
 8006cd6:	9207      	str	r2, [sp, #28]
 8006cd8:	e014      	b.n	8006d04 <_svfiprintf_r+0x110>
 8006cda:	eba0 0308 	sub.w	r3, r0, r8
 8006cde:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	9304      	str	r3, [sp, #16]
 8006ce6:	46a2      	mov	sl, r4
 8006ce8:	e7d2      	b.n	8006c90 <_svfiprintf_r+0x9c>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	1d19      	adds	r1, r3, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	9103      	str	r1, [sp, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	bfbb      	ittet	lt
 8006cf6:	425b      	neglt	r3, r3
 8006cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfc:	9307      	strge	r3, [sp, #28]
 8006cfe:	9307      	strlt	r3, [sp, #28]
 8006d00:	bfb8      	it	lt
 8006d02:	9204      	strlt	r2, [sp, #16]
 8006d04:	7823      	ldrb	r3, [r4, #0]
 8006d06:	2b2e      	cmp	r3, #46	; 0x2e
 8006d08:	d10c      	bne.n	8006d24 <_svfiprintf_r+0x130>
 8006d0a:	7863      	ldrb	r3, [r4, #1]
 8006d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0e:	d135      	bne.n	8006d7c <_svfiprintf_r+0x188>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	1d1a      	adds	r2, r3, #4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	9203      	str	r2, [sp, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfb8      	it	lt
 8006d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d20:	3402      	adds	r4, #2
 8006d22:	9305      	str	r3, [sp, #20]
 8006d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006df0 <_svfiprintf_r+0x1fc>
 8006d28:	7821      	ldrb	r1, [r4, #0]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4650      	mov	r0, sl
 8006d2e:	f7f9 fa57 	bl	80001e0 <memchr>
 8006d32:	b140      	cbz	r0, 8006d46 <_svfiprintf_r+0x152>
 8006d34:	2340      	movs	r3, #64	; 0x40
 8006d36:	eba0 000a 	sub.w	r0, r0, sl
 8006d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	4303      	orrs	r3, r0
 8006d42:	3401      	adds	r4, #1
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4a:	4826      	ldr	r0, [pc, #152]	; (8006de4 <_svfiprintf_r+0x1f0>)
 8006d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d50:	2206      	movs	r2, #6
 8006d52:	f7f9 fa45 	bl	80001e0 <memchr>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d038      	beq.n	8006dcc <_svfiprintf_r+0x1d8>
 8006d5a:	4b23      	ldr	r3, [pc, #140]	; (8006de8 <_svfiprintf_r+0x1f4>)
 8006d5c:	bb1b      	cbnz	r3, 8006da6 <_svfiprintf_r+0x1b2>
 8006d5e:	9b03      	ldr	r3, [sp, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	f023 0307 	bic.w	r3, r3, #7
 8006d66:	3308      	adds	r3, #8
 8006d68:	9303      	str	r3, [sp, #12]
 8006d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6c:	4433      	add	r3, r6
 8006d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d70:	e767      	b.n	8006c42 <_svfiprintf_r+0x4e>
 8006d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d76:	460c      	mov	r4, r1
 8006d78:	2001      	movs	r0, #1
 8006d7a:	e7a5      	b.n	8006cc8 <_svfiprintf_r+0xd4>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	3401      	adds	r4, #1
 8006d80:	9305      	str	r3, [sp, #20]
 8006d82:	4619      	mov	r1, r3
 8006d84:	f04f 0c0a 	mov.w	ip, #10
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8e:	3a30      	subs	r2, #48	; 0x30
 8006d90:	2a09      	cmp	r2, #9
 8006d92:	d903      	bls.n	8006d9c <_svfiprintf_r+0x1a8>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0c5      	beq.n	8006d24 <_svfiprintf_r+0x130>
 8006d98:	9105      	str	r1, [sp, #20]
 8006d9a:	e7c3      	b.n	8006d24 <_svfiprintf_r+0x130>
 8006d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006da0:	4604      	mov	r4, r0
 8006da2:	2301      	movs	r3, #1
 8006da4:	e7f0      	b.n	8006d88 <_svfiprintf_r+0x194>
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4b0f      	ldr	r3, [pc, #60]	; (8006dec <_svfiprintf_r+0x1f8>)
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	4638      	mov	r0, r7
 8006db2:	f3af 8000 	nop.w
 8006db6:	1c42      	adds	r2, r0, #1
 8006db8:	4606      	mov	r6, r0
 8006dba:	d1d6      	bne.n	8006d6a <_svfiprintf_r+0x176>
 8006dbc:	89ab      	ldrh	r3, [r5, #12]
 8006dbe:	065b      	lsls	r3, r3, #25
 8006dc0:	f53f af2c 	bmi.w	8006c1c <_svfiprintf_r+0x28>
 8006dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dc6:	b01d      	add	sp, #116	; 0x74
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <_svfiprintf_r+0x1f8>)
 8006dd4:	a904      	add	r1, sp, #16
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f000 f87a 	bl	8006ed0 <_printf_i>
 8006ddc:	e7eb      	b.n	8006db6 <_svfiprintf_r+0x1c2>
 8006dde:	bf00      	nop
 8006de0:	080076d8 	.word	0x080076d8
 8006de4:	080076e2 	.word	0x080076e2
 8006de8:	00000000 	.word	0x00000000
 8006dec:	08006b3d 	.word	0x08006b3d
 8006df0:	080076de 	.word	0x080076de

08006df4 <_printf_common>:
 8006df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	4616      	mov	r6, r2
 8006dfa:	4699      	mov	r9, r3
 8006dfc:	688a      	ldr	r2, [r1, #8]
 8006dfe:	690b      	ldr	r3, [r1, #16]
 8006e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	bfb8      	it	lt
 8006e08:	4613      	movlt	r3, r2
 8006e0a:	6033      	str	r3, [r6, #0]
 8006e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e10:	4607      	mov	r7, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b10a      	cbz	r2, 8006e1a <_printf_common+0x26>
 8006e16:	3301      	adds	r3, #1
 8006e18:	6033      	str	r3, [r6, #0]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	0699      	lsls	r1, r3, #26
 8006e1e:	bf42      	ittt	mi
 8006e20:	6833      	ldrmi	r3, [r6, #0]
 8006e22:	3302      	addmi	r3, #2
 8006e24:	6033      	strmi	r3, [r6, #0]
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	f015 0506 	ands.w	r5, r5, #6
 8006e2c:	d106      	bne.n	8006e3c <_printf_common+0x48>
 8006e2e:	f104 0a19 	add.w	sl, r4, #25
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	6832      	ldr	r2, [r6, #0]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	42ab      	cmp	r3, r5
 8006e3a:	dc26      	bgt.n	8006e8a <_printf_common+0x96>
 8006e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e40:	1e13      	subs	r3, r2, #0
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	bf18      	it	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	0692      	lsls	r2, r2, #26
 8006e4a:	d42b      	bmi.n	8006ea4 <_printf_common+0xb0>
 8006e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e50:	4649      	mov	r1, r9
 8006e52:	4638      	mov	r0, r7
 8006e54:	47c0      	blx	r8
 8006e56:	3001      	adds	r0, #1
 8006e58:	d01e      	beq.n	8006e98 <_printf_common+0xa4>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	68e5      	ldr	r5, [r4, #12]
 8006e5e:	6832      	ldr	r2, [r6, #0]
 8006e60:	f003 0306 	and.w	r3, r3, #6
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	bf08      	it	eq
 8006e68:	1aad      	subeq	r5, r5, r2
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	6922      	ldr	r2, [r4, #16]
 8006e6e:	bf0c      	ite	eq
 8006e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e74:	2500      	movne	r5, #0
 8006e76:	4293      	cmp	r3, r2
 8006e78:	bfc4      	itt	gt
 8006e7a:	1a9b      	subgt	r3, r3, r2
 8006e7c:	18ed      	addgt	r5, r5, r3
 8006e7e:	2600      	movs	r6, #0
 8006e80:	341a      	adds	r4, #26
 8006e82:	42b5      	cmp	r5, r6
 8006e84:	d11a      	bne.n	8006ebc <_printf_common+0xc8>
 8006e86:	2000      	movs	r0, #0
 8006e88:	e008      	b.n	8006e9c <_printf_common+0xa8>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4649      	mov	r1, r9
 8006e90:	4638      	mov	r0, r7
 8006e92:	47c0      	blx	r8
 8006e94:	3001      	adds	r0, #1
 8006e96:	d103      	bne.n	8006ea0 <_printf_common+0xac>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	e7c6      	b.n	8006e32 <_printf_common+0x3e>
 8006ea4:	18e1      	adds	r1, r4, r3
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	2030      	movs	r0, #48	; 0x30
 8006eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eae:	4422      	add	r2, r4
 8006eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb8:	3302      	adds	r3, #2
 8006eba:	e7c7      	b.n	8006e4c <_printf_common+0x58>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c0      	blx	r8
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d0e6      	beq.n	8006e98 <_printf_common+0xa4>
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7d9      	b.n	8006e82 <_printf_common+0x8e>
	...

08006ed0 <_printf_i>:
 8006ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed4:	7e0f      	ldrb	r7, [r1, #24]
 8006ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed8:	2f78      	cmp	r7, #120	; 0x78
 8006eda:	4691      	mov	r9, r2
 8006edc:	4680      	mov	r8, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ee6:	d807      	bhi.n	8006ef8 <_printf_i+0x28>
 8006ee8:	2f62      	cmp	r7, #98	; 0x62
 8006eea:	d80a      	bhi.n	8006f02 <_printf_i+0x32>
 8006eec:	2f00      	cmp	r7, #0
 8006eee:	f000 80d8 	beq.w	80070a2 <_printf_i+0x1d2>
 8006ef2:	2f58      	cmp	r7, #88	; 0x58
 8006ef4:	f000 80a3 	beq.w	800703e <_printf_i+0x16e>
 8006ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f00:	e03a      	b.n	8006f78 <_printf_i+0xa8>
 8006f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f06:	2b15      	cmp	r3, #21
 8006f08:	d8f6      	bhi.n	8006ef8 <_printf_i+0x28>
 8006f0a:	a101      	add	r1, pc, #4	; (adr r1, 8006f10 <_printf_i+0x40>)
 8006f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f10:	08006f69 	.word	0x08006f69
 8006f14:	08006f7d 	.word	0x08006f7d
 8006f18:	08006ef9 	.word	0x08006ef9
 8006f1c:	08006ef9 	.word	0x08006ef9
 8006f20:	08006ef9 	.word	0x08006ef9
 8006f24:	08006ef9 	.word	0x08006ef9
 8006f28:	08006f7d 	.word	0x08006f7d
 8006f2c:	08006ef9 	.word	0x08006ef9
 8006f30:	08006ef9 	.word	0x08006ef9
 8006f34:	08006ef9 	.word	0x08006ef9
 8006f38:	08006ef9 	.word	0x08006ef9
 8006f3c:	08007089 	.word	0x08007089
 8006f40:	08006fad 	.word	0x08006fad
 8006f44:	0800706b 	.word	0x0800706b
 8006f48:	08006ef9 	.word	0x08006ef9
 8006f4c:	08006ef9 	.word	0x08006ef9
 8006f50:	080070ab 	.word	0x080070ab
 8006f54:	08006ef9 	.word	0x08006ef9
 8006f58:	08006fad 	.word	0x08006fad
 8006f5c:	08006ef9 	.word	0x08006ef9
 8006f60:	08006ef9 	.word	0x08006ef9
 8006f64:	08007073 	.word	0x08007073
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	1d1a      	adds	r2, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	602a      	str	r2, [r5, #0]
 8006f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0a3      	b.n	80070c4 <_printf_i+0x1f4>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	0606      	lsls	r6, r0, #24
 8006f82:	f101 0304 	add.w	r3, r1, #4
 8006f86:	d50a      	bpl.n	8006f9e <_printf_i+0xce>
 8006f88:	680e      	ldr	r6, [r1, #0]
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	da03      	bge.n	8006f98 <_printf_i+0xc8>
 8006f90:	232d      	movs	r3, #45	; 0x2d
 8006f92:	4276      	negs	r6, r6
 8006f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f98:	485e      	ldr	r0, [pc, #376]	; (8007114 <_printf_i+0x244>)
 8006f9a:	230a      	movs	r3, #10
 8006f9c:	e019      	b.n	8006fd2 <_printf_i+0x102>
 8006f9e:	680e      	ldr	r6, [r1, #0]
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fa6:	bf18      	it	ne
 8006fa8:	b236      	sxthne	r6, r6
 8006faa:	e7ef      	b.n	8006f8c <_printf_i+0xbc>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	6820      	ldr	r0, [r4, #0]
 8006fb0:	1d19      	adds	r1, r3, #4
 8006fb2:	6029      	str	r1, [r5, #0]
 8006fb4:	0601      	lsls	r1, r0, #24
 8006fb6:	d501      	bpl.n	8006fbc <_printf_i+0xec>
 8006fb8:	681e      	ldr	r6, [r3, #0]
 8006fba:	e002      	b.n	8006fc2 <_printf_i+0xf2>
 8006fbc:	0646      	lsls	r6, r0, #25
 8006fbe:	d5fb      	bpl.n	8006fb8 <_printf_i+0xe8>
 8006fc0:	881e      	ldrh	r6, [r3, #0]
 8006fc2:	4854      	ldr	r0, [pc, #336]	; (8007114 <_printf_i+0x244>)
 8006fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8006fc6:	bf0c      	ite	eq
 8006fc8:	2308      	moveq	r3, #8
 8006fca:	230a      	movne	r3, #10
 8006fcc:	2100      	movs	r1, #0
 8006fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fd2:	6865      	ldr	r5, [r4, #4]
 8006fd4:	60a5      	str	r5, [r4, #8]
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	bfa2      	ittt	ge
 8006fda:	6821      	ldrge	r1, [r4, #0]
 8006fdc:	f021 0104 	bicge.w	r1, r1, #4
 8006fe0:	6021      	strge	r1, [r4, #0]
 8006fe2:	b90e      	cbnz	r6, 8006fe8 <_printf_i+0x118>
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	d04d      	beq.n	8007084 <_printf_i+0x1b4>
 8006fe8:	4615      	mov	r5, r2
 8006fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fee:	fb03 6711 	mls	r7, r3, r1, r6
 8006ff2:	5dc7      	ldrb	r7, [r0, r7]
 8006ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ff8:	4637      	mov	r7, r6
 8006ffa:	42bb      	cmp	r3, r7
 8006ffc:	460e      	mov	r6, r1
 8006ffe:	d9f4      	bls.n	8006fea <_printf_i+0x11a>
 8007000:	2b08      	cmp	r3, #8
 8007002:	d10b      	bne.n	800701c <_printf_i+0x14c>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	07de      	lsls	r6, r3, #31
 8007008:	d508      	bpl.n	800701c <_printf_i+0x14c>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	6861      	ldr	r1, [r4, #4]
 800700e:	4299      	cmp	r1, r3
 8007010:	bfde      	ittt	le
 8007012:	2330      	movle	r3, #48	; 0x30
 8007014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007018:	f105 35ff 	addle.w	r5, r5, #4294967295
 800701c:	1b52      	subs	r2, r2, r5
 800701e:	6122      	str	r2, [r4, #16]
 8007020:	f8cd a000 	str.w	sl, [sp]
 8007024:	464b      	mov	r3, r9
 8007026:	aa03      	add	r2, sp, #12
 8007028:	4621      	mov	r1, r4
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff fee2 	bl	8006df4 <_printf_common>
 8007030:	3001      	adds	r0, #1
 8007032:	d14c      	bne.n	80070ce <_printf_i+0x1fe>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	b004      	add	sp, #16
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	4835      	ldr	r0, [pc, #212]	; (8007114 <_printf_i+0x244>)
 8007040:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f851 6b04 	ldr.w	r6, [r1], #4
 800704c:	6029      	str	r1, [r5, #0]
 800704e:	061d      	lsls	r5, r3, #24
 8007050:	d514      	bpl.n	800707c <_printf_i+0x1ac>
 8007052:	07df      	lsls	r7, r3, #31
 8007054:	bf44      	itt	mi
 8007056:	f043 0320 	orrmi.w	r3, r3, #32
 800705a:	6023      	strmi	r3, [r4, #0]
 800705c:	b91e      	cbnz	r6, 8007066 <_printf_i+0x196>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f023 0320 	bic.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	2310      	movs	r3, #16
 8007068:	e7b0      	b.n	8006fcc <_printf_i+0xfc>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f043 0320 	orr.w	r3, r3, #32
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	2378      	movs	r3, #120	; 0x78
 8007074:	4828      	ldr	r0, [pc, #160]	; (8007118 <_printf_i+0x248>)
 8007076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800707a:	e7e3      	b.n	8007044 <_printf_i+0x174>
 800707c:	0659      	lsls	r1, r3, #25
 800707e:	bf48      	it	mi
 8007080:	b2b6      	uxthmi	r6, r6
 8007082:	e7e6      	b.n	8007052 <_printf_i+0x182>
 8007084:	4615      	mov	r5, r2
 8007086:	e7bb      	b.n	8007000 <_printf_i+0x130>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	6826      	ldr	r6, [r4, #0]
 800708c:	6961      	ldr	r1, [r4, #20]
 800708e:	1d18      	adds	r0, r3, #4
 8007090:	6028      	str	r0, [r5, #0]
 8007092:	0635      	lsls	r5, r6, #24
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	d501      	bpl.n	800709c <_printf_i+0x1cc>
 8007098:	6019      	str	r1, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0x1d2>
 800709c:	0670      	lsls	r0, r6, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0x1c8>
 80070a0:	8019      	strh	r1, [r3, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	4615      	mov	r5, r2
 80070a8:	e7ba      	b.n	8007020 <_printf_i+0x150>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	602a      	str	r2, [r5, #0]
 80070b0:	681d      	ldr	r5, [r3, #0]
 80070b2:	6862      	ldr	r2, [r4, #4]
 80070b4:	2100      	movs	r1, #0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7f9 f892 	bl	80001e0 <memchr>
 80070bc:	b108      	cbz	r0, 80070c2 <_printf_i+0x1f2>
 80070be:	1b40      	subs	r0, r0, r5
 80070c0:	6060      	str	r0, [r4, #4]
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	2300      	movs	r3, #0
 80070c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070cc:	e7a8      	b.n	8007020 <_printf_i+0x150>
 80070ce:	6923      	ldr	r3, [r4, #16]
 80070d0:	462a      	mov	r2, r5
 80070d2:	4649      	mov	r1, r9
 80070d4:	4640      	mov	r0, r8
 80070d6:	47d0      	blx	sl
 80070d8:	3001      	adds	r0, #1
 80070da:	d0ab      	beq.n	8007034 <_printf_i+0x164>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	079b      	lsls	r3, r3, #30
 80070e0:	d413      	bmi.n	800710a <_printf_i+0x23a>
 80070e2:	68e0      	ldr	r0, [r4, #12]
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	4298      	cmp	r0, r3
 80070e8:	bfb8      	it	lt
 80070ea:	4618      	movlt	r0, r3
 80070ec:	e7a4      	b.n	8007038 <_printf_i+0x168>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4632      	mov	r2, r6
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	47d0      	blx	sl
 80070f8:	3001      	adds	r0, #1
 80070fa:	d09b      	beq.n	8007034 <_printf_i+0x164>
 80070fc:	3501      	adds	r5, #1
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	9903      	ldr	r1, [sp, #12]
 8007102:	1a5b      	subs	r3, r3, r1
 8007104:	42ab      	cmp	r3, r5
 8007106:	dcf2      	bgt.n	80070ee <_printf_i+0x21e>
 8007108:	e7eb      	b.n	80070e2 <_printf_i+0x212>
 800710a:	2500      	movs	r5, #0
 800710c:	f104 0619 	add.w	r6, r4, #25
 8007110:	e7f5      	b.n	80070fe <_printf_i+0x22e>
 8007112:	bf00      	nop
 8007114:	080076e9 	.word	0x080076e9
 8007118:	080076fa 	.word	0x080076fa

0800711c <memmove>:
 800711c:	4288      	cmp	r0, r1
 800711e:	b510      	push	{r4, lr}
 8007120:	eb01 0402 	add.w	r4, r1, r2
 8007124:	d902      	bls.n	800712c <memmove+0x10>
 8007126:	4284      	cmp	r4, r0
 8007128:	4623      	mov	r3, r4
 800712a:	d807      	bhi.n	800713c <memmove+0x20>
 800712c:	1e43      	subs	r3, r0, #1
 800712e:	42a1      	cmp	r1, r4
 8007130:	d008      	beq.n	8007144 <memmove+0x28>
 8007132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800713a:	e7f8      	b.n	800712e <memmove+0x12>
 800713c:	4402      	add	r2, r0
 800713e:	4601      	mov	r1, r0
 8007140:	428a      	cmp	r2, r1
 8007142:	d100      	bne.n	8007146 <memmove+0x2a>
 8007144:	bd10      	pop	{r4, pc}
 8007146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800714a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800714e:	e7f7      	b.n	8007140 <memmove+0x24>

08007150 <_free_r>:
 8007150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007152:	2900      	cmp	r1, #0
 8007154:	d044      	beq.n	80071e0 <_free_r+0x90>
 8007156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800715a:	9001      	str	r0, [sp, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	f1a1 0404 	sub.w	r4, r1, #4
 8007162:	bfb8      	it	lt
 8007164:	18e4      	addlt	r4, r4, r3
 8007166:	f000 f913 	bl	8007390 <__malloc_lock>
 800716a:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <_free_r+0x94>)
 800716c:	9801      	ldr	r0, [sp, #4]
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	b933      	cbnz	r3, 8007180 <_free_r+0x30>
 8007172:	6063      	str	r3, [r4, #4]
 8007174:	6014      	str	r4, [r2, #0]
 8007176:	b003      	add	sp, #12
 8007178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800717c:	f000 b90e 	b.w	800739c <__malloc_unlock>
 8007180:	42a3      	cmp	r3, r4
 8007182:	d908      	bls.n	8007196 <_free_r+0x46>
 8007184:	6825      	ldr	r5, [r4, #0]
 8007186:	1961      	adds	r1, r4, r5
 8007188:	428b      	cmp	r3, r1
 800718a:	bf01      	itttt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	1949      	addeq	r1, r1, r5
 8007192:	6021      	streq	r1, [r4, #0]
 8007194:	e7ed      	b.n	8007172 <_free_r+0x22>
 8007196:	461a      	mov	r2, r3
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b10b      	cbz	r3, 80071a0 <_free_r+0x50>
 800719c:	42a3      	cmp	r3, r4
 800719e:	d9fa      	bls.n	8007196 <_free_r+0x46>
 80071a0:	6811      	ldr	r1, [r2, #0]
 80071a2:	1855      	adds	r5, r2, r1
 80071a4:	42a5      	cmp	r5, r4
 80071a6:	d10b      	bne.n	80071c0 <_free_r+0x70>
 80071a8:	6824      	ldr	r4, [r4, #0]
 80071aa:	4421      	add	r1, r4
 80071ac:	1854      	adds	r4, r2, r1
 80071ae:	42a3      	cmp	r3, r4
 80071b0:	6011      	str	r1, [r2, #0]
 80071b2:	d1e0      	bne.n	8007176 <_free_r+0x26>
 80071b4:	681c      	ldr	r4, [r3, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	6053      	str	r3, [r2, #4]
 80071ba:	4421      	add	r1, r4
 80071bc:	6011      	str	r1, [r2, #0]
 80071be:	e7da      	b.n	8007176 <_free_r+0x26>
 80071c0:	d902      	bls.n	80071c8 <_free_r+0x78>
 80071c2:	230c      	movs	r3, #12
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	e7d6      	b.n	8007176 <_free_r+0x26>
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	1961      	adds	r1, r4, r5
 80071cc:	428b      	cmp	r3, r1
 80071ce:	bf04      	itt	eq
 80071d0:	6819      	ldreq	r1, [r3, #0]
 80071d2:	685b      	ldreq	r3, [r3, #4]
 80071d4:	6063      	str	r3, [r4, #4]
 80071d6:	bf04      	itt	eq
 80071d8:	1949      	addeq	r1, r1, r5
 80071da:	6021      	streq	r1, [r4, #0]
 80071dc:	6054      	str	r4, [r2, #4]
 80071de:	e7ca      	b.n	8007176 <_free_r+0x26>
 80071e0:	b003      	add	sp, #12
 80071e2:	bd30      	pop	{r4, r5, pc}
 80071e4:	20004c0c 	.word	0x20004c0c

080071e8 <sbrk_aligned>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4e0e      	ldr	r6, [pc, #56]	; (8007224 <sbrk_aligned+0x3c>)
 80071ec:	460c      	mov	r4, r1
 80071ee:	6831      	ldr	r1, [r6, #0]
 80071f0:	4605      	mov	r5, r0
 80071f2:	b911      	cbnz	r1, 80071fa <sbrk_aligned+0x12>
 80071f4:	f000 f8bc 	bl	8007370 <_sbrk_r>
 80071f8:	6030      	str	r0, [r6, #0]
 80071fa:	4621      	mov	r1, r4
 80071fc:	4628      	mov	r0, r5
 80071fe:	f000 f8b7 	bl	8007370 <_sbrk_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	d00a      	beq.n	800721c <sbrk_aligned+0x34>
 8007206:	1cc4      	adds	r4, r0, #3
 8007208:	f024 0403 	bic.w	r4, r4, #3
 800720c:	42a0      	cmp	r0, r4
 800720e:	d007      	beq.n	8007220 <sbrk_aligned+0x38>
 8007210:	1a21      	subs	r1, r4, r0
 8007212:	4628      	mov	r0, r5
 8007214:	f000 f8ac 	bl	8007370 <_sbrk_r>
 8007218:	3001      	adds	r0, #1
 800721a:	d101      	bne.n	8007220 <sbrk_aligned+0x38>
 800721c:	f04f 34ff 	mov.w	r4, #4294967295
 8007220:	4620      	mov	r0, r4
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	20004c10 	.word	0x20004c10

08007228 <_malloc_r>:
 8007228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800722c:	1ccd      	adds	r5, r1, #3
 800722e:	f025 0503 	bic.w	r5, r5, #3
 8007232:	3508      	adds	r5, #8
 8007234:	2d0c      	cmp	r5, #12
 8007236:	bf38      	it	cc
 8007238:	250c      	movcc	r5, #12
 800723a:	2d00      	cmp	r5, #0
 800723c:	4607      	mov	r7, r0
 800723e:	db01      	blt.n	8007244 <_malloc_r+0x1c>
 8007240:	42a9      	cmp	r1, r5
 8007242:	d905      	bls.n	8007250 <_malloc_r+0x28>
 8007244:	230c      	movs	r3, #12
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	2600      	movs	r6, #0
 800724a:	4630      	mov	r0, r6
 800724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007250:	4e2e      	ldr	r6, [pc, #184]	; (800730c <_malloc_r+0xe4>)
 8007252:	f000 f89d 	bl	8007390 <__malloc_lock>
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	461c      	mov	r4, r3
 800725a:	bb34      	cbnz	r4, 80072aa <_malloc_r+0x82>
 800725c:	4629      	mov	r1, r5
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff ffc2 	bl	80071e8 <sbrk_aligned>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	4604      	mov	r4, r0
 8007268:	d14d      	bne.n	8007306 <_malloc_r+0xde>
 800726a:	6834      	ldr	r4, [r6, #0]
 800726c:	4626      	mov	r6, r4
 800726e:	2e00      	cmp	r6, #0
 8007270:	d140      	bne.n	80072f4 <_malloc_r+0xcc>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	4631      	mov	r1, r6
 8007276:	4638      	mov	r0, r7
 8007278:	eb04 0803 	add.w	r8, r4, r3
 800727c:	f000 f878 	bl	8007370 <_sbrk_r>
 8007280:	4580      	cmp	r8, r0
 8007282:	d13a      	bne.n	80072fa <_malloc_r+0xd2>
 8007284:	6821      	ldr	r1, [r4, #0]
 8007286:	3503      	adds	r5, #3
 8007288:	1a6d      	subs	r5, r5, r1
 800728a:	f025 0503 	bic.w	r5, r5, #3
 800728e:	3508      	adds	r5, #8
 8007290:	2d0c      	cmp	r5, #12
 8007292:	bf38      	it	cc
 8007294:	250c      	movcc	r5, #12
 8007296:	4629      	mov	r1, r5
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ffa5 	bl	80071e8 <sbrk_aligned>
 800729e:	3001      	adds	r0, #1
 80072a0:	d02b      	beq.n	80072fa <_malloc_r+0xd2>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	442b      	add	r3, r5
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	e00e      	b.n	80072c8 <_malloc_r+0xa0>
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	1b52      	subs	r2, r2, r5
 80072ae:	d41e      	bmi.n	80072ee <_malloc_r+0xc6>
 80072b0:	2a0b      	cmp	r2, #11
 80072b2:	d916      	bls.n	80072e2 <_malloc_r+0xba>
 80072b4:	1961      	adds	r1, r4, r5
 80072b6:	42a3      	cmp	r3, r4
 80072b8:	6025      	str	r5, [r4, #0]
 80072ba:	bf18      	it	ne
 80072bc:	6059      	strne	r1, [r3, #4]
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	bf08      	it	eq
 80072c2:	6031      	streq	r1, [r6, #0]
 80072c4:	5162      	str	r2, [r4, r5]
 80072c6:	604b      	str	r3, [r1, #4]
 80072c8:	4638      	mov	r0, r7
 80072ca:	f104 060b 	add.w	r6, r4, #11
 80072ce:	f000 f865 	bl	800739c <__malloc_unlock>
 80072d2:	f026 0607 	bic.w	r6, r6, #7
 80072d6:	1d23      	adds	r3, r4, #4
 80072d8:	1af2      	subs	r2, r6, r3
 80072da:	d0b6      	beq.n	800724a <_malloc_r+0x22>
 80072dc:	1b9b      	subs	r3, r3, r6
 80072de:	50a3      	str	r3, [r4, r2]
 80072e0:	e7b3      	b.n	800724a <_malloc_r+0x22>
 80072e2:	6862      	ldr	r2, [r4, #4]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	bf0c      	ite	eq
 80072e8:	6032      	streq	r2, [r6, #0]
 80072ea:	605a      	strne	r2, [r3, #4]
 80072ec:	e7ec      	b.n	80072c8 <_malloc_r+0xa0>
 80072ee:	4623      	mov	r3, r4
 80072f0:	6864      	ldr	r4, [r4, #4]
 80072f2:	e7b2      	b.n	800725a <_malloc_r+0x32>
 80072f4:	4634      	mov	r4, r6
 80072f6:	6876      	ldr	r6, [r6, #4]
 80072f8:	e7b9      	b.n	800726e <_malloc_r+0x46>
 80072fa:	230c      	movs	r3, #12
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4638      	mov	r0, r7
 8007300:	f000 f84c 	bl	800739c <__malloc_unlock>
 8007304:	e7a1      	b.n	800724a <_malloc_r+0x22>
 8007306:	6025      	str	r5, [r4, #0]
 8007308:	e7de      	b.n	80072c8 <_malloc_r+0xa0>
 800730a:	bf00      	nop
 800730c:	20004c0c 	.word	0x20004c0c

08007310 <_realloc_r>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4680      	mov	r8, r0
 8007316:	4614      	mov	r4, r2
 8007318:	460e      	mov	r6, r1
 800731a:	b921      	cbnz	r1, 8007326 <_realloc_r+0x16>
 800731c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4611      	mov	r1, r2
 8007322:	f7ff bf81 	b.w	8007228 <_malloc_r>
 8007326:	b92a      	cbnz	r2, 8007334 <_realloc_r+0x24>
 8007328:	f7ff ff12 	bl	8007150 <_free_r>
 800732c:	4625      	mov	r5, r4
 800732e:	4628      	mov	r0, r5
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	f000 f838 	bl	80073a8 <_malloc_usable_size_r>
 8007338:	4284      	cmp	r4, r0
 800733a:	4607      	mov	r7, r0
 800733c:	d802      	bhi.n	8007344 <_realloc_r+0x34>
 800733e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007342:	d812      	bhi.n	800736a <_realloc_r+0x5a>
 8007344:	4621      	mov	r1, r4
 8007346:	4640      	mov	r0, r8
 8007348:	f7ff ff6e 	bl	8007228 <_malloc_r>
 800734c:	4605      	mov	r5, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d0ed      	beq.n	800732e <_realloc_r+0x1e>
 8007352:	42bc      	cmp	r4, r7
 8007354:	4622      	mov	r2, r4
 8007356:	4631      	mov	r1, r6
 8007358:	bf28      	it	cs
 800735a:	463a      	movcs	r2, r7
 800735c:	f7ff fbb8 	bl	8006ad0 <memcpy>
 8007360:	4631      	mov	r1, r6
 8007362:	4640      	mov	r0, r8
 8007364:	f7ff fef4 	bl	8007150 <_free_r>
 8007368:	e7e1      	b.n	800732e <_realloc_r+0x1e>
 800736a:	4635      	mov	r5, r6
 800736c:	e7df      	b.n	800732e <_realloc_r+0x1e>
	...

08007370 <_sbrk_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d06      	ldr	r5, [pc, #24]	; (800738c <_sbrk_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7f9 feb6 	bl	80010ec <_sbrk>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_sbrk_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_sbrk_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20004c14 	.word	0x20004c14

08007390 <__malloc_lock>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__malloc_lock+0x8>)
 8007392:	f000 b811 	b.w	80073b8 <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	20004c18 	.word	0x20004c18

0800739c <__malloc_unlock>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__malloc_unlock+0x8>)
 800739e:	f000 b80c 	b.w	80073ba <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	20004c18 	.word	0x20004c18

080073a8 <_malloc_usable_size_r>:
 80073a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ac:	1f18      	subs	r0, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfbc      	itt	lt
 80073b2:	580b      	ldrlt	r3, [r1, r0]
 80073b4:	18c0      	addlt	r0, r0, r3
 80073b6:	4770      	bx	lr

080073b8 <__retarget_lock_acquire_recursive>:
 80073b8:	4770      	bx	lr

080073ba <__retarget_lock_release_recursive>:
 80073ba:	4770      	bx	lr

080073bc <_init>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr

080073c8 <_fini>:
 80073c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ca:	bf00      	nop
 80073cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ce:	bc08      	pop	{r3}
 80073d0:	469e      	mov	lr, r3
 80073d2:	4770      	bx	lr
