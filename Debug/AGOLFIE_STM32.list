
AGOLFIE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e04  08003e04  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08003e04  08003e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e0c  08003e0c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000064  08003e78  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003e78  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b99b  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e88  00000000  00000000  0002ba72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ea  00000000  00000000  0002e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169d0  00000000  00000000  0002eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea58  00000000  00000000  000454fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087a4b  00000000  00000000  00053f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e70  00000000  00000000  000db9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000de810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d4c 	.word	0x08003d4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08003d4c 	.word	0x08003d4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <URM13_begin>:




int URM13_begin(uint8_t i2cAddr)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]

    uint8_t id;
    if(0 == readReg(URM13_PID_REG_I2C, &id, sizeof(id),i2cAddr)){   // Judge whether the data bus is successful
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f107 010f 	add.w	r1, r7, #15
 800058c:	2201      	movs	r2, #1
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f85e 	bl	8000650 <readReg>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d102      	bne.n	80005a0 <URM13_begin+0x24>
      DBG("ERR_DATA_BUS");
      return ERR_DATA_BUS;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <URM13_begin+0x38>
    }
    DBG("real sensor id="); DBG(id, HEX );
    if( 0x02 != id ){   // Judge whether the chip version matches
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d002      	beq.n	80005ac <URM13_begin+0x30>
      DBG("ERR_IC_VERSION");
      return ERR_IC_VERSION;
 80005a6:	f06f 0301 	mvn.w	r3, #1
 80005aa:	e003      	b.n	80005b4 <URM13_begin+0x38>
    }


  HAL_Delay(200);
 80005ac:	20c8      	movs	r0, #200	; 0xc8
 80005ae:	f000 fcc1 	bl	8000f34 <HAL_Delay>
  DBG("begin ok!");

  return NO_ERR;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <getDistanceCm>:
    }

}

uint16_t getDistanceCm(uint8_t i2cAddr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[2] = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	81bb      	strh	r3, [r7, #12]

  uint16_t distanceCm;


  readReg(URM13_DISTANCE_MSB_REG_I2C, &buf, 2, i2cAddr);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f107 010c 	add.w	r1, r7, #12
 80005d0:	2202      	movs	r2, #2
 80005d2:	2003      	movs	r0, #3
 80005d4:	f000 f83c 	bl	8000650 <readReg>

  distanceCm = (buf[0] << 8) | buf[1];
 80005d8:	7b3b      	ldrb	r3, [r7, #12]
 80005da:	021b      	lsls	r3, r3, #8
 80005dc:	b21a      	sxth	r2, r3
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	4313      	orrs	r3, r2
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	81fb      	strh	r3, [r7, #14]


  return distanceCm;
 80005e8:	89fb      	ldrh	r3, [r7, #14]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <writeReg>:




size_t writeReg(uint8_t reg, const void* pBuf, size_t size, uint8_t i2cAddr)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af04      	add	r7, sp, #16
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	461a      	mov	r2, r3
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	4613      	mov	r3, r2
 8000606:	73bb      	strb	r3, [r7, #14]
  if (pBuf == NULL)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <writeReg+0x1e>
  {
    DBG("pBuf ERROR!! : null pointer");
    return 0;  // Ou une valeur d'erreur appropriée.
 800060e:	2300      	movs	r3, #0
 8000610:	e017      	b.n	8000642 <writeReg+0x4e>
  }

  if (HAL_I2C_Mem_Write(&hi2c1, i2cAddr<<1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	b29b      	uxth	r3, r3
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	b29a      	uxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	b29b      	uxth	r3, r3
 8000622:	f04f 30ff 	mov.w	r0, #4294967295
 8000626:	9002      	str	r0, [sp, #8]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2301      	movs	r3, #1
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <writeReg+0x58>)
 8000632:	f001 f851 	bl	80016d8 <HAL_I2C_Mem_Write>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <writeReg+0x4c>
  {
    return 0;
 800063c:	2300      	movs	r3, #0
 800063e:	e000      	b.n	8000642 <writeReg+0x4e>
  }

  return size;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000080 	.word	0x20000080

08000650 <readReg>:

size_t readReg(uint8_t reg, void* pBuf, size_t size, uint8_t i2cAddr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af04      	add	r7, sp, #16
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
 800065a:	461a      	mov	r2, r3
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	4613      	mov	r3, r2
 8000662:	73bb      	strb	r3, [r7, #14]
  if (pBuf == NULL)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <readReg+0x1e>
  {
    DBG("pBuf ERROR!! : null pointer");
    return 0;  // Ou une valeur d'erreur appropriée.
 800066a:	2300      	movs	r3, #0
 800066c:	e02e      	b.n	80006cc <readReg+0x7c>
  }

  // Début de la transmission
  if (HAL_I2C_Mem_Write(&hi2c1, i2cAddr << 1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	b29b      	uxth	r3, r3
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	b299      	uxth	r1, r3
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	b29a      	uxth	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	b29b      	uxth	r3, r3
 800067e:	f04f 30ff 	mov.w	r0, #4294967295
 8000682:	9002      	str	r0, [sp, #8]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	4811      	ldr	r0, [pc, #68]	; (80006d4 <readReg+0x84>)
 800068e:	f001 f823 	bl	80016d8 <HAL_I2C_Mem_Write>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <readReg+0x4c>
  {
    // Gestion de l'erreur
    // Ici, vous pouvez afficher un message d'erreur ou renvoyer une valeur d'erreur au lieu d'appeler Error_Handler().
    return 0;  // Ou une valeur d'erreur appropriée.
 8000698:	2300      	movs	r3, #0
 800069a:	e017      	b.n	80006cc <readReg+0x7c>
  }

  // Début de la réception
  if (HAL_I2C_Mem_Read(&hi2c1, i2cAddr << 1, reg, 1, (uint8_t*)pBuf, size, HAL_MAX_DELAY) != HAL_OK)
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	b299      	uxth	r1, r3
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	9002      	str	r0, [sp, #8]
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <readReg+0x84>)
 80006bc:	f001 f906 	bl	80018cc <HAL_I2C_Mem_Read>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <readReg+0x7a>
  {
    // Gestion de l'erreur
    // Ici, vous pouvez afficher un message d'erreur ou renvoyer une valeur d'erreur au lieu d'appeler Error_Handler().
    return 0;  // Ou une valeur d'erreur appropriée.
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <readReg+0x7c>
  }

  return size;  // Ou le nombre d'octets lus, selon votre application.
 80006ca:	687b      	ldr	r3, [r7, #4]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000080 	.word	0x20000080

080006d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_GPIO_Init+0x4c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_GPIO_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_GPIO_Init+0x4c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <MX_GPIO_Init+0x4c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_GPIO_Init+0x4c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C1_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C1_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C1_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C1_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C1_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C1_Init+0x50>)
 8000766:	f000 fe73 	bl	8001450 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f948 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000080 	.word	0x20000080
 800077c:	40005400 	.word	0x40005400
 8000780:	000186a0 	.word	0x000186a0

08000784 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <HAL_I2C_MspInit+0x84>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d12c      	bne.n	8000800 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c8:	2312      	movs	r3, #18
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d4:	2304      	movs	r3, #4
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <HAL_I2C_MspInit+0x8c>)
 80007e0:	f000 fcb2 	bl	8001148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_I2C_MspInit+0x88>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40005400 	.word	0x40005400
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fb19 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f891 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff ff59 	bl	80006d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000826:	f7ff ff7f 	bl	8000728 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800082a:	f000 f9b5 	bl	8000b98 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800082e:	f000 f989 	bl	8000b44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  udebug_init(&huart2);
 8000832:	4840      	ldr	r0, [pc, #256]	; (8000934 <main+0x120>)
 8000834:	f000 fa80 	bl	8000d38 <udebug_init>
  udebug(FG_RED("\r\n\r\n\r\n\r\n-- START\r\n"));
 8000838:	483f      	ldr	r0, [pc, #252]	; (8000938 <main+0x124>)
 800083a:	f000 faa7 	bl	8000d8c <udebug>


  for (int i = 0; i<8; i++){
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	e009      	b.n	8000858 <main+0x44>
  URM13_begin(addr[i]);
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <main+0x128>)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe95 	bl	800057c <URM13_begin>
  for (int i = 0; i<8; i++){
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b07      	cmp	r3, #7
 800085c:	ddf2      	ble.n	8000844 <main+0x30>


  /* I2C slave address of the module, default value is 0x12, module device address(1~127) */
  //udebug("mailing address: 0x");

   uint8_t cfg = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	72fb      	strb	r3, [r7, #11]
   uint8_t cmd[8] = {0};
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]


   cfg &= ~MEASURE_RANGE_BIT;//clear bit4,long-range ranging mode
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	f023 0310 	bic.w	r3, r3, #16
 8000870:	b2db      	uxtb	r3, r3
 8000872:	72fb      	strb	r3, [r7, #11]
   //cfg |= MEASURE_RANGE_BIT;//set bit4,short-range ranging mode
   cfg |= MEASURE_MODE_BIT;//Set bit2，i2c passive mode
 8000874:	7afb      	ldrb	r3, [r7, #11]
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	b2db      	uxtb	r3, r3
 800087c:	72fb      	strb	r3, [r7, #11]
   //cfg &= ~MEASURE_MODE_BIT;//clear bit2 , set to Automatic ranging mode
   cfg &= ~TEMP_CPT_ENABLE_BIT;//clear bit1,enable temperature compensation
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	f023 0302 	bic.w	r3, r3, #2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	72fb      	strb	r3, [r7, #11]
   //cfg |= TEMP_CPT_ENABLE_BIT;//set bit1,disable temperature compensation
   cfg &= ~TEMP_CPT_SEL_BIT;//clear bit0,select internal temperature compensation
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	72fb      	strb	r3, [r7, #11]
   //cfg |= TEMP_CPT_SEL_BIT;//set bit0,select external temperature compensation

   for (int i =0 ; i<8 ; i++){
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	e00c      	b.n	80008b2 <main+0x9e>
	  writeReg(0x09, &cfg, sizeof(cfg),addr[i]);
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <main+0x128>)
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	f107 010b 	add.w	r1, r7, #11
 80008a4:	2201      	movs	r2, #1
 80008a6:	2009      	movs	r0, #9
 80008a8:	f7ff fea4 	bl	80005f4 <writeReg>
   for (int i =0 ; i<8 ; i++){
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b07      	cmp	r3, #7
 80008b6:	ddef      	ble.n	8000898 <main+0x84>
   }
   HAL_Delay(100);
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f000 fb3b 	bl	8000f34 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (int i = 0; i<8; i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e032      	b.n	800092a <main+0x116>
		  cmd[i] |=0x01;
 80008c4:	463a      	mov	r2, r7
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	b2d9      	uxtb	r1, r3
 80008d2:	463a      	mov	r2, r7
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4413      	add	r3, r2
 80008d8:	460a      	mov	r2, r1
 80008da:	701a      	strb	r2, [r3, #0]

		  if (writeReg(0x0A, &cmd[i], sizeof(cmd[i]),addr[i]) != 0)
 80008dc:	463a      	mov	r2, r7
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	18d1      	adds	r1, r2, r3
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <main+0x128>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2201      	movs	r2, #1
 80008ec:	200a      	movs	r0, #10
 80008ee:	f7ff fe81 	bl	80005f4 <writeReg>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d011      	beq.n	800091c <main+0x108>
		  {
			  udebug_formatted_twice("Distance[%d] = %d  \r\n ",addr[i],getDistanceCm(addr[i]));
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <main+0x128>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461c      	mov	r4, r3
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <main+0x128>)
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe56 	bl	80005bc <getDistanceCm>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	4621      	mov	r1, r4
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <main+0x12c>)
 8000918:	f000 fa60 	bl	8000ddc <udebug_formatted_twice>
		  }

		  HAL_Delay(1000);
 800091c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000920:	f000 fb08 	bl	8000f34 <HAL_Delay>
	  for (int i = 0; i<8; i++){
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b07      	cmp	r3, #7
 800092e:	ddc9      	ble.n	80008c4 <main+0xb0>
 8000930:	e7c5      	b.n	80008be <main+0xaa>
 8000932:	bf00      	nop
 8000934:	2000011c 	.word	0x2000011c
 8000938:	08003d7c 	.word	0x08003d7c
 800093c:	20000000 	.word	0x20000000
 8000940:	08003da0 	.word	0x08003da0

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fd76 	bl	8003444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <SystemClock_Config+0xb8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <SystemClock_Config+0xb8>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <SystemClock_Config+0xb8>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <SystemClock_Config+0xbc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <SystemClock_Config+0xbc>)
 8000992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <SystemClock_Config+0xbc>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fd09 	bl	80023d0 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009c4:	f000 f81e 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 ff6c 	bl	80028c0 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ee:	f000 f809 	bl	8000a04 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3750      	adds	r7, #80	; 0x50
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <NMI_Handler+0x4>

08000a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <MemManage_Handler+0x4>

08000a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 fa22 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f002 fcb6 	bl	8003454 <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20018000 	.word	0x20018000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200000d4 	.word	0x200000d4
 8000b1c:	200002d8 	.word	0x200002d8

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_USART1_UART_Init+0x50>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USART1_UART_Init+0x4c>)
 8000b7c:	f002 f880 	bl	8002c80 <HAL_UART_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b86:	f7ff ff3d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000d8 	.word	0x200000d8
 8000b94:	40011000 	.word	0x40011000

08000b98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_USART2_UART_Init+0x50>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f002 f856 	bl	8002c80 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bda:	f7ff ff13 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000011c 	.word	0x2000011c
 8000be8:	40004400 	.word	0x40004400

08000bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	; 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a32      	ldr	r2, [pc, #200]	; (8000cd4 <HAL_UART_MspInit+0xe8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12d      	bne.n	8000c6a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f003 0310 	and.w	r3, r3, #16
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_UART_MspInit+0xf0>)
 8000c64:	f000 fa70 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c68:	e030      	b.n	8000ccc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <HAL_UART_MspInit+0xf4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d12b      	bne.n	8000ccc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c82:	6413      	str	r3, [r2, #64]	; 0x40
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_UART_MspInit+0xec>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cac:	230c      	movs	r3, #12
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_UART_MspInit+0xf0>)
 8000cc8:	f000 fa3e 	bl	8001148 <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ff07 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f002 fba5 	bl	8003460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fd7d 	bl	8000814 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d28:	08003e14 	.word	0x08003e14
  ldr r2, =_sbss
 8000d2c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d30:	200002d4 	.word	0x200002d4

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <udebug_init>:
//



void udebug_init(UART_HandleTypeDef *what)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	udebug_uart_handler=what;		// for next prints
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <udebug_init+0x44>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
	udebug_CommandReady=_FALSE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <udebug_init+0x48>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
	udebug_Command=0;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <udebug_init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	uint32_t c;
	for(c=0;c<32;c++) udebug_RxBuffer[c]=0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	e007      	b.n	8000d68 <udebug_init+0x30>
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <udebug_init+0x50>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b1f      	cmp	r3, #31
 8000d6c:	d9f4      	bls.n	8000d58 <udebug_init+0x20>
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	20000160 	.word	0x20000160
 8000d80:	20000184 	.word	0x20000184
 8000d84:	20000185 	.word	0x20000185
 8000d88:	20000164 	.word	0x20000164

08000d8c <udebug>:
	udebug_CommandReady=_FALSE;
	return HAL_UART_Receive_IT(udebug_uart_handler, udebug_RxBuffer, char_count); //<- rearm  for RX : again 'til next rx complete
}
// output functions
void udebug(char *text)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000d98:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000d9c:	6018      	str	r0, [r3, #0]
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text);
 8000d9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000da2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	4610      	mov	r0, r2
 8000dae:	f002 fb29 	bl	8003404 <siprintf>
 8000db2:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <udebug+0x4c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 010c 	add.w	r1, r7, #12
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	f001 ffa7 	bl	8002d1a <HAL_UART_Transmit>
}
 8000dcc:	bf00      	nop
 8000dce:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000160 	.word	0x20000160

08000ddc <udebug_formatted_twice>:
	int len=sprintf((char*)obuf,text,text2);
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
}
//
void udebug_formatted_twice(char* text,int integer_val,int integer_wal)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000de8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000dec:	6018      	str	r0, [r3, #0]
 8000dee:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000df2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000df6:	6019      	str	r1, [r3, #0]
 8000df8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000dfc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000e00:	601a      	str	r2, [r3, #0]
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text,integer_val,integer_wal);
 8000e02:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000e06:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8000e0a:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8000e0e:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8000e12:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8000e16:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 8000e1a:	f107 0014 	add.w	r0, r7, #20
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	6809      	ldr	r1, [r1, #0]
 8000e24:	f002 faee 	bl	8003404 <siprintf>
 8000e28:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <udebug_formatted_twice+0x70>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f107 0114 	add.w	r1, r7, #20
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	f001 ff6c 	bl	8002d1a <HAL_UART_Transmit>
}
 8000e42:	bf00      	nop
 8000e44:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000160 	.word	0x20000160

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_Init+0x40>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_Init+0x40>)
 8000e66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x40>)
 8000e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f931 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fdc4 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f93b 	bl	800112e <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f911 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	2000000c 	.word	0x2000000c

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000188 	.word	0x20000188

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000188 	.word	0x20000188

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000010 	.word	0x20000010

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff47 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5c 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e159      	b.n	8001418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8148 	bne.w	8001412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	2b02      	cmp	r3, #2
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b03      	cmp	r3, #3
 8001206:	d017      	beq.n	8001238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	69b9      	ldr	r1, [r7, #24]
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a2 	beq.w	8001412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b57      	ldr	r3, [pc, #348]	; (8001430 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a56      	ldr	r2, [pc, #344]	; (8001430 <HAL_GPIO_Init+0x2e8>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b54      	ldr	r3, [pc, #336]	; (8001430 <HAL_GPIO_Init+0x2e8>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ea:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x2ec>)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3302      	adds	r3, #2
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	220f      	movs	r2, #15
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2f0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x202>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2f4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x1fe>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a47      	ldr	r2, [pc, #284]	; (8001440 <HAL_GPIO_Init+0x2f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x1fa>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a46      	ldr	r2, [pc, #280]	; (8001444 <HAL_GPIO_Init+0x2fc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x1f6>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a45      	ldr	r2, [pc, #276]	; (8001448 <HAL_GPIO_Init+0x300>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x1f2>
 8001336:	2304      	movs	r3, #4
 8001338:	e008      	b.n	800134c <HAL_GPIO_Init+0x204>
 800133a:	2307      	movs	r3, #7
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x204>
 800133e:	2303      	movs	r3, #3
 8001340:	e004      	b.n	800134c <HAL_GPIO_Init+0x204>
 8001342:	2302      	movs	r3, #2
 8001344:	e002      	b.n	800134c <HAL_GPIO_Init+0x204>
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x204>
 800134a:	2300      	movs	r3, #0
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f002 0203 	and.w	r2, r2, #3
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	4093      	lsls	r3, r2
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800135c:	4935      	ldr	r1, [pc, #212]	; (8001434 <HAL_GPIO_Init+0x2ec>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	089b      	lsrs	r3, r3, #2
 8001362:	3302      	adds	r3, #2
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_GPIO_Init+0x304>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138e:	4a2f      	ldr	r2, [pc, #188]	; (800144c <HAL_GPIO_Init+0x304>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_GPIO_Init+0x304>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b8:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_GPIO_Init+0x304>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_GPIO_Init+0x304>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_GPIO_Init+0x304>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_GPIO_Init+0x304>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140c:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_GPIO_Init+0x304>)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3301      	adds	r3, #1
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f67f aea2 	bls.w	8001164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e12b      	b.n	80016ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff f984 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b4:	f001 fbbc 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a81      	ldr	r2, [pc, #516]	; (80016c4 <HAL_I2C_Init+0x274>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d807      	bhi.n	80014d4 <HAL_I2C_Init+0x84>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a80      	ldr	r2, [pc, #512]	; (80016c8 <HAL_I2C_Init+0x278>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e006      	b.n	80014e2 <HAL_I2C_Init+0x92>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a7d      	ldr	r2, [pc, #500]	; (80016cc <HAL_I2C_Init+0x27c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0e7      	b.n	80016ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4a78      	ldr	r2, [pc, #480]	; (80016d0 <HAL_I2C_Init+0x280>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <HAL_I2C_Init+0x274>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d802      	bhi.n	8001524 <HAL_I2C_Init+0xd4>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	e009      	b.n	8001538 <HAL_I2C_Init+0xe8>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_I2C_Init+0x284>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	3301      	adds	r3, #1
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800154a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	495c      	ldr	r1, [pc, #368]	; (80016c4 <HAL_I2C_Init+0x274>)
 8001554:	428b      	cmp	r3, r1
 8001556:	d819      	bhi.n	800158c <HAL_I2C_Init+0x13c>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e59      	subs	r1, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fbb1 f3f3 	udiv	r3, r1, r3
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	f640 73fc 	movw	r3, #4092	; 0xffc
 800156c:	400b      	ands	r3, r1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_I2C_Init+0x138>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1e59      	subs	r1, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001580:	3301      	adds	r3, #1
 8001582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001586:	e051      	b.n	800162c <HAL_I2C_Init+0x1dc>
 8001588:	2304      	movs	r3, #4
 800158a:	e04f      	b.n	800162c <HAL_I2C_Init+0x1dc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d111      	bne.n	80015b8 <HAL_I2C_Init+0x168>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e58      	subs	r0, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	440b      	add	r3, r1
 80015a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e012      	b.n	80015de <HAL_I2C_Init+0x18e>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	0099      	lsls	r1, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x196>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e022      	b.n	800162c <HAL_I2C_Init+0x1dc>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10e      	bne.n	800160c <HAL_I2C_Init+0x1bc>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160a:	e00f      	b.n	800162c <HAL_I2C_Init+0x1dc>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	6809      	ldr	r1, [r1, #0]
 8001630:	4313      	orrs	r3, r2
 8001632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800165a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6911      	ldr	r1, [r2, #16]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68d2      	ldr	r2, [r2, #12]
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	000186a0 	.word	0x000186a0
 80016c8:	001e847f 	.word	0x001e847f
 80016cc:	003d08ff 	.word	0x003d08ff
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	10624dd3 	.word	0x10624dd3

080016d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	817b      	strh	r3, [r7, #10]
 80016ea:	460b      	mov	r3, r1
 80016ec:	813b      	strh	r3, [r7, #8]
 80016ee:	4613      	mov	r3, r2
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016f2:	f7ff fc13 	bl	8000f1c <HAL_GetTick>
 80016f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b20      	cmp	r3, #32
 8001702:	f040 80d9 	bne.w	80018b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2319      	movs	r3, #25
 800170c:	2201      	movs	r2, #1
 800170e:	496d      	ldr	r1, [pc, #436]	; (80018c4 <HAL_I2C_Mem_Write+0x1ec>)
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fc7f 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800171c:	2302      	movs	r3, #2
 800171e:	e0cc      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_I2C_Mem_Write+0x56>
 800172a:	2302      	movs	r3, #2
 800172c:	e0c5      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d007      	beq.n	8001754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2221      	movs	r2, #33	; 0x21
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a3a      	ldr	r2, [r7, #32]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001784:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <HAL_I2C_Mem_Write+0x1f0>)
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001796:	88f8      	ldrh	r0, [r7, #6]
 8001798:	893a      	ldrh	r2, [r7, #8]
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4603      	mov	r3, r0
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 fab6 	bl	8001d18 <I2C_RequestMemoryWrite>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d052      	beq.n	8001858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e081      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fd00 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d107      	bne.n	80017de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06b      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b04      	cmp	r3, #4
 800181e:	d11b      	bne.n	8001858 <HAL_I2C_Mem_Write+0x180>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d017      	beq.n	8001858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1aa      	bne.n	80017b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fcec 	bl	8002242 <I2C_WaitOnBTFFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00d      	beq.n	800188c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b04      	cmp	r3, #4
 8001876:	d107      	bne.n	8001888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e016      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018b8:	2302      	movs	r3, #2
  }
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	00100002 	.word	0x00100002
 80018c8:	ffff0000 	.word	0xffff0000

080018cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	817b      	strh	r3, [r7, #10]
 80018de:	460b      	mov	r3, r1
 80018e0:	813b      	strh	r3, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e6:	f7ff fb19 	bl	8000f1c <HAL_GetTick>
 80018ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	f040 8208 	bne.w	8001d0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2319      	movs	r3, #25
 8001900:	2201      	movs	r2, #1
 8001902:	497b      	ldr	r1, [pc, #492]	; (8001af0 <HAL_I2C_Mem_Read+0x224>)
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fb85 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
 8001912:	e1fb      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_I2C_Mem_Read+0x56>
 800191e:	2302      	movs	r3, #2
 8001920:	e1f4      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b01      	cmp	r3, #1
 8001936:	d007      	beq.n	8001948 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2222      	movs	r2, #34	; 0x22
 800195c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a5b      	ldr	r2, [pc, #364]	; (8001af4 <HAL_I2C_Mem_Read+0x228>)
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800198a:	88f8      	ldrh	r0, [r7, #6]
 800198c:	893a      	ldrh	r2, [r7, #8]
 800198e:	8979      	ldrh	r1, [r7, #10]
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4603      	mov	r3, r0
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa52 	bl	8001e44 <I2C_RequestMemoryRead>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1b0      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d113      	bne.n	80019da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e184      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d11b      	bne.n	8001a1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e164      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d11b      	bne.n	8001a5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	e144      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a70:	e138      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	f200 80f1 	bhi.w	8001c5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d123      	bne.n	8001acc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fc1b 	bl	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e139      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aca:	e10b      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d14e      	bne.n	8001b72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ada:	2200      	movs	r2, #0
 8001adc:	4906      	ldr	r1, [pc, #24]	; (8001af8 <HAL_I2C_Mem_Read+0x22c>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fa98 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e10e      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
 8001aee:	bf00      	nop
 8001af0:	00100002 	.word	0x00100002
 8001af4:	ffff0000 	.word	0xffff0000
 8001af8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b70:	e0b8      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4966      	ldr	r1, [pc, #408]	; (8001d14 <HAL_I2C_Mem_Read+0x448>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 fa49 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0bf      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	494f      	ldr	r1, [pc, #316]	; (8001d14 <HAL_I2C_Mem_Read+0x448>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fa1b 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e091      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c5c:	e042      	b.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fb2e 	bl	80022c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e04c      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d118      	bne.n	8001ce4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f47f aec2 	bne.w	8001a72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
  }
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	00010004 	.word	0x00010004

08001d18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	817b      	strh	r3, [r7, #10]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	813b      	strh	r3, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f960 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d68:	d103      	bne.n	8001d72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e05f      	b.n	8001e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d76:	897b      	ldrh	r3, [r7, #10]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	6a3a      	ldr	r2, [r7, #32]
 8001d8a:	492d      	ldr	r1, [pc, #180]	; (8001e40 <I2C_RequestMemoryWrite+0x128>)
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f998 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e04c      	b.n	8001e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 fa02 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00d      	beq.n	8001dde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d107      	bne.n	8001dda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e02b      	b.n	8001e36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001de4:	893b      	ldrh	r3, [r7, #8]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	e021      	b.n	8001e34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	6a39      	ldr	r1, [r7, #32]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f9dc 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00d      	beq.n	8001e2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d107      	bne.n	8001e26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e005      	b.n	8001e36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00010002 	.word	0x00010002

08001e44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	460b      	mov	r3, r1
 8001e58:	813b      	strh	r3, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 f8c2 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea4:	d103      	bne.n	8001eae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0aa      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eb2:	897b      	ldrh	r3, [r7, #10]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	6a3a      	ldr	r2, [r7, #32]
 8001ec6:	4952      	ldr	r1, [pc, #328]	; (8002010 <I2C_RequestMemoryRead+0x1cc>)
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f8fa 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e097      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f964 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d107      	bne.n	8001f16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e076      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f20:	893b      	ldrh	r3, [r7, #8]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	e021      	b.n	8001f70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f2c:	893b      	ldrh	r3, [r7, #8]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	6a39      	ldr	r1, [r7, #32]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f93e 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d107      	bne.n	8001f62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e050      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f66:	893b      	ldrh	r3, [r7, #8]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f72:	6a39      	ldr	r1, [r7, #32]
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f923 	bl	80021c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d107      	bne.n	8001f98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e035      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001faa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f82b 	bl	8002014 <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd2:	d103      	bne.n	8001fdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e013      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fe0:	897b      	ldrh	r3, [r7, #10]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	4906      	ldr	r1, [pc, #24]	; (8002010 <I2C_RequestMemoryRead+0x1cc>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f863 	bl	80020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010002 	.word	0x00010002

08002014 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002024:	e025      	b.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d021      	beq.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7fe ff75 	bl	8000f1c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnFlagUntilTimeout+0x30>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e023      	b.n	80020ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10d      	bne.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x84>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	e00c      	b.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d0b6      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d0:	e051      	b.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e0:	d123      	bne.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0204 	orr.w	r2, r3, #4
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e046      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d021      	beq.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7fe fef3 	bl	8000f1c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e020      	b.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e00b      	b.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d18d      	bne.n	80020d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021cc:	e02d      	b.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f8ce 	bl	8002370 <I2C_IsAcknowledgeFailed>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02d      	b.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe fe99 	bl	8000f1c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e007      	b.n	800223a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002234:	2b80      	cmp	r3, #128	; 0x80
 8002236:	d1ca      	bne.n	80021ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800224e:	e02d      	b.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f88d 	bl	8002370 <I2C_IsAcknowledgeFailed>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e02d      	b.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d021      	beq.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7fe fe58 	bl	8000f1c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e007      	b.n	80022bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d1ca      	bne.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022d0:	e042      	b.n	8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d119      	bne.n	8002314 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0210 	mvn.w	r2, #16
 80022e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e029      	b.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7fe fe02 	bl	8000f1c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	429a      	cmp	r2, r3
 8002322:	d302      	bcc.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b40      	cmp	r3, #64	; 0x40
 8002364:	d1b5      	bne.n	80022d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002386:	d11b      	bne.n	80023c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002390:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f043 0204 	orr.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e267      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d112      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e242      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fd48 	bl	8000f1c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe fd44 	bl	8000f1c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e207      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe fd34 	bl	8000f1c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fd30 	bl	8000f1c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c7      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fce9 	bl	8000f1c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fce5 	bl	8000f1c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a8      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fcc8 	bl	8000f1c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fcc4 	bl	8000f1c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e187      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fca8 	bl	8000f1c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe fca4 	bl	8000f1c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e167      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fc91 	bl	8000f1c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fc8d 	bl	8000f1c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e150      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b74      	ldr	r3, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fc4d 	bl	8000f1c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fc49 	bl	8000f1c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e10c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ea>
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x30c>
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5e      	ldr	r2, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b55      	ldr	r3, [pc, #340]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fc0e 	bl	8000f1c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fc0a 	bl	8000f1c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x334>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe fbf8 	bl	8000f1c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fbf4 	bl	8000f1c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b5      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d05c      	beq.n	8002834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d141      	bne.n	8002806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe fbc8 	bl	8000f1c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fbc4 	bl	8000f1c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e087      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	491b      	ldr	r1, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fb9d 	bl	8000f1c <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7fe fb99 	bl	8000f1c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x416>
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fb86 	bl	8000f1c <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fb82 	bl	8000f1c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e045      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d028      	beq.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d121      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7fe fab4 	bl	8000f1c <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7fe fab0 	bl	8000f1c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fa14 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	08003db8 	.word	0x08003db8
 8002a84:	20000008 	.word	0x20000008
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b090      	sub	sp, #64	; 0x40
 8002a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d00d      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x40>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	f200 80a1 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002abe:	e09b      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ac4:	e09b      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aca:	e098      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	2200      	movs	r2, #0
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	627a      	str	r2, [r7, #36]	; 0x24
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002af4:	2100      	movs	r1, #0
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af8:	fb03 f201 	mul.w	r2, r3, r1
 8002afc:	2300      	movs	r3, #0
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b06:	fba0 1202 	umull	r1, r2, r0, r2
 8002b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b12:	4413      	add	r3, r2
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	61fa      	str	r2, [r7, #28]
 8002b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b26:	f7fd fbab 	bl	8000280 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b32:	e053      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	617a      	str	r2, [r7, #20]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b46:	f04f 0b00 	mov.w	fp, #0
 8002b4a:	4652      	mov	r2, sl
 8002b4c:	465b      	mov	r3, fp
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	ebb2 080a 	subs.w	r8, r2, sl
 8002b66:	eb63 090b 	sbc.w	r9, r3, fp
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b82:	eb63 0509 	sbc.w	r5, r3, r9
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	00eb      	lsls	r3, r5, #3
 8002b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b94:	00e2      	lsls	r2, r4, #3
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	eb14 030a 	adds.w	r3, r4, sl
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	eb45 030b 	adc.w	r3, r5, fp
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	f7fd fb56 	bl	8000280 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3740      	adds	r7, #64	; 0x40
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	00f42400 	.word	0x00f42400
 8002c14:	017d7840 	.word	0x017d7840

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000008 	.word	0x20000008

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	08003dc8 	.word	0x08003dc8

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffdc 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0b5b      	lsrs	r3, r3, #13
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	08003dc8 	.word	0x08003dc8

08002c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e03f      	b.n	8002d12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fd ffa0 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f929 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08a      	sub	sp, #40	; 0x28
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d17c      	bne.n	8002e34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_Transmit+0x2c>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e075      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Transmit+0x3e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e06e      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe f8d5 	bl	8000f1c <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x82>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002dac:	e02a      	b.n	8002e04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f840 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e036      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ddc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3302      	adds	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e007      	b.n	8002df6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1cf      	bne.n	8002dae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	; 0x40
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f810 	bl	8002e3e <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b090      	sub	sp, #64	; 0x40
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4e:	e050      	b.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e56:	d04c      	beq.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	f7fe f85d 	bl	8000f1c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d241      	bcs.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3314      	adds	r3, #20
 8002ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec2:	623a      	str	r2, [r7, #32]
 8002ec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec6:	69f9      	ldr	r1, [r7, #28]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	e841 2300 	strex	r3, r2, [r1]
 8002ece:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1e5      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e00f      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d09f      	beq.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3740      	adds	r7, #64	; 0x40
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f20:	b0c0      	sub	sp, #256	; 0x100
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	68d9      	ldr	r1, [r3, #12]
 8002f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	ea40 0301 	orr.w	r3, r0, r1
 8002f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f74:	f021 010c 	bic.w	r1, r1, #12
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f96:	6999      	ldr	r1, [r3, #24]
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	ea40 0301 	orr.w	r3, r0, r1
 8002fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4b8f      	ldr	r3, [pc, #572]	; (80031e8 <UART_SetConfig+0x2cc>)
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d005      	beq.n	8002fbc <UART_SetConfig+0xa0>
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b8d      	ldr	r3, [pc, #564]	; (80031ec <UART_SetConfig+0x2d0>)
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d104      	bne.n	8002fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fbc:	f7ff fe4c 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 8002fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fc4:	e003      	b.n	8002fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fc6:	f7ff fe33 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8002fca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd8:	f040 810c 	bne.w	80031f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fee:	4622      	mov	r2, r4
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	1891      	adds	r1, r2, r2
 8002ff4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ff6:	415b      	adcs	r3, r3
 8002ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ffe:	4621      	mov	r1, r4
 8003000:	eb12 0801 	adds.w	r8, r2, r1
 8003004:	4629      	mov	r1, r5
 8003006:	eb43 0901 	adc.w	r9, r3, r1
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800301e:	4690      	mov	r8, r2
 8003020:	4699      	mov	r9, r3
 8003022:	4623      	mov	r3, r4
 8003024:	eb18 0303 	adds.w	r3, r8, r3
 8003028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800302c:	462b      	mov	r3, r5
 800302e:	eb49 0303 	adc.w	r3, r9, r3
 8003032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800304a:	460b      	mov	r3, r1
 800304c:	18db      	adds	r3, r3, r3
 800304e:	653b      	str	r3, [r7, #80]	; 0x50
 8003050:	4613      	mov	r3, r2
 8003052:	eb42 0303 	adc.w	r3, r2, r3
 8003056:	657b      	str	r3, [r7, #84]	; 0x54
 8003058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800305c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003060:	f7fd f90e 	bl	8000280 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <UART_SetConfig+0x2d4>)
 800306a:	fba3 2302 	umull	r2, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	011c      	lsls	r4, r3, #4
 8003072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800307c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	1891      	adds	r1, r2, r2
 800308a:	64b9      	str	r1, [r7, #72]	; 0x48
 800308c:	415b      	adcs	r3, r3
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003094:	4641      	mov	r1, r8
 8003096:	eb12 0a01 	adds.w	sl, r2, r1
 800309a:	4649      	mov	r1, r9
 800309c:	eb43 0b01 	adc.w	fp, r3, r1
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b4:	4692      	mov	sl, r2
 80030b6:	469b      	mov	fp, r3
 80030b8:	4643      	mov	r3, r8
 80030ba:	eb1a 0303 	adds.w	r3, sl, r3
 80030be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb4b 0303 	adc.w	r3, fp, r3
 80030c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030e0:	460b      	mov	r3, r1
 80030e2:	18db      	adds	r3, r3, r3
 80030e4:	643b      	str	r3, [r7, #64]	; 0x40
 80030e6:	4613      	mov	r3, r2
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	647b      	str	r3, [r7, #68]	; 0x44
 80030ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030f6:	f7fd f8c3 	bl	8000280 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	4b3b      	ldr	r3, [pc, #236]	; (80031f0 <UART_SetConfig+0x2d4>)
 8003102:	fba3 2301 	umull	r2, r3, r3, r1
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2264      	movs	r2, #100	; 0x64
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	1acb      	subs	r3, r1, r3
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <UART_SetConfig+0x2d4>)
 8003118:	fba3 2302 	umull	r2, r3, r3, r2
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003124:	441c      	add	r4, r3
 8003126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003130:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	1891      	adds	r1, r2, r2
 800313e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003140:	415b      	adcs	r3, r3
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003148:	4641      	mov	r1, r8
 800314a:	1851      	adds	r1, r2, r1
 800314c:	6339      	str	r1, [r7, #48]	; 0x30
 800314e:	4649      	mov	r1, r9
 8003150:	414b      	adcs	r3, r1
 8003152:	637b      	str	r3, [r7, #52]	; 0x34
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003160:	4659      	mov	r1, fp
 8003162:	00cb      	lsls	r3, r1, #3
 8003164:	4651      	mov	r1, sl
 8003166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800316a:	4651      	mov	r1, sl
 800316c:	00ca      	lsls	r2, r1, #3
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	4603      	mov	r3, r0
 8003174:	4642      	mov	r2, r8
 8003176:	189b      	adds	r3, r3, r2
 8003178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800317c:	464b      	mov	r3, r9
 800317e:	460a      	mov	r2, r1
 8003180:	eb42 0303 	adc.w	r3, r2, r3
 8003184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800319c:	460b      	mov	r3, r1
 800319e:	18db      	adds	r3, r3, r3
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031a2:	4613      	mov	r3, r2
 80031a4:	eb42 0303 	adc.w	r3, r2, r3
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031b2:	f7fd f865 	bl	8000280 <__aeabi_uldivmod>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <UART_SetConfig+0x2d4>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	3332      	adds	r3, #50	; 0x32
 80031ce:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <UART_SetConfig+0x2d4>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4422      	add	r2, r4
 80031e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031e4:	e106      	b.n	80033f4 <UART_SetConfig+0x4d8>
 80031e6:	bf00      	nop
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400
 80031f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003206:	4642      	mov	r2, r8
 8003208:	464b      	mov	r3, r9
 800320a:	1891      	adds	r1, r2, r2
 800320c:	6239      	str	r1, [r7, #32]
 800320e:	415b      	adcs	r3, r3
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003216:	4641      	mov	r1, r8
 8003218:	1854      	adds	r4, r2, r1
 800321a:	4649      	mov	r1, r9
 800321c:	eb43 0501 	adc.w	r5, r3, r1
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	00eb      	lsls	r3, r5, #3
 800322a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800322e:	00e2      	lsls	r2, r4, #3
 8003230:	4614      	mov	r4, r2
 8003232:	461d      	mov	r5, r3
 8003234:	4643      	mov	r3, r8
 8003236:	18e3      	adds	r3, r4, r3
 8003238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800323c:	464b      	mov	r3, r9
 800323e:	eb45 0303 	adc.w	r3, r5, r3
 8003242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003262:	4629      	mov	r1, r5
 8003264:	008b      	lsls	r3, r1, #2
 8003266:	4621      	mov	r1, r4
 8003268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326c:	4621      	mov	r1, r4
 800326e:	008a      	lsls	r2, r1, #2
 8003270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003274:	f7fd f804 	bl	8000280 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4b60      	ldr	r3, [pc, #384]	; (8003400 <UART_SetConfig+0x4e4>)
 800327e:	fba3 2302 	umull	r2, r3, r3, r2
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	011c      	lsls	r4, r3, #4
 8003286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003290:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003298:	4642      	mov	r2, r8
 800329a:	464b      	mov	r3, r9
 800329c:	1891      	adds	r1, r2, r2
 800329e:	61b9      	str	r1, [r7, #24]
 80032a0:	415b      	adcs	r3, r3
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	4641      	mov	r1, r8
 80032aa:	1851      	adds	r1, r2, r1
 80032ac:	6139      	str	r1, [r7, #16]
 80032ae:	4649      	mov	r1, r9
 80032b0:	414b      	adcs	r3, r1
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032c0:	4659      	mov	r1, fp
 80032c2:	00cb      	lsls	r3, r1, #3
 80032c4:	4651      	mov	r1, sl
 80032c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ca:	4651      	mov	r1, sl
 80032cc:	00ca      	lsls	r2, r1, #3
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	4642      	mov	r2, r8
 80032d6:	189b      	adds	r3, r3, r2
 80032d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032dc:	464b      	mov	r3, r9
 80032de:	460a      	mov	r2, r1
 80032e0:	eb42 0303 	adc.w	r3, r2, r3
 80032e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003300:	4649      	mov	r1, r9
 8003302:	008b      	lsls	r3, r1, #2
 8003304:	4641      	mov	r1, r8
 8003306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800330a:	4641      	mov	r1, r8
 800330c:	008a      	lsls	r2, r1, #2
 800330e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003312:	f7fc ffb5 	bl	8000280 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4611      	mov	r1, r2
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <UART_SetConfig+0x4e4>)
 800331e:	fba3 2301 	umull	r2, r3, r3, r1
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2264      	movs	r2, #100	; 0x64
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	1acb      	subs	r3, r1, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a33      	ldr	r2, [pc, #204]	; (8003400 <UART_SetConfig+0x4e4>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	441c      	add	r4, r3
 800333e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003342:	2200      	movs	r2, #0
 8003344:	673b      	str	r3, [r7, #112]	; 0x70
 8003346:	677a      	str	r2, [r7, #116]	; 0x74
 8003348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800334c:	4642      	mov	r2, r8
 800334e:	464b      	mov	r3, r9
 8003350:	1891      	adds	r1, r2, r2
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	415b      	adcs	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800335c:	4641      	mov	r1, r8
 800335e:	1851      	adds	r1, r2, r1
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	4649      	mov	r1, r9
 8003364:	414b      	adcs	r3, r1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003374:	4659      	mov	r1, fp
 8003376:	00cb      	lsls	r3, r1, #3
 8003378:	4651      	mov	r1, sl
 800337a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800337e:	4651      	mov	r1, sl
 8003380:	00ca      	lsls	r2, r1, #3
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	4603      	mov	r3, r0
 8003388:	4642      	mov	r2, r8
 800338a:	189b      	adds	r3, r3, r2
 800338c:	66bb      	str	r3, [r7, #104]	; 0x68
 800338e:	464b      	mov	r3, r9
 8003390:	460a      	mov	r2, r1
 8003392:	eb42 0303 	adc.w	r3, r2, r3
 8003396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	663b      	str	r3, [r7, #96]	; 0x60
 80033a2:	667a      	str	r2, [r7, #100]	; 0x64
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033b0:	4649      	mov	r1, r9
 80033b2:	008b      	lsls	r3, r1, #2
 80033b4:	4641      	mov	r1, r8
 80033b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ba:	4641      	mov	r1, r8
 80033bc:	008a      	lsls	r2, r1, #2
 80033be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033c2:	f7fc ff5d 	bl	8000280 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <UART_SetConfig+0x4e4>)
 80033cc:	fba3 1302 	umull	r1, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	2164      	movs	r1, #100	; 0x64
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	3332      	adds	r3, #50	; 0x32
 80033de:	4a08      	ldr	r2, [pc, #32]	; (8003400 <UART_SetConfig+0x4e4>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4422      	add	r2, r4
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	bf00      	nop
 80033f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033fa:	46bd      	mov	sp, r7
 80033fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003400:	51eb851f 	.word	0x51eb851f

08003404 <siprintf>:
 8003404:	b40e      	push	{r1, r2, r3}
 8003406:	b500      	push	{lr}
 8003408:	b09c      	sub	sp, #112	; 0x70
 800340a:	ab1d      	add	r3, sp, #116	; 0x74
 800340c:	9002      	str	r0, [sp, #8]
 800340e:	9006      	str	r0, [sp, #24]
 8003410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003414:	4809      	ldr	r0, [pc, #36]	; (800343c <siprintf+0x38>)
 8003416:	9107      	str	r1, [sp, #28]
 8003418:	9104      	str	r1, [sp, #16]
 800341a:	4909      	ldr	r1, [pc, #36]	; (8003440 <siprintf+0x3c>)
 800341c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	a902      	add	r1, sp, #8
 8003428:	f000 f992 	bl	8003750 <_svfiprintf_r>
 800342c:	9b02      	ldr	r3, [sp, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	b01c      	add	sp, #112	; 0x70
 8003434:	f85d eb04 	ldr.w	lr, [sp], #4
 8003438:	b003      	add	sp, #12
 800343a:	4770      	bx	lr
 800343c:	20000060 	.word	0x20000060
 8003440:	ffff0208 	.word	0xffff0208

08003444 <memset>:
 8003444:	4402      	add	r2, r0
 8003446:	4603      	mov	r3, r0
 8003448:	4293      	cmp	r3, r2
 800344a:	d100      	bne.n	800344e <memset+0xa>
 800344c:	4770      	bx	lr
 800344e:	f803 1b01 	strb.w	r1, [r3], #1
 8003452:	e7f9      	b.n	8003448 <memset+0x4>

08003454 <__errno>:
 8003454:	4b01      	ldr	r3, [pc, #4]	; (800345c <__errno+0x8>)
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000060 	.word	0x20000060

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	4d0d      	ldr	r5, [pc, #52]	; (8003498 <__libc_init_array+0x38>)
 8003464:	4c0d      	ldr	r4, [pc, #52]	; (800349c <__libc_init_array+0x3c>)
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	2600      	movs	r6, #0
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	4d0b      	ldr	r5, [pc, #44]	; (80034a0 <__libc_init_array+0x40>)
 8003472:	4c0c      	ldr	r4, [pc, #48]	; (80034a4 <__libc_init_array+0x44>)
 8003474:	f000 fc6a 	bl	8003d4c <_init>
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	2600      	movs	r6, #0
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	f855 3b04 	ldr.w	r3, [r5], #4
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	08003e0c 	.word	0x08003e0c
 800349c:	08003e0c 	.word	0x08003e0c
 80034a0:	08003e0c 	.word	0x08003e0c
 80034a4:	08003e10 	.word	0x08003e10

080034a8 <__retarget_lock_acquire_recursive>:
 80034a8:	4770      	bx	lr

080034aa <__retarget_lock_release_recursive>:
 80034aa:	4770      	bx	lr

080034ac <_free_r>:
 80034ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034ae:	2900      	cmp	r1, #0
 80034b0:	d044      	beq.n	800353c <_free_r+0x90>
 80034b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b6:	9001      	str	r0, [sp, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f1a1 0404 	sub.w	r4, r1, #4
 80034be:	bfb8      	it	lt
 80034c0:	18e4      	addlt	r4, r4, r3
 80034c2:	f000 f8df 	bl	8003684 <__malloc_lock>
 80034c6:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <_free_r+0x94>)
 80034c8:	9801      	ldr	r0, [sp, #4]
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	b933      	cbnz	r3, 80034dc <_free_r+0x30>
 80034ce:	6063      	str	r3, [r4, #4]
 80034d0:	6014      	str	r4, [r2, #0]
 80034d2:	b003      	add	sp, #12
 80034d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034d8:	f000 b8da 	b.w	8003690 <__malloc_unlock>
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d908      	bls.n	80034f2 <_free_r+0x46>
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	428b      	cmp	r3, r1
 80034e6:	bf01      	itttt	eq
 80034e8:	6819      	ldreq	r1, [r3, #0]
 80034ea:	685b      	ldreq	r3, [r3, #4]
 80034ec:	1949      	addeq	r1, r1, r5
 80034ee:	6021      	streq	r1, [r4, #0]
 80034f0:	e7ed      	b.n	80034ce <_free_r+0x22>
 80034f2:	461a      	mov	r2, r3
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b10b      	cbz	r3, 80034fc <_free_r+0x50>
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	d9fa      	bls.n	80034f2 <_free_r+0x46>
 80034fc:	6811      	ldr	r1, [r2, #0]
 80034fe:	1855      	adds	r5, r2, r1
 8003500:	42a5      	cmp	r5, r4
 8003502:	d10b      	bne.n	800351c <_free_r+0x70>
 8003504:	6824      	ldr	r4, [r4, #0]
 8003506:	4421      	add	r1, r4
 8003508:	1854      	adds	r4, r2, r1
 800350a:	42a3      	cmp	r3, r4
 800350c:	6011      	str	r1, [r2, #0]
 800350e:	d1e0      	bne.n	80034d2 <_free_r+0x26>
 8003510:	681c      	ldr	r4, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6053      	str	r3, [r2, #4]
 8003516:	440c      	add	r4, r1
 8003518:	6014      	str	r4, [r2, #0]
 800351a:	e7da      	b.n	80034d2 <_free_r+0x26>
 800351c:	d902      	bls.n	8003524 <_free_r+0x78>
 800351e:	230c      	movs	r3, #12
 8003520:	6003      	str	r3, [r0, #0]
 8003522:	e7d6      	b.n	80034d2 <_free_r+0x26>
 8003524:	6825      	ldr	r5, [r4, #0]
 8003526:	1961      	adds	r1, r4, r5
 8003528:	428b      	cmp	r3, r1
 800352a:	bf04      	itt	eq
 800352c:	6819      	ldreq	r1, [r3, #0]
 800352e:	685b      	ldreq	r3, [r3, #4]
 8003530:	6063      	str	r3, [r4, #4]
 8003532:	bf04      	itt	eq
 8003534:	1949      	addeq	r1, r1, r5
 8003536:	6021      	streq	r1, [r4, #0]
 8003538:	6054      	str	r4, [r2, #4]
 800353a:	e7ca      	b.n	80034d2 <_free_r+0x26>
 800353c:	b003      	add	sp, #12
 800353e:	bd30      	pop	{r4, r5, pc}
 8003540:	200002cc 	.word	0x200002cc

08003544 <sbrk_aligned>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4e0e      	ldr	r6, [pc, #56]	; (8003580 <sbrk_aligned+0x3c>)
 8003548:	460c      	mov	r4, r1
 800354a:	6831      	ldr	r1, [r6, #0]
 800354c:	4605      	mov	r5, r0
 800354e:	b911      	cbnz	r1, 8003556 <sbrk_aligned+0x12>
 8003550:	f000 fba6 	bl	8003ca0 <_sbrk_r>
 8003554:	6030      	str	r0, [r6, #0]
 8003556:	4621      	mov	r1, r4
 8003558:	4628      	mov	r0, r5
 800355a:	f000 fba1 	bl	8003ca0 <_sbrk_r>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d00a      	beq.n	8003578 <sbrk_aligned+0x34>
 8003562:	1cc4      	adds	r4, r0, #3
 8003564:	f024 0403 	bic.w	r4, r4, #3
 8003568:	42a0      	cmp	r0, r4
 800356a:	d007      	beq.n	800357c <sbrk_aligned+0x38>
 800356c:	1a21      	subs	r1, r4, r0
 800356e:	4628      	mov	r0, r5
 8003570:	f000 fb96 	bl	8003ca0 <_sbrk_r>
 8003574:	3001      	adds	r0, #1
 8003576:	d101      	bne.n	800357c <sbrk_aligned+0x38>
 8003578:	f04f 34ff 	mov.w	r4, #4294967295
 800357c:	4620      	mov	r0, r4
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	200002d0 	.word	0x200002d0

08003584 <_malloc_r>:
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	1ccd      	adds	r5, r1, #3
 800358a:	f025 0503 	bic.w	r5, r5, #3
 800358e:	3508      	adds	r5, #8
 8003590:	2d0c      	cmp	r5, #12
 8003592:	bf38      	it	cc
 8003594:	250c      	movcc	r5, #12
 8003596:	2d00      	cmp	r5, #0
 8003598:	4607      	mov	r7, r0
 800359a:	db01      	blt.n	80035a0 <_malloc_r+0x1c>
 800359c:	42a9      	cmp	r1, r5
 800359e:	d905      	bls.n	80035ac <_malloc_r+0x28>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	2600      	movs	r6, #0
 80035a6:	4630      	mov	r0, r6
 80035a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003680 <_malloc_r+0xfc>
 80035b0:	f000 f868 	bl	8003684 <__malloc_lock>
 80035b4:	f8d8 3000 	ldr.w	r3, [r8]
 80035b8:	461c      	mov	r4, r3
 80035ba:	bb5c      	cbnz	r4, 8003614 <_malloc_r+0x90>
 80035bc:	4629      	mov	r1, r5
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff ffc0 	bl	8003544 <sbrk_aligned>
 80035c4:	1c43      	adds	r3, r0, #1
 80035c6:	4604      	mov	r4, r0
 80035c8:	d155      	bne.n	8003676 <_malloc_r+0xf2>
 80035ca:	f8d8 4000 	ldr.w	r4, [r8]
 80035ce:	4626      	mov	r6, r4
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	d145      	bne.n	8003660 <_malloc_r+0xdc>
 80035d4:	2c00      	cmp	r4, #0
 80035d6:	d048      	beq.n	800366a <_malloc_r+0xe6>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	4631      	mov	r1, r6
 80035dc:	4638      	mov	r0, r7
 80035de:	eb04 0903 	add.w	r9, r4, r3
 80035e2:	f000 fb5d 	bl	8003ca0 <_sbrk_r>
 80035e6:	4581      	cmp	r9, r0
 80035e8:	d13f      	bne.n	800366a <_malloc_r+0xe6>
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	1a6d      	subs	r5, r5, r1
 80035ee:	4629      	mov	r1, r5
 80035f0:	4638      	mov	r0, r7
 80035f2:	f7ff ffa7 	bl	8003544 <sbrk_aligned>
 80035f6:	3001      	adds	r0, #1
 80035f8:	d037      	beq.n	800366a <_malloc_r+0xe6>
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	442b      	add	r3, r5
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	f8d8 3000 	ldr.w	r3, [r8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d038      	beq.n	800367a <_malloc_r+0xf6>
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	42a2      	cmp	r2, r4
 800360c:	d12b      	bne.n	8003666 <_malloc_r+0xe2>
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	e00f      	b.n	8003634 <_malloc_r+0xb0>
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	1b52      	subs	r2, r2, r5
 8003618:	d41f      	bmi.n	800365a <_malloc_r+0xd6>
 800361a:	2a0b      	cmp	r2, #11
 800361c:	d917      	bls.n	800364e <_malloc_r+0xca>
 800361e:	1961      	adds	r1, r4, r5
 8003620:	42a3      	cmp	r3, r4
 8003622:	6025      	str	r5, [r4, #0]
 8003624:	bf18      	it	ne
 8003626:	6059      	strne	r1, [r3, #4]
 8003628:	6863      	ldr	r3, [r4, #4]
 800362a:	bf08      	it	eq
 800362c:	f8c8 1000 	streq.w	r1, [r8]
 8003630:	5162      	str	r2, [r4, r5]
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	4638      	mov	r0, r7
 8003636:	f104 060b 	add.w	r6, r4, #11
 800363a:	f000 f829 	bl	8003690 <__malloc_unlock>
 800363e:	f026 0607 	bic.w	r6, r6, #7
 8003642:	1d23      	adds	r3, r4, #4
 8003644:	1af2      	subs	r2, r6, r3
 8003646:	d0ae      	beq.n	80035a6 <_malloc_r+0x22>
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	50a3      	str	r3, [r4, r2]
 800364c:	e7ab      	b.n	80035a6 <_malloc_r+0x22>
 800364e:	42a3      	cmp	r3, r4
 8003650:	6862      	ldr	r2, [r4, #4]
 8003652:	d1dd      	bne.n	8003610 <_malloc_r+0x8c>
 8003654:	f8c8 2000 	str.w	r2, [r8]
 8003658:	e7ec      	b.n	8003634 <_malloc_r+0xb0>
 800365a:	4623      	mov	r3, r4
 800365c:	6864      	ldr	r4, [r4, #4]
 800365e:	e7ac      	b.n	80035ba <_malloc_r+0x36>
 8003660:	4634      	mov	r4, r6
 8003662:	6876      	ldr	r6, [r6, #4]
 8003664:	e7b4      	b.n	80035d0 <_malloc_r+0x4c>
 8003666:	4613      	mov	r3, r2
 8003668:	e7cc      	b.n	8003604 <_malloc_r+0x80>
 800366a:	230c      	movs	r3, #12
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4638      	mov	r0, r7
 8003670:	f000 f80e 	bl	8003690 <__malloc_unlock>
 8003674:	e797      	b.n	80035a6 <_malloc_r+0x22>
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	e7dc      	b.n	8003634 <_malloc_r+0xb0>
 800367a:	605b      	str	r3, [r3, #4]
 800367c:	deff      	udf	#255	; 0xff
 800367e:	bf00      	nop
 8003680:	200002cc 	.word	0x200002cc

08003684 <__malloc_lock>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__malloc_lock+0x8>)
 8003686:	f7ff bf0f 	b.w	80034a8 <__retarget_lock_acquire_recursive>
 800368a:	bf00      	nop
 800368c:	200002c8 	.word	0x200002c8

08003690 <__malloc_unlock>:
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <__malloc_unlock+0x8>)
 8003692:	f7ff bf0a 	b.w	80034aa <__retarget_lock_release_recursive>
 8003696:	bf00      	nop
 8003698:	200002c8 	.word	0x200002c8

0800369c <__ssputs_r>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	688e      	ldr	r6, [r1, #8]
 80036a2:	461f      	mov	r7, r3
 80036a4:	42be      	cmp	r6, r7
 80036a6:	680b      	ldr	r3, [r1, #0]
 80036a8:	4682      	mov	sl, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	4690      	mov	r8, r2
 80036ae:	d82c      	bhi.n	800370a <__ssputs_r+0x6e>
 80036b0:	898a      	ldrh	r2, [r1, #12]
 80036b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036b6:	d026      	beq.n	8003706 <__ssputs_r+0x6a>
 80036b8:	6965      	ldr	r5, [r4, #20]
 80036ba:	6909      	ldr	r1, [r1, #16]
 80036bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036c0:	eba3 0901 	sub.w	r9, r3, r1
 80036c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036c8:	1c7b      	adds	r3, r7, #1
 80036ca:	444b      	add	r3, r9
 80036cc:	106d      	asrs	r5, r5, #1
 80036ce:	429d      	cmp	r5, r3
 80036d0:	bf38      	it	cc
 80036d2:	461d      	movcc	r5, r3
 80036d4:	0553      	lsls	r3, r2, #21
 80036d6:	d527      	bpl.n	8003728 <__ssputs_r+0x8c>
 80036d8:	4629      	mov	r1, r5
 80036da:	f7ff ff53 	bl	8003584 <_malloc_r>
 80036de:	4606      	mov	r6, r0
 80036e0:	b360      	cbz	r0, 800373c <__ssputs_r+0xa0>
 80036e2:	6921      	ldr	r1, [r4, #16]
 80036e4:	464a      	mov	r2, r9
 80036e6:	f000 faeb 	bl	8003cc0 <memcpy>
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	6126      	str	r6, [r4, #16]
 80036f8:	6165      	str	r5, [r4, #20]
 80036fa:	444e      	add	r6, r9
 80036fc:	eba5 0509 	sub.w	r5, r5, r9
 8003700:	6026      	str	r6, [r4, #0]
 8003702:	60a5      	str	r5, [r4, #8]
 8003704:	463e      	mov	r6, r7
 8003706:	42be      	cmp	r6, r7
 8003708:	d900      	bls.n	800370c <__ssputs_r+0x70>
 800370a:	463e      	mov	r6, r7
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	4632      	mov	r2, r6
 8003710:	4641      	mov	r1, r8
 8003712:	f000 faab 	bl	8003c6c <memmove>
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	1b9b      	subs	r3, r3, r6
 800371a:	60a3      	str	r3, [r4, #8]
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4433      	add	r3, r6
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	2000      	movs	r0, #0
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	462a      	mov	r2, r5
 800372a:	f000 fad7 	bl	8003cdc <_realloc_r>
 800372e:	4606      	mov	r6, r0
 8003730:	2800      	cmp	r0, #0
 8003732:	d1e0      	bne.n	80036f6 <__ssputs_r+0x5a>
 8003734:	6921      	ldr	r1, [r4, #16]
 8003736:	4650      	mov	r0, sl
 8003738:	f7ff feb8 	bl	80034ac <_free_r>
 800373c:	230c      	movs	r3, #12
 800373e:	f8ca 3000 	str.w	r3, [sl]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	f04f 30ff 	mov.w	r0, #4294967295
 800374e:	e7e9      	b.n	8003724 <__ssputs_r+0x88>

08003750 <_svfiprintf_r>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	4698      	mov	r8, r3
 8003756:	898b      	ldrh	r3, [r1, #12]
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	b09d      	sub	sp, #116	; 0x74
 800375c:	4607      	mov	r7, r0
 800375e:	460d      	mov	r5, r1
 8003760:	4614      	mov	r4, r2
 8003762:	d50e      	bpl.n	8003782 <_svfiprintf_r+0x32>
 8003764:	690b      	ldr	r3, [r1, #16]
 8003766:	b963      	cbnz	r3, 8003782 <_svfiprintf_r+0x32>
 8003768:	2140      	movs	r1, #64	; 0x40
 800376a:	f7ff ff0b 	bl	8003584 <_malloc_r>
 800376e:	6028      	str	r0, [r5, #0]
 8003770:	6128      	str	r0, [r5, #16]
 8003772:	b920      	cbnz	r0, 800377e <_svfiprintf_r+0x2e>
 8003774:	230c      	movs	r3, #12
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	e0d0      	b.n	8003920 <_svfiprintf_r+0x1d0>
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	616b      	str	r3, [r5, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	9309      	str	r3, [sp, #36]	; 0x24
 8003786:	2320      	movs	r3, #32
 8003788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003790:	2330      	movs	r3, #48	; 0x30
 8003792:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003938 <_svfiprintf_r+0x1e8>
 8003796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379a:	f04f 0901 	mov.w	r9, #1
 800379e:	4623      	mov	r3, r4
 80037a0:	469a      	mov	sl, r3
 80037a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a6:	b10a      	cbz	r2, 80037ac <_svfiprintf_r+0x5c>
 80037a8:	2a25      	cmp	r2, #37	; 0x25
 80037aa:	d1f9      	bne.n	80037a0 <_svfiprintf_r+0x50>
 80037ac:	ebba 0b04 	subs.w	fp, sl, r4
 80037b0:	d00b      	beq.n	80037ca <_svfiprintf_r+0x7a>
 80037b2:	465b      	mov	r3, fp
 80037b4:	4622      	mov	r2, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	4638      	mov	r0, r7
 80037ba:	f7ff ff6f 	bl	800369c <__ssputs_r>
 80037be:	3001      	adds	r0, #1
 80037c0:	f000 80a9 	beq.w	8003916 <_svfiprintf_r+0x1c6>
 80037c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c6:	445a      	add	r2, fp
 80037c8:	9209      	str	r2, [sp, #36]	; 0x24
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a1 	beq.w	8003916 <_svfiprintf_r+0x1c6>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037de:	f10a 0a01 	add.w	sl, sl, #1
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	9307      	str	r3, [sp, #28]
 80037e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ea:	931a      	str	r3, [sp, #104]	; 0x68
 80037ec:	4654      	mov	r4, sl
 80037ee:	2205      	movs	r2, #5
 80037f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f4:	4850      	ldr	r0, [pc, #320]	; (8003938 <_svfiprintf_r+0x1e8>)
 80037f6:	f7fc fcf3 	bl	80001e0 <memchr>
 80037fa:	9a04      	ldr	r2, [sp, #16]
 80037fc:	b9d8      	cbnz	r0, 8003836 <_svfiprintf_r+0xe6>
 80037fe:	06d0      	lsls	r0, r2, #27
 8003800:	bf44      	itt	mi
 8003802:	2320      	movmi	r3, #32
 8003804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003808:	0711      	lsls	r1, r2, #28
 800380a:	bf44      	itt	mi
 800380c:	232b      	movmi	r3, #43	; 0x2b
 800380e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003812:	f89a 3000 	ldrb.w	r3, [sl]
 8003816:	2b2a      	cmp	r3, #42	; 0x2a
 8003818:	d015      	beq.n	8003846 <_svfiprintf_r+0xf6>
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	4654      	mov	r4, sl
 800381e:	2000      	movs	r0, #0
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4621      	mov	r1, r4
 8003826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800382a:	3b30      	subs	r3, #48	; 0x30
 800382c:	2b09      	cmp	r3, #9
 800382e:	d94d      	bls.n	80038cc <_svfiprintf_r+0x17c>
 8003830:	b1b0      	cbz	r0, 8003860 <_svfiprintf_r+0x110>
 8003832:	9207      	str	r2, [sp, #28]
 8003834:	e014      	b.n	8003860 <_svfiprintf_r+0x110>
 8003836:	eba0 0308 	sub.w	r3, r0, r8
 800383a:	fa09 f303 	lsl.w	r3, r9, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	46a2      	mov	sl, r4
 8003844:	e7d2      	b.n	80037ec <_svfiprintf_r+0x9c>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	9103      	str	r1, [sp, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bfbb      	ittet	lt
 8003852:	425b      	neglt	r3, r3
 8003854:	f042 0202 	orrlt.w	r2, r2, #2
 8003858:	9307      	strge	r3, [sp, #28]
 800385a:	9307      	strlt	r3, [sp, #28]
 800385c:	bfb8      	it	lt
 800385e:	9204      	strlt	r2, [sp, #16]
 8003860:	7823      	ldrb	r3, [r4, #0]
 8003862:	2b2e      	cmp	r3, #46	; 0x2e
 8003864:	d10c      	bne.n	8003880 <_svfiprintf_r+0x130>
 8003866:	7863      	ldrb	r3, [r4, #1]
 8003868:	2b2a      	cmp	r3, #42	; 0x2a
 800386a:	d134      	bne.n	80038d6 <_svfiprintf_r+0x186>
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	bfb8      	it	lt
 8003878:	f04f 33ff 	movlt.w	r3, #4294967295
 800387c:	3402      	adds	r4, #2
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003948 <_svfiprintf_r+0x1f8>
 8003884:	7821      	ldrb	r1, [r4, #0]
 8003886:	2203      	movs	r2, #3
 8003888:	4650      	mov	r0, sl
 800388a:	f7fc fca9 	bl	80001e0 <memchr>
 800388e:	b138      	cbz	r0, 80038a0 <_svfiprintf_r+0x150>
 8003890:	9b04      	ldr	r3, [sp, #16]
 8003892:	eba0 000a 	sub.w	r0, r0, sl
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	4082      	lsls	r2, r0
 800389a:	4313      	orrs	r3, r2
 800389c:	3401      	adds	r4, #1
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a4:	4825      	ldr	r0, [pc, #148]	; (800393c <_svfiprintf_r+0x1ec>)
 80038a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038aa:	2206      	movs	r2, #6
 80038ac:	f7fc fc98 	bl	80001e0 <memchr>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d038      	beq.n	8003926 <_svfiprintf_r+0x1d6>
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <_svfiprintf_r+0x1f0>)
 80038b6:	bb1b      	cbnz	r3, 8003900 <_svfiprintf_r+0x1b0>
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	3307      	adds	r3, #7
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	3308      	adds	r3, #8
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c6:	4433      	add	r3, r6
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ca:	e768      	b.n	800379e <_svfiprintf_r+0x4e>
 80038cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d0:	460c      	mov	r4, r1
 80038d2:	2001      	movs	r0, #1
 80038d4:	e7a6      	b.n	8003824 <_svfiprintf_r+0xd4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	3401      	adds	r4, #1
 80038da:	9305      	str	r3, [sp, #20]
 80038dc:	4619      	mov	r1, r3
 80038de:	f04f 0c0a 	mov.w	ip, #10
 80038e2:	4620      	mov	r0, r4
 80038e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e8:	3a30      	subs	r2, #48	; 0x30
 80038ea:	2a09      	cmp	r2, #9
 80038ec:	d903      	bls.n	80038f6 <_svfiprintf_r+0x1a6>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0c6      	beq.n	8003880 <_svfiprintf_r+0x130>
 80038f2:	9105      	str	r1, [sp, #20]
 80038f4:	e7c4      	b.n	8003880 <_svfiprintf_r+0x130>
 80038f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038fa:	4604      	mov	r4, r0
 80038fc:	2301      	movs	r3, #1
 80038fe:	e7f0      	b.n	80038e2 <_svfiprintf_r+0x192>
 8003900:	ab03      	add	r3, sp, #12
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	462a      	mov	r2, r5
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <_svfiprintf_r+0x1f4>)
 8003908:	a904      	add	r1, sp, #16
 800390a:	4638      	mov	r0, r7
 800390c:	f3af 8000 	nop.w
 8003910:	1c42      	adds	r2, r0, #1
 8003912:	4606      	mov	r6, r0
 8003914:	d1d6      	bne.n	80038c4 <_svfiprintf_r+0x174>
 8003916:	89ab      	ldrh	r3, [r5, #12]
 8003918:	065b      	lsls	r3, r3, #25
 800391a:	f53f af2d 	bmi.w	8003778 <_svfiprintf_r+0x28>
 800391e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003920:	b01d      	add	sp, #116	; 0x74
 8003922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003926:	ab03      	add	r3, sp, #12
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	462a      	mov	r2, r5
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <_svfiprintf_r+0x1f4>)
 800392e:	a904      	add	r1, sp, #16
 8003930:	4638      	mov	r0, r7
 8003932:	f000 f879 	bl	8003a28 <_printf_i>
 8003936:	e7eb      	b.n	8003910 <_svfiprintf_r+0x1c0>
 8003938:	08003dd0 	.word	0x08003dd0
 800393c:	08003dda 	.word	0x08003dda
 8003940:	00000000 	.word	0x00000000
 8003944:	0800369d 	.word	0x0800369d
 8003948:	08003dd6 	.word	0x08003dd6

0800394c <_printf_common>:
 800394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	4616      	mov	r6, r2
 8003952:	4699      	mov	r9, r3
 8003954:	688a      	ldr	r2, [r1, #8]
 8003956:	690b      	ldr	r3, [r1, #16]
 8003958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800395c:	4293      	cmp	r3, r2
 800395e:	bfb8      	it	lt
 8003960:	4613      	movlt	r3, r2
 8003962:	6033      	str	r3, [r6, #0]
 8003964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003968:	4607      	mov	r7, r0
 800396a:	460c      	mov	r4, r1
 800396c:	b10a      	cbz	r2, 8003972 <_printf_common+0x26>
 800396e:	3301      	adds	r3, #1
 8003970:	6033      	str	r3, [r6, #0]
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	0699      	lsls	r1, r3, #26
 8003976:	bf42      	ittt	mi
 8003978:	6833      	ldrmi	r3, [r6, #0]
 800397a:	3302      	addmi	r3, #2
 800397c:	6033      	strmi	r3, [r6, #0]
 800397e:	6825      	ldr	r5, [r4, #0]
 8003980:	f015 0506 	ands.w	r5, r5, #6
 8003984:	d106      	bne.n	8003994 <_printf_common+0x48>
 8003986:	f104 0a19 	add.w	sl, r4, #25
 800398a:	68e3      	ldr	r3, [r4, #12]
 800398c:	6832      	ldr	r2, [r6, #0]
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	42ab      	cmp	r3, r5
 8003992:	dc26      	bgt.n	80039e2 <_printf_common+0x96>
 8003994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003998:	1e13      	subs	r3, r2, #0
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	bf18      	it	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	0692      	lsls	r2, r2, #26
 80039a2:	d42b      	bmi.n	80039fc <_printf_common+0xb0>
 80039a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039a8:	4649      	mov	r1, r9
 80039aa:	4638      	mov	r0, r7
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d01e      	beq.n	80039f0 <_printf_common+0xa4>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	6922      	ldr	r2, [r4, #16]
 80039b6:	f003 0306 	and.w	r3, r3, #6
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf02      	ittt	eq
 80039be:	68e5      	ldreq	r5, [r4, #12]
 80039c0:	6833      	ldreq	r3, [r6, #0]
 80039c2:	1aed      	subeq	r5, r5, r3
 80039c4:	68a3      	ldr	r3, [r4, #8]
 80039c6:	bf0c      	ite	eq
 80039c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039cc:	2500      	movne	r5, #0
 80039ce:	4293      	cmp	r3, r2
 80039d0:	bfc4      	itt	gt
 80039d2:	1a9b      	subgt	r3, r3, r2
 80039d4:	18ed      	addgt	r5, r5, r3
 80039d6:	2600      	movs	r6, #0
 80039d8:	341a      	adds	r4, #26
 80039da:	42b5      	cmp	r5, r6
 80039dc:	d11a      	bne.n	8003a14 <_printf_common+0xc8>
 80039de:	2000      	movs	r0, #0
 80039e0:	e008      	b.n	80039f4 <_printf_common+0xa8>
 80039e2:	2301      	movs	r3, #1
 80039e4:	4652      	mov	r2, sl
 80039e6:	4649      	mov	r1, r9
 80039e8:	4638      	mov	r0, r7
 80039ea:	47c0      	blx	r8
 80039ec:	3001      	adds	r0, #1
 80039ee:	d103      	bne.n	80039f8 <_printf_common+0xac>
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	3501      	adds	r5, #1
 80039fa:	e7c6      	b.n	800398a <_printf_common+0x3e>
 80039fc:	18e1      	adds	r1, r4, r3
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	2030      	movs	r0, #48	; 0x30
 8003a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a06:	4422      	add	r2, r4
 8003a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a10:	3302      	adds	r3, #2
 8003a12:	e7c7      	b.n	80039a4 <_printf_common+0x58>
 8003a14:	2301      	movs	r3, #1
 8003a16:	4622      	mov	r2, r4
 8003a18:	4649      	mov	r1, r9
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	47c0      	blx	r8
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d0e6      	beq.n	80039f0 <_printf_common+0xa4>
 8003a22:	3601      	adds	r6, #1
 8003a24:	e7d9      	b.n	80039da <_printf_common+0x8e>
	...

08003a28 <_printf_i>:
 8003a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a2c:	7e0f      	ldrb	r7, [r1, #24]
 8003a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a30:	2f78      	cmp	r7, #120	; 0x78
 8003a32:	4691      	mov	r9, r2
 8003a34:	4680      	mov	r8, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	469a      	mov	sl, r3
 8003a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a3e:	d807      	bhi.n	8003a50 <_printf_i+0x28>
 8003a40:	2f62      	cmp	r7, #98	; 0x62
 8003a42:	d80a      	bhi.n	8003a5a <_printf_i+0x32>
 8003a44:	2f00      	cmp	r7, #0
 8003a46:	f000 80d4 	beq.w	8003bf2 <_printf_i+0x1ca>
 8003a4a:	2f58      	cmp	r7, #88	; 0x58
 8003a4c:	f000 80c0 	beq.w	8003bd0 <_printf_i+0x1a8>
 8003a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a58:	e03a      	b.n	8003ad0 <_printf_i+0xa8>
 8003a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a5e:	2b15      	cmp	r3, #21
 8003a60:	d8f6      	bhi.n	8003a50 <_printf_i+0x28>
 8003a62:	a101      	add	r1, pc, #4	; (adr r1, 8003a68 <_printf_i+0x40>)
 8003a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a68:	08003ac1 	.word	0x08003ac1
 8003a6c:	08003ad5 	.word	0x08003ad5
 8003a70:	08003a51 	.word	0x08003a51
 8003a74:	08003a51 	.word	0x08003a51
 8003a78:	08003a51 	.word	0x08003a51
 8003a7c:	08003a51 	.word	0x08003a51
 8003a80:	08003ad5 	.word	0x08003ad5
 8003a84:	08003a51 	.word	0x08003a51
 8003a88:	08003a51 	.word	0x08003a51
 8003a8c:	08003a51 	.word	0x08003a51
 8003a90:	08003a51 	.word	0x08003a51
 8003a94:	08003bd9 	.word	0x08003bd9
 8003a98:	08003b01 	.word	0x08003b01
 8003a9c:	08003b93 	.word	0x08003b93
 8003aa0:	08003a51 	.word	0x08003a51
 8003aa4:	08003a51 	.word	0x08003a51
 8003aa8:	08003bfb 	.word	0x08003bfb
 8003aac:	08003a51 	.word	0x08003a51
 8003ab0:	08003b01 	.word	0x08003b01
 8003ab4:	08003a51 	.word	0x08003a51
 8003ab8:	08003a51 	.word	0x08003a51
 8003abc:	08003b9b 	.word	0x08003b9b
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	602a      	str	r2, [r5, #0]
 8003ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e09f      	b.n	8003c14 <_printf_i+0x1ec>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	682b      	ldr	r3, [r5, #0]
 8003ad8:	0607      	lsls	r7, r0, #24
 8003ada:	f103 0104 	add.w	r1, r3, #4
 8003ade:	6029      	str	r1, [r5, #0]
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_i+0xbe>
 8003ae2:	681e      	ldr	r6, [r3, #0]
 8003ae4:	e003      	b.n	8003aee <_printf_i+0xc6>
 8003ae6:	0646      	lsls	r6, r0, #25
 8003ae8:	d5fb      	bpl.n	8003ae2 <_printf_i+0xba>
 8003aea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003aee:	2e00      	cmp	r6, #0
 8003af0:	da03      	bge.n	8003afa <_printf_i+0xd2>
 8003af2:	232d      	movs	r3, #45	; 0x2d
 8003af4:	4276      	negs	r6, r6
 8003af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afa:	485a      	ldr	r0, [pc, #360]	; (8003c64 <_printf_i+0x23c>)
 8003afc:	230a      	movs	r3, #10
 8003afe:	e012      	b.n	8003b26 <_printf_i+0xfe>
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	1d19      	adds	r1, r3, #4
 8003b06:	6029      	str	r1, [r5, #0]
 8003b08:	0605      	lsls	r5, r0, #24
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0xe8>
 8003b0c:	681e      	ldr	r6, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0xee>
 8003b10:	0641      	lsls	r1, r0, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0xe4>
 8003b14:	881e      	ldrh	r6, [r3, #0]
 8003b16:	4853      	ldr	r0, [pc, #332]	; (8003c64 <_printf_i+0x23c>)
 8003b18:	2f6f      	cmp	r7, #111	; 0x6f
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2308      	moveq	r3, #8
 8003b1e:	230a      	movne	r3, #10
 8003b20:	2100      	movs	r1, #0
 8003b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b26:	6865      	ldr	r5, [r4, #4]
 8003b28:	60a5      	str	r5, [r4, #8]
 8003b2a:	2d00      	cmp	r5, #0
 8003b2c:	bfa2      	ittt	ge
 8003b2e:	6821      	ldrge	r1, [r4, #0]
 8003b30:	f021 0104 	bicge.w	r1, r1, #4
 8003b34:	6021      	strge	r1, [r4, #0]
 8003b36:	b90e      	cbnz	r6, 8003b3c <_printf_i+0x114>
 8003b38:	2d00      	cmp	r5, #0
 8003b3a:	d04b      	beq.n	8003bd4 <_printf_i+0x1ac>
 8003b3c:	4615      	mov	r5, r2
 8003b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b42:	fb03 6711 	mls	r7, r3, r1, r6
 8003b46:	5dc7      	ldrb	r7, [r0, r7]
 8003b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b4c:	4637      	mov	r7, r6
 8003b4e:	42bb      	cmp	r3, r7
 8003b50:	460e      	mov	r6, r1
 8003b52:	d9f4      	bls.n	8003b3e <_printf_i+0x116>
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d10b      	bne.n	8003b70 <_printf_i+0x148>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	07de      	lsls	r6, r3, #31
 8003b5c:	d508      	bpl.n	8003b70 <_printf_i+0x148>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	4299      	cmp	r1, r3
 8003b64:	bfde      	ittt	le
 8003b66:	2330      	movle	r3, #48	; 0x30
 8003b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b70:	1b52      	subs	r2, r2, r5
 8003b72:	6122      	str	r2, [r4, #16]
 8003b74:	f8cd a000 	str.w	sl, [sp]
 8003b78:	464b      	mov	r3, r9
 8003b7a:	aa03      	add	r2, sp, #12
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f7ff fee4 	bl	800394c <_printf_common>
 8003b84:	3001      	adds	r0, #1
 8003b86:	d14a      	bne.n	8003c1e <_printf_i+0x1f6>
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	b004      	add	sp, #16
 8003b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	4833      	ldr	r0, [pc, #204]	; (8003c68 <_printf_i+0x240>)
 8003b9c:	2778      	movs	r7, #120	; 0x78
 8003b9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	6829      	ldr	r1, [r5, #0]
 8003ba6:	061f      	lsls	r7, r3, #24
 8003ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bac:	d402      	bmi.n	8003bb4 <_printf_i+0x18c>
 8003bae:	065f      	lsls	r7, r3, #25
 8003bb0:	bf48      	it	mi
 8003bb2:	b2b6      	uxthmi	r6, r6
 8003bb4:	07df      	lsls	r7, r3, #31
 8003bb6:	bf48      	it	mi
 8003bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8003bbc:	6029      	str	r1, [r5, #0]
 8003bbe:	bf48      	it	mi
 8003bc0:	6023      	strmi	r3, [r4, #0]
 8003bc2:	b91e      	cbnz	r6, 8003bcc <_printf_i+0x1a4>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	f023 0320 	bic.w	r3, r3, #32
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	2310      	movs	r3, #16
 8003bce:	e7a7      	b.n	8003b20 <_printf_i+0xf8>
 8003bd0:	4824      	ldr	r0, [pc, #144]	; (8003c64 <_printf_i+0x23c>)
 8003bd2:	e7e4      	b.n	8003b9e <_printf_i+0x176>
 8003bd4:	4615      	mov	r5, r2
 8003bd6:	e7bd      	b.n	8003b54 <_printf_i+0x12c>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	6826      	ldr	r6, [r4, #0]
 8003bdc:	6961      	ldr	r1, [r4, #20]
 8003bde:	1d18      	adds	r0, r3, #4
 8003be0:	6028      	str	r0, [r5, #0]
 8003be2:	0635      	lsls	r5, r6, #24
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0x1c4>
 8003be8:	6019      	str	r1, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <_printf_i+0x1ca>
 8003bec:	0670      	lsls	r0, r6, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0x1c0>
 8003bf0:	8019      	strh	r1, [r3, #0]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	4615      	mov	r5, r2
 8003bf8:	e7bc      	b.n	8003b74 <_printf_i+0x14c>
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	1d1a      	adds	r2, r3, #4
 8003bfe:	602a      	str	r2, [r5, #0]
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	6862      	ldr	r2, [r4, #4]
 8003c04:	2100      	movs	r1, #0
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7fc faea 	bl	80001e0 <memchr>
 8003c0c:	b108      	cbz	r0, 8003c12 <_printf_i+0x1ea>
 8003c0e:	1b40      	subs	r0, r0, r5
 8003c10:	6060      	str	r0, [r4, #4]
 8003c12:	6863      	ldr	r3, [r4, #4]
 8003c14:	6123      	str	r3, [r4, #16]
 8003c16:	2300      	movs	r3, #0
 8003c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c1c:	e7aa      	b.n	8003b74 <_printf_i+0x14c>
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	462a      	mov	r2, r5
 8003c22:	4649      	mov	r1, r9
 8003c24:	4640      	mov	r0, r8
 8003c26:	47d0      	blx	sl
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d0ad      	beq.n	8003b88 <_printf_i+0x160>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	079b      	lsls	r3, r3, #30
 8003c30:	d413      	bmi.n	8003c5a <_printf_i+0x232>
 8003c32:	68e0      	ldr	r0, [r4, #12]
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	4298      	cmp	r0, r3
 8003c38:	bfb8      	it	lt
 8003c3a:	4618      	movlt	r0, r3
 8003c3c:	e7a6      	b.n	8003b8c <_printf_i+0x164>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4632      	mov	r2, r6
 8003c42:	4649      	mov	r1, r9
 8003c44:	4640      	mov	r0, r8
 8003c46:	47d0      	blx	sl
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d09d      	beq.n	8003b88 <_printf_i+0x160>
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	68e3      	ldr	r3, [r4, #12]
 8003c50:	9903      	ldr	r1, [sp, #12]
 8003c52:	1a5b      	subs	r3, r3, r1
 8003c54:	42ab      	cmp	r3, r5
 8003c56:	dcf2      	bgt.n	8003c3e <_printf_i+0x216>
 8003c58:	e7eb      	b.n	8003c32 <_printf_i+0x20a>
 8003c5a:	2500      	movs	r5, #0
 8003c5c:	f104 0619 	add.w	r6, r4, #25
 8003c60:	e7f5      	b.n	8003c4e <_printf_i+0x226>
 8003c62:	bf00      	nop
 8003c64:	08003de1 	.word	0x08003de1
 8003c68:	08003df2 	.word	0x08003df2

08003c6c <memmove>:
 8003c6c:	4288      	cmp	r0, r1
 8003c6e:	b510      	push	{r4, lr}
 8003c70:	eb01 0402 	add.w	r4, r1, r2
 8003c74:	d902      	bls.n	8003c7c <memmove+0x10>
 8003c76:	4284      	cmp	r4, r0
 8003c78:	4623      	mov	r3, r4
 8003c7a:	d807      	bhi.n	8003c8c <memmove+0x20>
 8003c7c:	1e43      	subs	r3, r0, #1
 8003c7e:	42a1      	cmp	r1, r4
 8003c80:	d008      	beq.n	8003c94 <memmove+0x28>
 8003c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c8a:	e7f8      	b.n	8003c7e <memmove+0x12>
 8003c8c:	4402      	add	r2, r0
 8003c8e:	4601      	mov	r1, r0
 8003c90:	428a      	cmp	r2, r1
 8003c92:	d100      	bne.n	8003c96 <memmove+0x2a>
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c9e:	e7f7      	b.n	8003c90 <memmove+0x24>

08003ca0 <_sbrk_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4d06      	ldr	r5, [pc, #24]	; (8003cbc <_sbrk_r+0x1c>)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	602b      	str	r3, [r5, #0]
 8003cac:	f7fc ff02 	bl	8000ab4 <_sbrk>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_sbrk_r+0x1a>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_sbrk_r+0x1a>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	200002c4 	.word	0x200002c4

08003cc0 <memcpy>:
 8003cc0:	440a      	add	r2, r1
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc8:	d100      	bne.n	8003ccc <memcpy+0xc>
 8003cca:	4770      	bx	lr
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cd6:	4291      	cmp	r1, r2
 8003cd8:	d1f9      	bne.n	8003cce <memcpy+0xe>
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <_realloc_r>:
 8003cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	4680      	mov	r8, r0
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	b921      	cbnz	r1, 8003cf2 <_realloc_r+0x16>
 8003ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cec:	4611      	mov	r1, r2
 8003cee:	f7ff bc49 	b.w	8003584 <_malloc_r>
 8003cf2:	b92a      	cbnz	r2, 8003d00 <_realloc_r+0x24>
 8003cf4:	f7ff fbda 	bl	80034ac <_free_r>
 8003cf8:	4625      	mov	r5, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d00:	f000 f81b 	bl	8003d3a <_malloc_usable_size_r>
 8003d04:	4284      	cmp	r4, r0
 8003d06:	4607      	mov	r7, r0
 8003d08:	d802      	bhi.n	8003d10 <_realloc_r+0x34>
 8003d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d0e:	d812      	bhi.n	8003d36 <_realloc_r+0x5a>
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fc36 	bl	8003584 <_malloc_r>
 8003d18:	4605      	mov	r5, r0
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0ed      	beq.n	8003cfa <_realloc_r+0x1e>
 8003d1e:	42bc      	cmp	r4, r7
 8003d20:	4622      	mov	r2, r4
 8003d22:	4631      	mov	r1, r6
 8003d24:	bf28      	it	cs
 8003d26:	463a      	movcs	r2, r7
 8003d28:	f7ff ffca 	bl	8003cc0 <memcpy>
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f7ff fbbc 	bl	80034ac <_free_r>
 8003d34:	e7e1      	b.n	8003cfa <_realloc_r+0x1e>
 8003d36:	4635      	mov	r5, r6
 8003d38:	e7df      	b.n	8003cfa <_realloc_r+0x1e>

08003d3a <_malloc_usable_size_r>:
 8003d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d3e:	1f18      	subs	r0, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bfbc      	itt	lt
 8003d44:	580b      	ldrlt	r3, [r1, r0]
 8003d46:	18c0      	addlt	r0, r0, r3
 8003d48:	4770      	bx	lr
	...

08003d4c <_init>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr

08003d58 <_fini>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr
