
AGOLFIE_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080075b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800762c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800768c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  24000134  080076ec  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400090c  080076ec  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5ff  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a05  00000000  00000000  0003f761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00043168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  000445d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005465  00000000  00000000  000458b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d539  00000000  00000000  0004ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00163574  00000000  00000000  0006824e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb7c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005954  00000000  00000000  001cb814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007478 	.word	0x08007478

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	08007478 	.word	0x08007478

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2224      	movs	r2, #36	; 0x24
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fa7b 	bl	8006b8c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_DAC1_Init+0x5c>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_DAC1_Init+0x60>)
 800069a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <MX_DAC1_Init+0x5c>)
 800069e:	f001 f91e 	bl	80018de <HAL_DAC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006a8:	f000 fbc2 	bl	8000e30 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_DAC1_Init+0x5c>)
 80006c8:	f001 f92c 	bl	8001924 <HAL_DAC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006d2:	f000 fbad 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	24000150 	.word	0x24000150
 80006e4:	40007400 	.word	0x40007400

080006e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_DAC_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_DAC_MspInit+0x84>)
 800070c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000710:	4a16      	ldr	r2, [pc, #88]	; (800076c <HAL_DAC_MspInit+0x84>)
 8000712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_DAC_MspInit+0x84>)
 800071c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_DAC_MspInit+0x84>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_DAC_MspInit+0x84>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_DAC_MspInit+0x84>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000746:	2310      	movs	r3, #16
 8000748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800074a:	2303      	movs	r3, #3
 800074c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_DAC_MspInit+0x88>)
 800075a:	f001 fe37 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40007400 	.word	0x40007400
 800076c:	58024400 	.word	0x58024400
 8000770:	58020000 	.word	0x58020000

08000774 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_ETH_Init+0x80>)
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_ETH_Init+0x84>)
 800077c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ETH_Init+0x88>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ETH_Init+0x88>)
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ETH_Init+0x88>)
 800078c:	22e1      	movs	r2, #225	; 0xe1
 800078e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ETH_Init+0x88>)
 8000792:	2200      	movs	r2, #0
 8000794:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ETH_Init+0x88>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ETH_Init+0x88>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_ETH_Init+0x80>)
 80007a4:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_ETH_Init+0x88>)
 80007a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_ETH_Init+0x80>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_ETH_Init+0x80>)
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <MX_ETH_Init+0x8c>)
 80007b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_ETH_Init+0x80>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <MX_ETH_Init+0x90>)
 80007b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_ETH_Init+0x80>)
 80007bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_ETH_Init+0x80>)
 80007c4:	f001 f9de 	bl	8001b84 <HAL_ETH_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007ce:	f000 fb2f 	bl	8000e30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007d2:	2238      	movs	r2, #56	; 0x38
 80007d4:	2100      	movs	r1, #0
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_ETH_Init+0x94>)
 80007d8:	f006 f9d8 	bl	8006b8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_ETH_Init+0x94>)
 80007de:	2221      	movs	r2, #33	; 0x21
 80007e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_ETH_Init+0x94>)
 80007e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_ETH_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2400019c 	.word	0x2400019c
 80007f8:	40028000 	.word	0x40028000
 80007fc:	2400024c 	.word	0x2400024c
 8000800:	240000d4 	.word	0x240000d4
 8000804:	24000074 	.word	0x24000074
 8000808:	24000164 	.word	0x24000164

0800080c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08e      	sub	sp, #56	; 0x38
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a59      	ldr	r2, [pc, #356]	; (8000990 <HAL_ETH_MspInit+0x184>)
 800082a:	4293      	cmp	r3, r2
 800082c:	f040 80ab 	bne.w	8000986 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000830:	4b58      	ldr	r3, [pc, #352]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000836:	4a57      	ldr	r2, [pc, #348]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000840:	4b54      	ldr	r3, [pc, #336]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	623b      	str	r3, [r7, #32]
 800084c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800084e:	4b51      	ldr	r3, [pc, #324]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000854:	4a4f      	ldr	r2, [pc, #316]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800085e:	4b4d      	ldr	r3, [pc, #308]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000860:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800086c:	4b49      	ldr	r3, [pc, #292]	; (8000994 <HAL_ETH_MspInit+0x188>)
 800086e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000872:	4a48      	ldr	r2, [pc, #288]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800087c:	4b45      	ldr	r3, [pc, #276]	; (8000994 <HAL_ETH_MspInit+0x188>)
 800087e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b42      	ldr	r3, [pc, #264]	; (8000994 <HAL_ETH_MspInit+0x188>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a40      	ldr	r2, [pc, #256]	; (8000994 <HAL_ETH_MspInit+0x188>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <HAL_ETH_MspInit+0x188>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a39      	ldr	r2, [pc, #228]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a31      	ldr	r2, [pc, #196]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <HAL_ETH_MspInit+0x188>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000902:	2332      	movs	r3, #50	; 0x32
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	481e      	ldr	r0, [pc, #120]	; (8000998 <HAL_ETH_MspInit+0x18c>)
 800091e:	f001 fd55 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000922:	2386      	movs	r3, #134	; 0x86
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000932:	230b      	movs	r3, #11
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4817      	ldr	r0, [pc, #92]	; (800099c <HAL_ETH_MspInit+0x190>)
 800093e:	f001 fd45 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000954:	230b      	movs	r3, #11
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <HAL_ETH_MspInit+0x194>)
 8000960:	f001 fd34 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000964:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <HAL_ETH_MspInit+0x198>)
 8000982:	f001 fd23 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000986:	bf00      	nop
 8000988:	3738      	adds	r7, #56	; 0x38
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40028000 	.word	0x40028000
 8000994:	58024400 	.word	0x58024400
 8000998:	58020800 	.word	0x58020800
 800099c:	58020000 	.word	0x58020000
 80009a0:	58020400 	.word	0x58020400
 80009a4:	58021800 	.word	0x58021800

080009a8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b74      	ldr	r3, [pc, #464]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a72      	ldr	r2, [pc, #456]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b70      	ldr	r3, [pc, #448]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	623b      	str	r3, [r7, #32]
 80009da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009dc:	4b6c      	ldr	r3, [pc, #432]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a6b      	ldr	r2, [pc, #428]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009e4:	f043 0320 	orr.w	r3, r3, #32
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b68      	ldr	r3, [pc, #416]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	4b65      	ldr	r3, [pc, #404]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a63      	ldr	r2, [pc, #396]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a5c      	ldr	r2, [pc, #368]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b52      	ldr	r3, [pc, #328]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a4d      	ldr	r2, [pc, #308]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a78:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a90:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a96:	4a3e      	ldr	r2, [pc, #248]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_GPIO_Init+0x1e8>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_BL_Pin|LED_BCL_Pin|LED_BCR_Pin|LED_BR_Pin
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f240 213f 	movw	r1, #575	; 0x23f
 8000ab4:	4837      	ldr	r0, [pc, #220]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000ab6:	f001 fe39 	bl	800272c <HAL_GPIO_WritePin>
                          |LED_FL_Pin|LED_FCL_Pin|LED_FR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000ac2:	f001 fe33 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f240 4107 	movw	r1, #1031	; 0x407
 8000acc:	4833      	ldr	r0, [pc, #204]	; (8000b9c <MX_GPIO_Init+0x1f4>)
 8000ace:	f001 fe2d 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000ad8:	f001 fe28 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	482c      	ldr	r0, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0x1fc>)
 8000af2:	f001 fc6b 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED_BL_Pin|LED_BCL_Pin|LED_BCR_Pin|LED_BR_Pin
 8000af6:	f240 233f 	movw	r3, #575	; 0x23f
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_FL_Pin|LED_FCL_Pin|LED_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4821      	ldr	r0, [pc, #132]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000b10:	f001 fc5c 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_FCR_Pin;
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LED_FCR_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	; (8000b94 <MX_GPIO_Init+0x1ec>)
 8000b2a:	f001 fc4f 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b2e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4814      	ldr	r0, [pc, #80]	; (8000b98 <MX_GPIO_Init+0x1f0>)
 8000b48:	f001 fc40 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000b4c:	f240 4307 	movw	r3, #1031	; 0x407
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_GPIO_Init+0x1f4>)
 8000b66:	f001 fc31 	bl	80023cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_GPIO_Init+0x1f8>)
 8000b82:	f001 fc23 	bl	80023cc <HAL_GPIO_Init>

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58021400 	.word	0x58021400
 8000b98:	58020400 	.word	0x58020400
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	58021000 	.word	0x58021000
 8000ba4:	58020800 	.word	0x58020800

08000ba8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_I2C1_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MX_I2C1_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000be4:	f001 fdbc 	bl	8002760 <HAL_I2C_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 f91f 	bl	8000e30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bf6:	f001 fe43 	bl	8002880 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 f916 	bl	8000e30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000c08:	f001 fe85 	bl	8002916 <HAL_I2CEx_ConfigDigitalFilter>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f90d 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000254 	.word	0x24000254
 8000c20:	40005400 	.word	0x40005400
 8000c24:	10707dbc 	.word	0x10707dbc

08000c28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0b8      	sub	sp, #224	; 0xe0
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	22bc      	movs	r2, #188	; 0xbc
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 ff9f 	bl	8006b8c <memset>
  if(i2cHandle->Instance==I2C1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <HAL_I2C_MspInit+0xbc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d141      	bne.n	8000cdc <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 ffee 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c72:	f000 f8dd 	bl	8000e30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c94:	23c0      	movs	r3, #192	; 0xc0
 8000c96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <HAL_I2C_MspInit+0xc4>)
 8000cba:	f001 fb87 	bl	80023cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc4:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_I2C_MspInit+0xc0>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	37e0      	adds	r7, #224	; 0xe0
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	58020400 	.word	0x58020400

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fc3a 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f81a 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f7ff fe54 	bl	80009a8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d00:	f7ff fd38 	bl	8000774 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d04:	f000 f9e8 	bl	80010d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d08:	f000 fb08 	bl	800131c <MX_USB_OTG_FS_PCD_Init>
  MX_DAC1_Init();
 8000d0c:	f7ff fcba 	bl	8000684 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000d10:	f7ff ff4a 	bl	8000ba8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d14:	f000 f994 	bl	8001040 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  udebug_init(&huart3);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <main+0x38>)
 8000d1a:	f000 fbd5 	bl	80014c8 <udebug_init>
  udebug(FG_RED("\r\n\r\n\r\n\r\n-- START\r\n"));
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <main+0x3c>)
 8000d20:	f000 fbfc 	bl	800151c <udebug>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <main+0x34>
 8000d26:	bf00      	nop
 8000d28:	24000334 	.word	0x24000334
 8000d2c:	08007518 	.word	0x08007518

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09c      	sub	sp, #112	; 0x70
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	224c      	movs	r2, #76	; 0x4c
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f005 ff24 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2220      	movs	r2, #32
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f005 ff1e 	bl	8006b8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f001 ff75 	bl	8002c40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <SystemClock_Config+0xf8>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	4a32      	ldr	r2, [pc, #200]	; (8000e28 <SystemClock_Config+0xf8>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <SystemClock_Config+0xf8>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <SystemClock_Config+0xfc>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d78:	4a2c      	ldr	r2, [pc, #176]	; (8000e2c <SystemClock_Config+0xfc>)
 8000d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <SystemClock_Config+0xfc>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8c:	bf00      	nop
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <SystemClock_Config+0xfc>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9a:	d1f8      	bne.n	8000d8e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000da0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2340      	movs	r3, #64	; 0x40
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	2302      	movs	r3, #2
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dba:	2318      	movs	r3, #24
 8000dbc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 ff7a 	bl	8002cd4 <HAL_RCC_OscConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000de6:	f000 f823 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	233f      	movs	r3, #63	; 0x3f
 8000dec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 fb8e 	bl	8003530 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e1a:	f000 f809 	bl	8000e30 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3770      	adds	r7, #112	; 0x70
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	58000400 	.word	0x58000400
 8000e2c:	58024800 	.word	0x58024800

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_MspInit+0x30>)
 8000e44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e48:	4a08      	ldr	r2, [pc, #32]	; (8000e6c <HAL_MspInit+0x30>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_MspInit+0x30>)
 8000e54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58024400 	.word	0x58024400

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 fbc8 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f005 fe20 	bl	8006b38 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24080000 	.word	0x24080000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	240002a0 	.word	0x240002a0
 8000f2c:	24000910 	.word	0x24000910

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f34:	4b37      	ldr	r3, [pc, #220]	; (8001014 <SystemInit+0xe4>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a36      	ldr	r2, [pc, #216]	; (8001014 <SystemInit+0xe4>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <SystemInit+0xe8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	2b06      	cmp	r3, #6
 8000f4e:	d807      	bhi.n	8000f60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <SystemInit+0xe8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 030f 	bic.w	r3, r3, #15
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <SystemInit+0xe8>)
 8000f5a:	f043 0307 	orr.w	r3, r3, #7
 8000f5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <SystemInit+0xec>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <SystemInit+0xec>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <SystemInit+0xec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <SystemInit+0xec>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4929      	ldr	r1, [pc, #164]	; (800101c <SystemInit+0xec>)
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <SystemInit+0xf0>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <SystemInit+0xe8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <SystemInit+0xe8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 030f 	bic.w	r3, r3, #15
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <SystemInit+0xe8>)
 8000f94:	f043 0307 	orr.w	r3, r3, #7
 8000f98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <SystemInit+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <SystemInit+0xec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <SystemInit+0xec>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <SystemInit+0xec>)
 8000fae:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <SystemInit+0xf4>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <SystemInit+0xec>)
 8000fb4:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <SystemInit+0xf8>)
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <SystemInit+0xec>)
 8000fba:	4a1c      	ldr	r2, [pc, #112]	; (800102c <SystemInit+0xfc>)
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <SystemInit+0xec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <SystemInit+0xec>)
 8000fc6:	4a19      	ldr	r2, [pc, #100]	; (800102c <SystemInit+0xfc>)
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <SystemInit+0xec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <SystemInit+0xec>)
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <SystemInit+0xfc>)
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <SystemInit+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <SystemInit+0xec>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <SystemInit+0xec>)
 8000fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <SystemInit+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <SystemInit+0x100>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <SystemInit+0x104>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ffa:	d202      	bcs.n	8001002 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <SystemInit+0x108>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <SystemInit+0x10c>)
 8001004:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001008:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	52002000 	.word	0x52002000
 800101c:	58024400 	.word	0x58024400
 8001020:	eaf6ed7f 	.word	0xeaf6ed7f
 8001024:	02020200 	.word	0x02020200
 8001028:	01ff0000 	.word	0x01ff0000
 800102c:	01010280 	.word	0x01010280
 8001030:	5c001000 	.word	0x5c001000
 8001034:	ffff0000 	.word	0xffff0000
 8001038:	51008108 	.word	0x51008108
 800103c:	52004000 	.word	0x52004000

08001040 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <MX_USART2_UART_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800108a:	f004 f945 	bl	8005318 <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001094:	f7ff fecc 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 800109c:	f005 f978 	bl	8006390 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f7ff fec3 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 80010ae:	f005 f9ad 	bl	800640c <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f7ff feba 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_USART2_UART_Init+0x90>)
 80010be:	f005 f92e 	bl	800631e <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f7ff feb2 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	240002a4 	.word	0x240002a4
 80010d4:	40004400 	.word	0x40004400

080010d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_USART3_UART_Init+0x94>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_USART3_UART_Init+0x90>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b19      	ldr	r3, [pc, #100]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_USART3_UART_Init+0x90>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_USART3_UART_Init+0x90>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001122:	f004 f8f9 	bl	8005318 <HAL_UART_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800112c:	f7ff fe80 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001134:	f005 f92c 	bl	8006390 <HAL_UARTEx_SetTxFifoThreshold>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800113e:	f7ff fe77 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001146:	f005 f961 	bl	800640c <HAL_UARTEx_SetRxFifoThreshold>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001150:	f7ff fe6e 	bl	8000e30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_USART3_UART_Init+0x90>)
 8001156:	f005 f8e2 	bl	800631e <HAL_UARTEx_DisableFifoMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001160:	f7ff fe66 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000334 	.word	0x24000334
 800116c:	40004800 	.word	0x40004800

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0bc      	sub	sp, #240	; 0xf0
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	22bc      	movs	r2, #188	; 0xbc
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fcfb 	bl	8006b8c <memset>
  if(uartHandle->Instance==USART2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_UART_MspInit+0x198>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d166      	bne.n	800126e <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fd4a 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ba:	f7ff fe39 	bl	8000e30 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a4a      	ldr	r2, [pc, #296]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_UART_MspInit+0x19c>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_UART_MspInit+0x19c>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_UART_MspInit+0x19c>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001218:	2308      	movs	r3, #8
 800121a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001230:	2307      	movs	r3, #7
 8001232:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800123a:	4619      	mov	r1, r3
 800123c:	4834      	ldr	r0, [pc, #208]	; (8001310 <HAL_UART_MspInit+0x1a0>)
 800123e:	f001 f8c5 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001242:	2320      	movs	r3, #32
 8001244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125a:	2307      	movs	r3, #7
 800125c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001264:	4619      	mov	r1, r3
 8001266:	482b      	ldr	r0, [pc, #172]	; (8001314 <HAL_UART_MspInit+0x1a4>)
 8001268:	f001 f8b0 	bl	80023cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800126c:	e047      	b.n	80012fe <HAL_UART_MspInit+0x18e>
  else if(uartHandle->Instance==USART3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_UART_MspInit+0x1a8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d142      	bne.n	80012fe <HAL_UART_MspInit+0x18e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fcde 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8001292:	f7ff fdcd 	bl	8000e30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_UART_MspInit+0x19c>)
 8001298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_UART_MspInit+0x19c>)
 800129e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_UART_MspInit+0x19c>)
 80012a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_UART_MspInit+0x19c>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_UART_MspInit+0x19c>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_UART_MspInit+0x19c>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ec:	2307      	movs	r3, #7
 80012ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012f6:	4619      	mov	r1, r3
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <HAL_UART_MspInit+0x1a4>)
 80012fa:	f001 f867 	bl	80023cc <HAL_GPIO_Init>
}
 80012fe:	bf00      	nop
 8001300:	37f0      	adds	r7, #240	; 0xf0
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40004400 	.word	0x40004400
 800130c:	58024400 	.word	0x58024400
 8001310:	58020000 	.word	0x58020000
 8001314:	58020c00 	.word	0x58020c00
 8001318:	40004800 	.word	0x40004800

0800131c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001324:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001328:	2209      	movs	r2, #9
 800132a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800132e:	2202      	movs	r2, #2
 8001330:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800133a:	2202      	movs	r2, #2
 800133c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001340:	2201      	movs	r2, #1
 8001342:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001352:	2201      	movs	r2, #1
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001358:	2201      	movs	r2, #1
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135e:	2200      	movs	r2, #0
 8001360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001364:	f001 fb23 	bl	80029ae <HAL_PCD_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800136e:	f7ff fd5f 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	240003c4 	.word	0x240003c4
 800137c:	40080000 	.word	0x40080000

08001380 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b8      	sub	sp, #224	; 0xe0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	22bc      	movs	r2, #188	; 0xbc
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f005 fbf3 	bl	8006b8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2f      	ldr	r2, [pc, #188]	; (8001468 <HAL_PCD_MspInit+0xe8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d156      	bne.n	800145e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80013b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fc40 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80013ce:	f7ff fd2f 	bl	8000e30 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013d2:	f001 fc6f 	bl	8002cb4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_PCD_MspInit+0xec>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a23      	ldr	r2, [pc, #140]	; (800146c <HAL_PCD_MspInit+0xec>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <HAL_PCD_MspInit+0xec>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013f4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80013f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800140e:	230a      	movs	r3, #10
 8001410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001418:	4619      	mov	r1, r3
 800141a:	4815      	ldr	r0, [pc, #84]	; (8001470 <HAL_PCD_MspInit+0xf0>)
 800141c:	f000 ffd6 	bl	80023cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_PCD_MspInit+0xf0>)
 800143c:	f000 ffc6 	bl	80023cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_PCD_MspInit+0xec>)
 8001442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001446:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_PCD_MspInit+0xec>)
 8001448:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800144c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_PCD_MspInit+0xec>)
 8001452:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	37e0      	adds	r7, #224	; 0xe0
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40080000 	.word	0x40080000
 800146c:	58024400 	.word	0x58024400
 8001470:	58020000 	.word	0x58020000

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001478:	f7ff fd5a 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f005 fb4f 	bl	8006b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff fc23 	bl	8000cf0 <main>
  bx  lr
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80014b8:	080075b8 	.word	0x080075b8
  ldr r2, =_sbss
 80014bc:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80014c0:	2400090c 	.word	0x2400090c

080014c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC3_IRQHandler>
	...

080014c8 <udebug_init>:
//



void udebug_init(UART_HandleTypeDef *what)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	udebug_uart_handler=what;		// for next prints
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <udebug_init+0x44>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	udebug_CommandReady=_FALSE;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <udebug_init+0x48>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	udebug_Command=0;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <udebug_init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
	uint32_t c;
	for(c=0;c<32;c++) udebug_RxBuffer[c]=0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e007      	b.n	80014f8 <udebug_init+0x30>
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <udebug_init+0x50>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b1f      	cmp	r3, #31
 80014fc:	d9f4      	bls.n	80014e8 <udebug_init+0x20>
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	240008d0 	.word	0x240008d0
 8001510:	240008f4 	.word	0x240008f4
 8001514:	240008f5 	.word	0x240008f5
 8001518:	240008d4 	.word	0x240008d4

0800151c <udebug>:
	udebug_CommandReady=_FALSE;
	return HAL_UART_Receive_IT(udebug_uart_handler, udebug_RxBuffer, char_count); //<- rearm  for RX : again 'til next rx complete
}
// output functions
void udebug(char *text)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001522:	af00      	add	r7, sp, #0
 8001524:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001528:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800152c:	6018      	str	r0, [r3, #0]
	uint8_t	obuf[1024];
	int len=sprintf((char*)obuf,text);
 800152e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001532:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8001536:	f107 020c 	add.w	r2, r7, #12
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	4610      	mov	r0, r2
 800153e:	f005 fb2d 	bl	8006b9c <siprintf>
 8001542:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	HAL_UART_Transmit(udebug_uart_handler,obuf,len,1000);
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <udebug+0x4c>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800154e:	b29a      	uxth	r2, r3
 8001550:	f107 010c 	add.w	r1, r7, #12
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	f003 ff2e 	bl	80053b8 <HAL_UART_Transmit>
}
 800155c:	bf00      	nop
 800155e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	240008d0 	.word	0x240008d0

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001572:	2003      	movs	r0, #3
 8001574:	f000 f982 	bl	800187c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001578:	f002 f990 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800157c:	4602      	mov	r2, r0
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_Init+0x68>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	0a1b      	lsrs	r3, r3, #8
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	4913      	ldr	r1, [pc, #76]	; (80015d8 <HAL_Init+0x6c>)
 800158a:	5ccb      	ldrb	r3, [r1, r3]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_Init+0x68>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_Init+0x6c>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_Init+0x70>)
 80015ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_Init+0x74>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f814 	bl	80015e4 <HAL_InitTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e002      	b.n	80015cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015c6:	f7ff fc39 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	58024400 	.word	0x58024400
 80015d8:	0800753c 	.word	0x0800753c
 80015dc:	24000004 	.word	0x24000004
 80015e0:	24000000 	.word	0x24000000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_InitTick+0x60>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e021      	b.n	800163c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_InitTick+0x64>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_InitTick+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f959 	bl	80018c6 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f931 	bl	8001892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x68>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2400000c 	.word	0x2400000c
 8001648:	24000000 	.word	0x24000000
 800164c:	24000008 	.word	0x24000008

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2400000c 	.word	0x2400000c
 8001674:	240008f8 	.word	0x240008f8

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	240008f8 	.word	0x240008f8

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2400000c 	.word	0x2400000c

080016d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetREVID+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0c1b      	lsrs	r3, r3, #16
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	5c001000 	.word	0x5c001000

080016f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58000400 	.word	0x58000400

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x40>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00
 800175c:	05fa0000 	.word	0x05fa0000

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001848:	d301      	bcc.n	800184e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184a:	2301      	movs	r3, #1
 800184c:	e00f      	b.n	800186e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <SysTick_Config+0x40>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001856:	210f      	movs	r1, #15
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f7ff ff8e 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x40>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x40>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff47 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b086      	sub	sp, #24
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff5e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb2 	bl	8001838 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e014      	b.n	800191a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	791b      	ldrb	r3, [r3, #4]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7fe fef1 	bl	80006e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	795b      	ldrb	r3, [r3, #5]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_DAC_ConfigChannel+0x18>
 8001938:	2302      	movs	r3, #2
 800193a:	e11d      	b.n	8001b78 <HAL_DAC_ConfigChannel+0x254>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2202      	movs	r2, #2
 8001946:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d174      	bne.n	8001a3a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001950:	f7ff fe92 	bl	8001678 <HAL_GetTick>
 8001954:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d134      	bne.n	80019c6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800195c:	e011      	b.n	8001982 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800195e:	f7ff fe8b 	bl	8001678 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d90a      	bls.n	8001982 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f043 0208 	orr.w	r2, r3, #8
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0fa      	b.n	8001b78 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001988:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_DAC_ConfigChannel+0x25c>)
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e6      	bne.n	800195e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fe7d 	bl	8001690 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	6992      	ldr	r2, [r2, #24]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
 80019a0:	e01e      	b.n	80019e0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019a2:	f7ff fe69 	bl	8001678 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d90a      	bls.n	80019c6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f043 0208 	orr.w	r2, r3, #8
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2203      	movs	r2, #3
 80019c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0d8      	b.n	8001b78 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dbe8      	blt.n	80019a2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fe5d 	bl	8001690 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	6992      	ldr	r2, [r2, #24]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	ea02 0103 	and.w	r1, r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	21ff      	movs	r1, #255	; 0xff
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	ea02 0103 	and.w	r1, r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d11d      	bne.n	8001a7e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	221f      	movs	r2, #31
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4013      	ands	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e00f      	b.n	8001ac8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	e008      	b.n	8001ac8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	e001      	b.n	8001ac8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	22c0      	movs	r2, #192	; 0xc0
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	400a      	ands	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20008000 	.word	0x20008000

08001b84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0cf      	b.n	8001d36 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d106      	bne.n	8001bae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2223      	movs	r2, #35	; 0x23
 8001ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7fe fe2f 	bl	800080c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <HAL_ETH_Init+0x1bc>)
 8001bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bb4:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <HAL_ETH_Init+0x1bc>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_ETH_Init+0x1bc>)
 8001bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7a1b      	ldrb	r3, [r3, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fd8b 	bl	80016f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001bda:	e003      	b.n	8001be4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001bdc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001be0:	f7ff fd86 	bl	80016f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_ETH_Init+0x1c0>)
 8001be6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bfe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c00:	f7ff fd3a 	bl	8001678 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c06:	e011      	b.n	8001c2c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c08:	f7ff fd36 	bl	8001678 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c16:	d909      	bls.n	8001c2c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	22e0      	movs	r2, #224	; 0xe0
 8001c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e084      	b.n	8001d36 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e4      	bne.n	8001c08 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f886 	bl	8001d50 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c44:	f001 ffa4 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <HAL_ETH_Init+0x1c4>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	0c9a      	lsrs	r2, r3, #18
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3a01      	subs	r2, #1
 8001c58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fa71 	bl	8002144 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c6e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c7e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	22e0      	movs	r2, #224	; 0xe0
 8001c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e049      	b.n	8001d36 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001caa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_ETH_Init+0x1c8>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6952      	ldr	r2, [r2, #20]
 8001cb6:	0051      	lsls	r1, r2, #1
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fad9 	bl	800227e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb1f 	bl	8002310 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	3305      	adds	r3, #5
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	021a      	lsls	r2, r3, #8
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	3303      	adds	r3, #3
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	061a      	lsls	r2, r3, #24
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d10:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001d1e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58000400 	.word	0x58000400
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	ffff8001 	.word	0xffff8001

08001d50 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d6a:	f001 ff11 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8001d6e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4a1e      	ldr	r2, [pc, #120]	; (8001dec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d908      	bls.n	8001d8a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d804      	bhi.n	8001d8a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e027      	b.n	8001dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d908      	bls.n	8001da4 <HAL_ETH_SetMDIOClockRange+0x54>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d204      	bcs.n	8001da4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e01a      	b.n	8001dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d303      	bcc.n	8001db4 <HAL_ETH_SetMDIOClockRange+0x64>
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d911      	bls.n	8001dd8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d908      	bls.n	8001dce <HAL_ETH_SetMDIOClockRange+0x7e>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_ETH_SetMDIOClockRange+0xac>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d804      	bhi.n	8001dce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e005      	b.n	8001dda <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	e000      	b.n	8001dda <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001dd8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	01312cff 	.word	0x01312cff
 8001df0:	02160ebf 	.word	0x02160ebf
 8001df4:	03938700 	.word	0x03938700
 8001df8:	05f5e0ff 	.word	0x05f5e0ff
 8001dfc:	08f0d17f 	.word	0x08f0d17f

08001e00 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001e12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001e1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7b1b      	ldrb	r3, [r3, #12]
 8001e20:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001e22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	7b5b      	ldrb	r3, [r3, #13]
 8001e28:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001e2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	7b9b      	ldrb	r3, [r3, #14]
 8001e30:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001e32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	7bdb      	ldrb	r3, [r3, #15]
 8001e38:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001e3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	7c12      	ldrb	r2, [r2, #16]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d102      	bne.n	8001e4a <ETH_SetMACConfig+0x4a>
 8001e44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e48:	e000      	b.n	8001e4c <ETH_SetMACConfig+0x4c>
 8001e4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001e4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	7c52      	ldrb	r2, [r2, #17]
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	d102      	bne.n	8001e5c <ETH_SetMACConfig+0x5c>
 8001e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e5a:	e000      	b.n	8001e5e <ETH_SetMACConfig+0x5e>
 8001e5c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001e5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	7c9b      	ldrb	r3, [r3, #18]
 8001e64:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001e66:	431a      	orrs	r2, r3
               macconf->Speed |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001e6c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001e72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	7f1b      	ldrb	r3, [r3, #28]
 8001e78:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001e7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	7f5b      	ldrb	r3, [r3, #29]
 8001e80:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001e82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	7f92      	ldrb	r2, [r2, #30]
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d102      	bne.n	8001e92 <ETH_SetMACConfig+0x92>
 8001e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e90:	e000      	b.n	8001e94 <ETH_SetMACConfig+0x94>
 8001e92:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001e94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	7fdb      	ldrb	r3, [r3, #31]
 8001e9a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001e9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d102      	bne.n	8001eae <ETH_SetMACConfig+0xae>
 8001ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eac:	e000      	b.n	8001eb0 <ETH_SetMACConfig+0xb0>
 8001eae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001eb0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001eb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ebe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001ec0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b56      	ldr	r3, [pc, #344]	; (800202c <ETH_SetMACConfig+0x22c>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	68f9      	ldr	r1, [r7, #12]
 8001eda:	430b      	orrs	r3, r1
 8001edc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001eec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ef4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ef6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001efe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001f00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	d102      	bne.n	8001f12 <ETH_SetMACConfig+0x112>
 8001f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f10:	e000      	b.n	8001f14 <ETH_SetMACConfig+0x114>
 8001f12:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001f14:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4b42      	ldr	r3, [pc, #264]	; (8002030 <ETH_SetMACConfig+0x230>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	68f9      	ldr	r1, [r7, #12]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f38:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <ETH_SetMACConfig+0x234>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	430b      	orrs	r3, r1
 8001f54:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001f5c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	d101      	bne.n	8001f72 <ETH_SetMACConfig+0x172>
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	e000      	b.n	8001f74 <ETH_SetMACConfig+0x174>
 8001f72:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001f74:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f86:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001f9c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001fa4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f023 0103 	bic.w	r1, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001fca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	d101      	bne.n	8001fee <ETH_SetMACConfig+0x1ee>
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	e000      	b.n	8001ff0 <ETH_SetMACConfig+0x1f0>
 8001fee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ff0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ff8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ffa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002002:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002010:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	430a      	orrs	r2, r1
 800201c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	00048083 	.word	0x00048083
 8002030:	c0f88000 	.word	0xc0f88000
 8002034:	fffffef0 	.word	0xfffffef0

08002038 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b38      	ldr	r3, [pc, #224]	; (8002130 <ETH_SetDMAConfig+0xf8>)
 800204e:	4013      	ands	r3, r2
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	6811      	ldr	r1, [r2, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	430b      	orrs	r3, r1
 800205a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800205e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800206a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	7b1b      	ldrb	r3, [r3, #12]
 8002070:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <ETH_SetDMAConfig+0xfc>)
 8002082:	4013      	ands	r3, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	68f9      	ldr	r1, [r7, #12]
 800208a:	430b      	orrs	r3, r1
 800208c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002090:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7b5b      	ldrb	r3, [r3, #13]
 8002096:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <ETH_SetDMAConfig+0x100>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	7d1b      	ldrb	r3, [r3, #20]
 80020c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80020ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	7f5b      	ldrb	r3, [r3, #29]
 80020d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <ETH_SetDMAConfig+0x104>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	430b      	orrs	r3, r1
 80020ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
 80020fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <ETH_SetDMAConfig+0x108>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	68f9      	ldr	r1, [r7, #12]
 800211a:	430b      	orrs	r3, r1
 800211c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002120:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	ffff87fd 	.word	0xffff87fd
 8002134:	ffff2ffe 	.word	0xffff2ffe
 8002138:	fffec000 	.word	0xfffec000
 800213c:	ffc0efef 	.word	0xffc0efef
 8002140:	7fc0ffff 	.word	0x7fc0ffff

08002144 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0a4      	sub	sp, #144	; 0x90
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002152:	2300      	movs	r3, #0
 8002154:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800217a:	2301      	movs	r3, #1
 800217c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800218c:	2300      	movs	r3, #0
 800218e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800219c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80021a8:	2300      	movs	r3, #0
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80021be:	2300      	movs	r3, #0
 80021c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80021c6:	2300      	movs	r3, #0
 80021c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80021dc:	2320      	movs	r3, #32
 80021de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80021ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002200:	2302      	movs	r3, #2
 8002202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800221e:	2300      	movs	r3, #0
 8002220:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff fde6 	bl	8001e00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002234:	2301      	movs	r3, #1
 8002236:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800224e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002252:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002258:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800225c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002264:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fee1 	bl	8002038 <ETH_SetDMAConfig>
}
 8002276:	bf00      	nop
 8002278:	3790      	adds	r7, #144	; 0x90
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e01d      	b.n	80022c8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68d9      	ldr	r1, [r3, #12]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	3206      	adds	r2, #6
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d9de      	bls.n	800228c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	461a      	mov	r2, r3
 80022de:	2303      	movs	r3, #3
 80022e0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e023      	b.n	8002366 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	3212      	adds	r2, #18
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d9d8      	bls.n	800231e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002392:	461a      	mov	r2, r3
 8002394:	2303      	movs	r3, #3
 8002396:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <HAL_GPIO_Init+0x234>)
 80023dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023de:	e194      	b.n	800270a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8186 	beq.w	8002704 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d005      	beq.n	8002410 <HAL_GPIO_Init+0x44>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d130      	bne.n	8002472 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002446:	2201      	movs	r2, #1
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0201 	and.w	r2, r3, #1
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b03      	cmp	r3, #3
 800247c:	d017      	beq.n	80024ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d123      	bne.n	8002502 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0203 	and.w	r2, r3, #3
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80e0 	beq.w	8002704 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_GPIO_Init+0x238>)
 8002546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800254a:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_GPIO_Init+0x238>)
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_GPIO_Init+0x238>)
 8002556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a29      	ldr	r2, [pc, #164]	; (8002608 <HAL_GPIO_Init+0x23c>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <HAL_GPIO_Init+0x240>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d052      	beq.n	8002634 <HAL_GPIO_Init+0x268>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_GPIO_Init+0x244>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d031      	beq.n	80025fa <HAL_GPIO_Init+0x22e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <HAL_GPIO_Init+0x248>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x22a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_GPIO_Init+0x24c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x226>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1c      	ldr	r2, [pc, #112]	; (800261c <HAL_GPIO_Init+0x250>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x222>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_GPIO_Init+0x254>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x21e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1a      	ldr	r2, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x258>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x21a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_GPIO_Init+0x25c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x216>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_GPIO_Init+0x260>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x212>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_GPIO_Init+0x264>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x20e>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e02d      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025da:	230a      	movs	r3, #10
 80025dc:	e02b      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025de:	2308      	movs	r3, #8
 80025e0:	e029      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025e2:	2307      	movs	r3, #7
 80025e4:	e027      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e025      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025ea:	2305      	movs	r3, #5
 80025ec:	e023      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025ee:	2304      	movs	r3, #4
 80025f0:	e021      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025f2:	2303      	movs	r3, #3
 80025f4:	e01f      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e01d      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01b      	b.n	8002636 <HAL_GPIO_Init+0x26a>
 80025fe:	bf00      	nop
 8002600:	58000080 	.word	0x58000080
 8002604:	58024400 	.word	0x58024400
 8002608:	58000400 	.word	0x58000400
 800260c:	58020000 	.word	0x58020000
 8002610:	58020400 	.word	0x58020400
 8002614:	58020800 	.word	0x58020800
 8002618:	58020c00 	.word	0x58020c00
 800261c:	58021000 	.word	0x58021000
 8002620:	58021400 	.word	0x58021400
 8002624:	58021800 	.word	0x58021800
 8002628:	58021c00 	.word	0x58021c00
 800262c:	58022000 	.word	0x58022000
 8002630:	58022400 	.word	0x58022400
 8002634:	2300      	movs	r3, #0
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002646:	4938      	ldr	r1, [pc, #224]	; (8002728 <HAL_GPIO_Init+0x35c>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800267a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f ae63 	bne.w	80023e0 <HAL_GPIO_Init+0x14>
  }
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	3724      	adds	r7, #36	; 0x24
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	58000400 	.word	0x58000400

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fa4e 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e006      	b.n	80027e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d104      	bne.n	80027fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_I2C_Init+0x11c>)
 8002806:	430b      	orrs	r3, r1
 8002808:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002818:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69d9      	ldr	r1, [r3, #28]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	02008000 	.word	0x02008000

08002880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d138      	bne.n	8002908 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e032      	b.n	800290a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	; 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b20      	cmp	r3, #32
 800292a:	d139      	bne.n	80029a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002936:	2302      	movs	r3, #2
 8002938:	e033      	b.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2224      	movs	r2, #36	; 0x24
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002968:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b0:	b08f      	sub	sp, #60	; 0x3c
 80029b2:	af0a      	add	r7, sp, #40	; 0x28
 80029b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e116      	b.n	8002bee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fcd0 	bl	8001380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fdfe 	bl	8006600 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	687e      	ldr	r6, [r7, #4]
 8002a0c:	466d      	mov	r5, sp
 8002a0e:	f106 0410 	add.w	r4, r6, #16
 8002a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a22:	1d33      	adds	r3, r6, #4
 8002a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a26:	6838      	ldr	r0, [r7, #0]
 8002a28:	f003 fd7c 	bl	8006524 <USB_CoreInit>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0d7      	b.n	8002bee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fdec 	bl	8006622 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e04a      	b.n	8002ae6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	333d      	adds	r3, #61	; 0x3d
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a64:	7bfa      	ldrb	r2, [r7, #15]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	333c      	adds	r3, #60	; 0x3c
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
 8002a7c:	b298      	uxth	r0, r3
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3344      	adds	r3, #68	; 0x44
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3340      	adds	r3, #64	; 0x40
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3348      	adds	r3, #72	; 0x48
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	; 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3354      	adds	r3, #84	; 0x54
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d3af      	bcc.n	8002a50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	e044      	b.n	8002b80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3b5      	bcc.n	8002af6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	687e      	ldr	r6, [r7, #4]
 8002b92:	466d      	mov	r5, sp
 8002b94:	f106 0410 	add.w	r4, r6, #16
 8002b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ba8:	1d33      	adds	r3, r6, #4
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f003 fd85 	bl	80066bc <USB_DevInit>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e014      	b.n	8002bee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d102      	bne.n	8002be2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f80b 	bl	8002bf8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 ff43 	bl	8006a72 <USB_DevDisconnect>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_PCDEx_ActivateLPM+0x44>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	10000003 	.word	0x10000003

08002c40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d00a      	beq.n	8002c6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e01f      	b.n	8002ca6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e01d      	b.n	8002ca6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	490f      	ldr	r1, [pc, #60]	; (8002cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c7a:	f7fe fcfd 	bl	8001678 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c80:	e009      	b.n	8002c96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c82:	f7fe fcf9 	bl	8001678 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c90:	d901      	bls.n	8002c96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	58024800 	.word	0x58024800

08002cb4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a04      	ldr	r2, [pc, #16]	; (8002cd0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	60d3      	str	r3, [r2, #12]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	58024800 	.word	0x58024800

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	; 0x30
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f000 bc1d 	b.w	8003522 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8087 	beq.w	8002e04 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b99      	ldr	r3, [pc, #612]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d00:	4b96      	ldr	r3, [pc, #600]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x48>
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	d110      	bne.n	8002d34 <HAL_RCC_OscConfig+0x60>
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d10b      	bne.n	8002d34 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	4b8f      	ldr	r3, [pc, #572]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d06c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x12e>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d168      	bne.n	8002e02 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e3f6      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x78>
 8002d3e:	4b87      	ldr	r3, [pc, #540]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a86      	ldr	r2, [pc, #536]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e02e      	b.n	8002daa <HAL_RCC_OscConfig+0xd6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCC_OscConfig+0x9a>
 8002d54:	4b81      	ldr	r3, [pc, #516]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a80      	ldr	r2, [pc, #512]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b7e      	ldr	r3, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a7d      	ldr	r2, [pc, #500]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e01d      	b.n	8002daa <HAL_RCC_OscConfig+0xd6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_OscConfig+0xbe>
 8002d78:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a77      	ldr	r2, [pc, #476]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b75      	ldr	r3, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a74      	ldr	r2, [pc, #464]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e00b      	b.n	8002daa <HAL_RCC_OscConfig+0xd6>
 8002d92:	4b72      	ldr	r3, [pc, #456]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a71      	ldr	r2, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d013      	beq.n	8002dda <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fc61 	bl	8001678 <HAL_GetTick>
 8002db6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dba:	f7fe fc5d 	bl	8001678 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b64      	cmp	r3, #100	; 0x64
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e3aa      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	4b63      	ldr	r3, [pc, #396]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0xe6>
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fc4d 	bl	8001678 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de2:	f7fe fc49 	bl	8001678 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e396      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x10e>
 8002e00:	e000      	b.n	8002e04 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80cb 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e12:	4b52      	ldr	r3, [pc, #328]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_RCC_OscConfig+0x164>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b18      	cmp	r3, #24
 8002e2c:	d156      	bne.n	8002edc <HAL_RCC_OscConfig+0x208>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d151      	bne.n	8002edc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e38:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_OscConfig+0x17c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e368      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 0219 	bic.w	r2, r3, #25
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e62:	f7fe fc09 	bl	8001678 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fc05 	bl	8001678 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e352      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	f7fe fc26 	bl	80016d8 <HAL_GetREVID>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d817      	bhi.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d108      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1dc>
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eae:	e07b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	4927      	ldr	r1, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec4:	e070      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	4921      	ldr	r1, [pc, #132]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eda:	e065      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d048      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 0219 	bic.w	r2, r3, #25
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	491a      	ldr	r1, [pc, #104]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fbbf 	bl	8001678 <HAL_GetTick>
 8002efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe fbbb 	bl	8001678 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e308      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	f7fe fbdc 	bl	80016d8 <HAL_GetREVID>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d81a      	bhi.n	8002f60 <HAL_RCC_OscConfig+0x28c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d108      	bne.n	8002f44 <HAL_RCC_OscConfig+0x270>
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	6053      	str	r3, [r2, #4]
 8002f42:	e031      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	031b      	lsls	r3, r3, #12
 8002f52:	4902      	ldr	r1, [pc, #8]	; (8002f5c <HAL_RCC_OscConfig+0x288>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e026      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
 8002f5a:	bf00      	nop
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	4b9a      	ldr	r3, [pc, #616]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	4997      	ldr	r1, [pc, #604]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b95      	ldr	r3, [pc, #596]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a94      	ldr	r2, [pc, #592]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fb79 	bl	8001678 <HAL_GetTick>
 8002f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fb75 	bl	8001678 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e2c2      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f9c:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a9 	beq.w	8003108 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b85      	ldr	r3, [pc, #532]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc0:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d007      	beq.n	8002fdc <HAL_RCC_OscConfig+0x308>
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b18      	cmp	r3, #24
 8002fd0:	d13a      	bne.n	8003048 <HAL_RCC_OscConfig+0x374>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d135      	bne.n	8003048 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x320>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e296      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ff4:	f7fe fb70 	bl	80016d8 <HAL_GetREVID>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d817      	bhi.n	8003032 <HAL_RCC_OscConfig+0x35e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2b20      	cmp	r3, #32
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x348>
 800300a:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003012:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003014:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003018:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800301a:	e075      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800301c:	4b6b      	ldr	r3, [pc, #428]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	069b      	lsls	r3, r3, #26
 800302a:	4968      	ldr	r1, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003030:	e06a      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003032:	4b66      	ldr	r3, [pc, #408]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	4962      	ldr	r1, [pc, #392]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003046:	e05f      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d042      	beq.n	80030d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003050:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fb0c 	bl	8001678 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003064:	f7fe fb08 	bl	8001678 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e255      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003082:	f7fe fb29 	bl	80016d8 <HAL_GetREVID>
 8003086:	4603      	mov	r3, r0
 8003088:	f241 0203 	movw	r2, #4099	; 0x1003
 800308c:	4293      	cmp	r3, r2
 800308e:	d817      	bhi.n	80030c0 <HAL_RCC_OscConfig+0x3ec>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	2b20      	cmp	r3, #32
 8003096:	d108      	bne.n	80030aa <HAL_RCC_OscConfig+0x3d6>
 8003098:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80030a0:	4a4a      	ldr	r2, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80030a6:	6053      	str	r3, [r2, #4]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
 80030aa:	4b48      	ldr	r3, [pc, #288]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	069b      	lsls	r3, r3, #26
 80030b8:	4944      	ldr	r1, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
 80030be:	e023      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	061b      	lsls	r3, r3, #24
 80030ce:	493f      	ldr	r1, [pc, #252]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
 80030d4:	e018      	b.n	8003108 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030d6:	4b3d      	ldr	r3, [pc, #244]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3c      	ldr	r2, [pc, #240]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fac9 	bl	8001678 <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80030ea:	f7fe fac5 	bl	8001678 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e212      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030fc:	4b33      	ldr	r3, [pc, #204]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d036      	beq.n	8003182 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d019      	beq.n	8003150 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe faa6 	bl	8001678 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe faa2 	bl	8001678 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1ef      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x45c>
 800314e:	e018      	b.n	8003182 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003150:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fa8c 	bl	8001678 <HAL_GetTick>
 8003160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe fa88 	bl	8001678 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1d5      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b00      	cmp	r3, #0
 800318c:	d039      	beq.n	8003202 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 800319c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fa69 	bl	8001678 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031aa:	f7fe fa65 	bl	8001678 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1b2      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_OscConfig+0x4f8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x4d6>
 80031c8:	e01b      	b.n	8003202 <HAL_RCC_OscConfig+0x52e>
 80031ca:	bf00      	nop
 80031cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d0:	4b9b      	ldr	r3, [pc, #620]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a9a      	ldr	r2, [pc, #616]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80031d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031dc:	f7fe fa4c 	bl	8001678 <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80031e4:	f7fe fa48 	bl	8001678 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e195      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031f6:	4b92      	ldr	r3, [pc, #584]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8081 	beq.w	8003312 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003210:	4b8c      	ldr	r3, [pc, #560]	; (8003444 <HAL_RCC_OscConfig+0x770>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a8b      	ldr	r2, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x770>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321c:	f7fe fa2c 	bl	8001678 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fe fa28 	bl	8001678 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e175      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003236:	4b83      	ldr	r3, [pc, #524]	; (8003444 <HAL_RCC_OscConfig+0x770>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x584>
 800324a:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	e02d      	b.n	80032b4 <HAL_RCC_OscConfig+0x5e0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x5a6>
 8003260:	4b77      	ldr	r3, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a76      	ldr	r2, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003266:	f023 0301 	bic.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	4b74      	ldr	r3, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a73      	ldr	r2, [pc, #460]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	e01c      	b.n	80032b4 <HAL_RCC_OscConfig+0x5e0>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x5c8>
 8003282:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	6713      	str	r3, [r2, #112]	; 0x70
 800328e:	4b6c      	ldr	r3, [pc, #432]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a6b      	ldr	r2, [pc, #428]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0x5e0>
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a67      	ldr	r2, [pc, #412]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a64      	ldr	r2, [pc, #400]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80032ae:	f023 0304 	bic.w	r3, r3, #4
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe f9dc 	bl	8001678 <HAL_GetTick>
 80032c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c2:	e00a      	b.n	80032da <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe f9d8 	bl	8001678 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e123      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032da:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ee      	beq.n	80032c4 <HAL_RCC_OscConfig+0x5f0>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fe f9c6 	bl	8001678 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f7fe f9c2 	bl	8001678 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e10d      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003306:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ee      	bne.n	80032f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8102 	beq.w	8003520 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800331c:	4b48      	ldr	r3, [pc, #288]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003324:	2b18      	cmp	r3, #24
 8003326:	f000 80bd 	beq.w	80034a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b02      	cmp	r3, #2
 8003330:	f040 809e 	bne.w	8003470 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a41      	ldr	r2, [pc, #260]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800333a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe f99a 	bl	8001678 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f996 	bl	8001678 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0e3      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x774>)
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	430a      	orrs	r2, r1
 800337a:	4931      	ldr	r1, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	628b      	str	r3, [r1, #40]	; 0x28
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	3b01      	subs	r3, #1
 8003386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	3b01      	subs	r3, #1
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	b29b      	uxth	r3, r3
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	3b01      	subs	r3, #1
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	3b01      	subs	r3, #1
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033b0:	4923      	ldr	r1, [pc, #140]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033c2:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c6:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCC_OscConfig+0x778>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ce:	00d2      	lsls	r2, r2, #3
 80033d0:	491b      	ldr	r1, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f023 020c 	bic.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4917      	ldr	r1, [pc, #92]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f023 0202 	bic.w	r2, r3, #2
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	4912      	ldr	r1, [pc, #72]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800340c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <HAL_RCC_OscConfig+0x76c>)
 8003430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe f91f 	bl	8001678 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343c:	e011      	b.n	8003462 <HAL_RCC_OscConfig+0x78e>
 800343e:	bf00      	nop
 8003440:	58024400 	.word	0x58024400
 8003444:	58024800 	.word	0x58024800
 8003448:	fffffc0c 	.word	0xfffffc0c
 800344c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe f912 	bl	8001678 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e05f      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003462:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCC_OscConfig+0x858>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x77c>
 800346e:	e057      	b.n	8003520 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003470:	4b2e      	ldr	r3, [pc, #184]	; (800352c <HAL_RCC_OscConfig+0x858>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_RCC_OscConfig+0x858>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe f8fc 	bl	8001678 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe f8f8 	bl	8001678 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_OscConfig+0x858>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x7b0>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCC_OscConfig+0x858>)
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x858>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d031      	beq.n	800351c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d12a      	bne.n	800351c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d122      	bne.n	800351c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	0a5b      	lsrs	r3, r3, #9
 80034ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	0c1b      	lsrs	r3, r3, #16
 80034fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	0e1b      	lsrs	r3, r3, #24
 800350e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400

08003530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e19c      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d910      	bls.n	8003574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b87      	ldr	r3, [pc, #540]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	4985      	ldr	r1, [pc, #532]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b83      	ldr	r3, [pc, #524]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e184      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	4b7b      	ldr	r3, [pc, #492]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800358c:	429a      	cmp	r2, r3
 800358e:	d908      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003590:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4975      	ldr	r1, [pc, #468]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	496a      	ldr	r1, [pc, #424]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	4b64      	ldr	r3, [pc, #400]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d908      	bls.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	495e      	ldr	r1, [pc, #376]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003616:	429a      	cmp	r2, r3
 8003618:	d908      	bls.n	800362c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4953      	ldr	r1, [pc, #332]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003628:	4313      	orrs	r3, r2
 800362a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	429a      	cmp	r2, r3
 8003646:	d908      	bls.n	800365a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f023 020f 	bic.w	r2, r3, #15
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4947      	ldr	r1, [pc, #284]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003656:	4313      	orrs	r3, r2
 8003658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d055      	beq.n	8003712 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003666:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4940      	ldr	r1, [pc, #256]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003674:	4313      	orrs	r3, r2
 8003676:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003680:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d121      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003698:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d115      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0ea      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0de      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0d6      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f023 0207 	bic.w	r2, r3, #7
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fd ffc9 	bl	8001678 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ea:	f7fd ffc5 	bl	8001678 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0be      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003700:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	429a      	cmp	r2, r3
 8003710:	d1eb      	bne.n	80036ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	429a      	cmp	r2, r3
 800372c:	d208      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f023 020f 	bic.w	r2, r3, #15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	490e      	ldr	r1, [pc, #56]	; (8003774 <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d214      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 020f 	bic.w	r2, r3, #15
 8003756:	4906      	ldr	r1, [pc, #24]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_ClockConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e086      	b.n	800387e <HAL_RCC_ClockConfig+0x34e>
 8003770:	52002000 	.word	0x52002000
 8003774:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d010      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003790:	429a      	cmp	r2, r3
 8003792:	d208      	bcs.n	80037a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4939      	ldr	r1, [pc, #228]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d010      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	4b34      	ldr	r3, [pc, #208]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037be:	429a      	cmp	r2, r3
 80037c0:	d208      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80037c2:	4b31      	ldr	r3, [pc, #196]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	492e      	ldr	r1, [pc, #184]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d208      	bcs.n	8003802 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800381a:	429a      	cmp	r2, r3
 800381c:	d208      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4917      	ldr	r1, [pc, #92]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 800382c:	4313      	orrs	r3, r2
 800382e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003830:	f000 f834 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003834:	4602      	mov	r2, r0
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	4912      	ldr	r1, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003842:	5ccb      	ldrb	r3, [r1, r3]
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x358>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a0d      	ldr	r2, [pc, #52]	; (800388c <HAL_RCC_ClockConfig+0x35c>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x360>)
 8003866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003868:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x364>)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_ClockConfig+0x368>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd feb6 	bl	80015e4 <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
 800387a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	0800753c 	.word	0x0800753c
 8003890:	24000004 	.word	0x24000004
 8003894:	24000000 	.word	0x24000000
 8003898:	24000008 	.word	0x24000008

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b089      	sub	sp, #36	; 0x24
 80038a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a2:	4bb3      	ldr	r3, [pc, #716]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038aa:	2b18      	cmp	r3, #24
 80038ac:	f200 8155 	bhi.w	8003b5a <HAL_RCC_GetSysClockFreq+0x2be>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	08003b5b 	.word	0x08003b5b
 80038c0:	08003b5b 	.word	0x08003b5b
 80038c4:	08003b5b 	.word	0x08003b5b
 80038c8:	08003b5b 	.word	0x08003b5b
 80038cc:	08003b5b 	.word	0x08003b5b
 80038d0:	08003b5b 	.word	0x08003b5b
 80038d4:	08003b5b 	.word	0x08003b5b
 80038d8:	08003943 	.word	0x08003943
 80038dc:	08003b5b 	.word	0x08003b5b
 80038e0:	08003b5b 	.word	0x08003b5b
 80038e4:	08003b5b 	.word	0x08003b5b
 80038e8:	08003b5b 	.word	0x08003b5b
 80038ec:	08003b5b 	.word	0x08003b5b
 80038f0:	08003b5b 	.word	0x08003b5b
 80038f4:	08003b5b 	.word	0x08003b5b
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003b5b 	.word	0x08003b5b
 8003900:	08003b5b 	.word	0x08003b5b
 8003904:	08003b5b 	.word	0x08003b5b
 8003908:	08003b5b 	.word	0x08003b5b
 800390c:	08003b5b 	.word	0x08003b5b
 8003910:	08003b5b 	.word	0x08003b5b
 8003914:	08003b5b 	.word	0x08003b5b
 8003918:	0800394f 	.word	0x0800394f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800391c:	4b94      	ldr	r3, [pc, #592]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003928:	4b91      	ldr	r3, [pc, #580]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	4a90      	ldr	r2, [pc, #576]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800393a:	e111      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800393c:	4b8d      	ldr	r3, [pc, #564]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800393e:	61bb      	str	r3, [r7, #24]
    break;
 8003940:	e10e      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003942:	4b8d      	ldr	r3, [pc, #564]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003944:	61bb      	str	r3, [r7, #24]
    break;
 8003946:	e10b      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003948:	4b8c      	ldr	r3, [pc, #560]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800394a:	61bb      	str	r3, [r7, #24]
    break;
 800394c:	e108      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003958:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003962:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003964:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800396e:	4b80      	ldr	r3, [pc, #512]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80e1 	beq.w	8003b54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b02      	cmp	r3, #2
 8003996:	f000 8083 	beq.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x204>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f200 80a1 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x248>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x114>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d056      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x1c0>
 80039ae:	e099      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b0:	4b6f      	ldr	r3, [pc, #444]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02d      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039bc:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	08db      	lsrs	r3, r3, #3
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	4a6b      	ldr	r2, [pc, #428]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e6:	4b62      	ldr	r3, [pc, #392]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a16:	e087      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5a:	e065      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9e:	e043      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae2:	e021      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	0a5b      	lsrs	r3, r3, #9
 8003b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b32:	3301      	adds	r3, #1
 8003b34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4c:	ee17 3a90 	vmov	r3, s15
 8003b50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
    break;
 8003b58:	e002      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b5c:	61bb      	str	r3, [r7, #24]
    break;
 8003b5e:	bf00      	nop
  }

  return sysclockfreq;
 8003b60:	69bb      	ldr	r3, [r7, #24]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
 8003b74:	03d09000 	.word	0x03d09000
 8003b78:	003d0900 	.word	0x003d0900
 8003b7c:	007a1200 	.word	0x007a1200
 8003b80:	46000000 	.word	0x46000000
 8003b84:	4c742400 	.word	0x4c742400
 8003b88:	4a742400 	.word	0x4a742400
 8003b8c:	4af42400 	.word	0x4af42400

08003b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b96:	f7ff fe81 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490f      	ldr	r1, [pc, #60]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bca:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bce:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_RCC_GetHCLKFreq+0x5c>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	58024400 	.word	0x58024400
 8003be4:	0800753c 	.word	0x0800753c
 8003be8:	24000004 	.word	0x24000004
 8003bec:	24000000 	.word	0x24000000

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bf4:	f7ff ffcc 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4904      	ldr	r1, [pc, #16]	; (8003c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	58024400 	.word	0x58024400
 8003c18:	0800753c 	.word	0x0800753c

08003c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c20:	f7ff ffb6 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	4904      	ldr	r1, [pc, #16]	; (8003c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	58024400 	.word	0x58024400
 8003c44:	0800753c 	.word	0x0800753c

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c54:	2300      	movs	r3, #0
 8003c56:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d03f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c72:	d824      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c78:	d018      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c7e:	d81e      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c88:	d007      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c8a:	e018      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4aa2      	ldr	r2, [pc, #648]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003c98:	e015      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 f9d5 	bl	8005050 <RCCEx_PLL2_Config>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003caa:	e00c      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3324      	adds	r3, #36	; 0x24
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 fa7e 	bl	80051b4 <RCCEx_PLL3_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ccc:	4b93      	ldr	r3, [pc, #588]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd8:	4990      	ldr	r1, [pc, #576]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8003cde:	e001      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d03d      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d826      	bhi.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d15 	.word	0x08003d15
 8003d04:	08003d23 	.word	0x08003d23
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d14:	4b81      	ldr	r3, [pc, #516]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d20:	e015      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f991 	bl	8005050 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d32:	e00c      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fa3a 	bl	80051b4 <RCCEx_PLL3_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d44:	e003      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	f023 0207 	bic.w	r2, r3, #7
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	496e      	ldr	r1, [pc, #440]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	650b      	str	r3, [r1, #80]	; 0x50
 8003d66:	e001      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d042      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d02b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d825      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d88:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8a:	d028      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8e:	d821      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d016      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d81d      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d007      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003da0:	e018      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da2:	4b5e      	ldr	r3, [pc, #376]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dae:	e017      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f94a 	bl	8005050 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f9f3 	bl	80051b4 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dd2:	e005      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd8:	e002      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e000      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003de6:	4b4d      	ldr	r3, [pc, #308]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	494a      	ldr	r1, [pc, #296]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	650b      	str	r3, [r1, #80]	; 0x50
 8003df8:	e001      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d049      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e14:	d030      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e1a:	d82a      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e20:	d02c      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003e22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e26:	d824      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2c:	d018      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e32:	d81e      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e3c:	d007      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a35      	ldr	r2, [pc, #212]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e017      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 f8fb 	bl	8005050 <RCCEx_PLL2_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e5e:	e00e      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3324      	adds	r3, #36	; 0x24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f9a4 	bl	80051b4 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e70:	e005      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e92:	4922      	ldr	r1, [pc, #136]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	658b      	str	r3, [r1, #88]	; 0x58
 8003e98:	e001      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
 8003e9c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d04b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb4:	d030      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003eb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eba:	d82a      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ec0:	d02e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ec6:	d824      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ecc:	d018      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ed2:	d81e      	bhi.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d007      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003ede:	e018      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eec:	e019      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f8ab 	bl	8005050 <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003efe:	e010      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	3324      	adds	r3, #36	; 0x24
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 f954 	bl	80051b4 <RCCEx_PLL3_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f10:	e007      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]
      break;
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f1c:	58024400 	.word	0x58024400
      break;
 8003f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f28:	4b99      	ldr	r3, [pc, #612]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f36:	4996      	ldr	r1, [pc, #600]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3c:	e001      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d032      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d01c      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d817      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d813      	bhi.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d10f      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	4a88      	ldr	r2, [pc, #544]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f76:	e00e      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 f866 	bl	8005050 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f88:	e005      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d109      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	4979      	ldr	r1, [pc, #484]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003fae:	e001      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d047      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc8:	d030      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fce:	d82a      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd4:	d02c      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fda:	d824      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe0:	d018      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe6:	d81e      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d007      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003ff2:	e018      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff4:	4b66      	ldr	r3, [pc, #408]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4a65      	ldr	r2, [pc, #404]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004000:	e017      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f001 f821 	bl	8005050 <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004012:	e00e      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f001 f8ca 	bl	80051b4 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004024:	e005      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004038:	4b55      	ldr	r3, [pc, #340]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004044:	4952      	ldr	r1, [pc, #328]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004046:	4313      	orrs	r3, r2
 8004048:	650b      	str	r3, [r1, #80]	; 0x50
 800404a:	e001      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d049      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004064:	d02e      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406a:	d828      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x476>
 800406c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004070:	d02a      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004076:	d822      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800407c:	d026      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800407e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004082:	d81c      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d010      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x464>
 800408a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408e:	d816      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d111      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 ffd5 	bl	8005050 <RCCEx_PLL2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040aa:	e012      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3324      	adds	r3, #36	; 0x24
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 f87e 	bl	80051b4 <RCCEx_PLL3_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040bc:	e009      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
      break;
 80040c2:	e006      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040c4:	bf00      	nop
 80040c6:	e004      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040c8:	bf00      	nop
 80040ca:	e002      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80040d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d109      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040dc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	492a      	ldr	r1, [pc, #168]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	650b      	str	r3, [r1, #80]	; 0x50
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d04d      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004106:	d02e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410c:	d828      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d02a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d822      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800411a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800411e:	d026      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004124:	d81c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412a:	d010      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004130:	d816      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 ff84 	bl	8005050 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800414c:	e012      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f001 f82d 	bl	80051b4 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004188:	4901      	ldr	r1, [pc, #4]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800418a:	4313      	orrs	r3, r2
 800418c:	658b      	str	r3, [r1, #88]	; 0x58
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02f      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d00e      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80041ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b2:	d814      	bhi.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x596>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80041b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041bc:	d10f      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041be:	4baf      	ldr	r3, [pc, #700]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4aae      	ldr	r2, [pc, #696]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041ca:	e00c      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 ff3c 	bl	8005050 <RCCEx_PLL2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
      break;
 80041e2:	e000      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80041e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041ec:	4ba3      	ldr	r3, [pc, #652]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f8:	49a0      	ldr	r1, [pc, #640]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	650b      	str	r3, [r1, #80]	; 0x50
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d032      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	2b03      	cmp	r3, #3
 8004216:	d81b      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004257 	.word	0x08004257
 8004224:	08004231 	.word	0x08004231
 8004228:	0800423f 	.word	0x0800423f
 800422c:	08004257 	.word	0x08004257
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004230:	4b92      	ldr	r3, [pc, #584]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4a91      	ldr	r2, [pc, #580]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800423a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800423c:	e00c      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 ff03 	bl	8005050 <RCCEx_PLL2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800425e:	4b87      	ldr	r3, [pc, #540]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4984      	ldr	r1, [pc, #528]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800426c:	4313      	orrs	r3, r2
 800426e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004270:	e001      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8086 	beq.w	8004390 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004284:	4b7e      	ldr	r3, [pc, #504]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7d      	ldr	r2, [pc, #500]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004290:	f7fd f9f2 	bl	8001678 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004296:	e009      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fd f9ee 	bl	8001678 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d902      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	75fb      	strb	r3, [r7, #23]
        break;
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ac:	4b74      	ldr	r3, [pc, #464]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ef      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d166      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042be:	4b6f      	ldr	r3, [pc, #444]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042c8:	4053      	eors	r3, r2
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d013      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d2:	4b6a      	ldr	r3, [pc, #424]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042dc:	4b67      	ldr	r3, [pc, #412]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a66      	ldr	r2, [pc, #408]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e8:	4b64      	ldr	r3, [pc, #400]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	4a63      	ldr	r2, [pc, #396]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042f4:	4a61      	ldr	r2, [pc, #388]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004304:	d115      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7fd f9b7 	bl	8001678 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430c:	e00b      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fd f9b3 	bl	8001678 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d902      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	75fb      	strb	r3, [r7, #23]
            break;
 8004324:	e005      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004326:	4b55      	ldr	r3, [pc, #340]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ed      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d126      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004346:	d10d      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004356:	0919      	lsrs	r1, r3, #4
 8004358:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800435a:	400b      	ands	r3, r1
 800435c:	4947      	ldr	r1, [pc, #284]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800435e:	4313      	orrs	r3, r2
 8004360:	610b      	str	r3, [r1, #16]
 8004362:	e005      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	4a44      	ldr	r2, [pc, #272]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800436a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800436e:	6113      	str	r3, [r2, #16]
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	493f      	ldr	r1, [pc, #252]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004380:	4313      	orrs	r3, r2
 8004382:	670b      	str	r3, [r1, #112]	; 0x70
 8004384:	e004      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	75bb      	strb	r3, [r7, #22]
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8085 	beq.w	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a2:	2b28      	cmp	r3, #40	; 0x28
 80043a4:	d866      	bhi.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	08004489 	.word	0x08004489
 80043b0:	08004475 	.word	0x08004475
 80043b4:	08004475 	.word	0x08004475
 80043b8:	08004475 	.word	0x08004475
 80043bc:	08004475 	.word	0x08004475
 80043c0:	08004475 	.word	0x08004475
 80043c4:	08004475 	.word	0x08004475
 80043c8:	08004475 	.word	0x08004475
 80043cc:	08004451 	.word	0x08004451
 80043d0:	08004475 	.word	0x08004475
 80043d4:	08004475 	.word	0x08004475
 80043d8:	08004475 	.word	0x08004475
 80043dc:	08004475 	.word	0x08004475
 80043e0:	08004475 	.word	0x08004475
 80043e4:	08004475 	.word	0x08004475
 80043e8:	08004475 	.word	0x08004475
 80043ec:	08004463 	.word	0x08004463
 80043f0:	08004475 	.word	0x08004475
 80043f4:	08004475 	.word	0x08004475
 80043f8:	08004475 	.word	0x08004475
 80043fc:	08004475 	.word	0x08004475
 8004400:	08004475 	.word	0x08004475
 8004404:	08004475 	.word	0x08004475
 8004408:	08004475 	.word	0x08004475
 800440c:	08004489 	.word	0x08004489
 8004410:	08004475 	.word	0x08004475
 8004414:	08004475 	.word	0x08004475
 8004418:	08004475 	.word	0x08004475
 800441c:	08004475 	.word	0x08004475
 8004420:	08004475 	.word	0x08004475
 8004424:	08004475 	.word	0x08004475
 8004428:	08004475 	.word	0x08004475
 800442c:	08004489 	.word	0x08004489
 8004430:	08004475 	.word	0x08004475
 8004434:	08004475 	.word	0x08004475
 8004438:	08004475 	.word	0x08004475
 800443c:	08004475 	.word	0x08004475
 8004440:	08004475 	.word	0x08004475
 8004444:	08004475 	.word	0x08004475
 8004448:	08004475 	.word	0x08004475
 800444c:	08004489 	.word	0x08004489
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	2101      	movs	r1, #1
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fdfa 	bl	8005050 <RCCEx_PLL2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004460:	e013      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3324      	adds	r3, #36	; 0x24
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fea3 	bl	80051b4 <RCCEx_PLL3_Config>
 800446e:	4603      	mov	r3, r0
 8004470:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004472:	e00a      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	75fb      	strb	r3, [r7, #23]
      break;
 8004478:	e007      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800447a:	bf00      	nop
 800447c:	58024400 	.word	0x58024400
 8004480:	58024800 	.word	0x58024800
 8004484:	00ffffcf 	.word	0x00ffffcf
      break;
 8004488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004490:	4b96      	ldr	r3, [pc, #600]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449c:	4993      	ldr	r1, [pc, #588]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	654b      	str	r3, [r1, #84]	; 0x54
 80044a2:	e001      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d038      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d821      	bhi.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	08004507 	.word	0x08004507
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044ef 	.word	0x080044ef
 80044d0:	08004507 	.word	0x08004507
 80044d4:	08004507 	.word	0x08004507
 80044d8:	08004507 	.word	0x08004507
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fdb4 	bl	8005050 <RCCEx_PLL2_Config>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044ec:	e00c      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	2101      	movs	r1, #1
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fe5d 	bl	80051b4 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044fe:	e003      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      break;
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800450e:	4b77      	ldr	r3, [pc, #476]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f023 0207 	bic.w	r2, r3, #7
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	4974      	ldr	r1, [pc, #464]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	654b      	str	r3, [r1, #84]	; 0x54
 8004520:	e001      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d03a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	2b05      	cmp	r3, #5
 800453a:	d821      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004587 	.word	0x08004587
 8004548:	0800455d 	.word	0x0800455d
 800454c:	0800456f 	.word	0x0800456f
 8004550:	08004587 	.word	0x08004587
 8004554:	08004587 	.word	0x08004587
 8004558:	08004587 	.word	0x08004587
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fd74 	bl	8005050 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800456c:	e00c      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fe1d 	bl	80051b4 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800457e:	e003      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	75fb      	strb	r3, [r7, #23]
      break;
 8004584:	e000      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800458e:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	f023 0207 	bic.w	r2, r3, #7
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459c:	4953      	ldr	r1, [pc, #332]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	658b      	str	r3, [r1, #88]	; 0x58
 80045a2:	e001      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d04b      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045be:	d02e      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80045c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c4:	d828      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d02a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d822      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045d6:	d026      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80045d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045dc:	d81c      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e2:	d010      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80045e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e8:	d816      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01d      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80045ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f2:	d111      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fd28 	bl	8005050 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004604:	e012      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fdd1 	bl	80051b4 <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004616:	e009      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	e006      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800462a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004632:	4b2e      	ldr	r3, [pc, #184]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004640:	492a      	ldr	r1, [pc, #168]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	654b      	str	r3, [r1, #84]	; 0x54
 8004646:	e001      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d04d      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004662:	d02e      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004664:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004668:	d828      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d02a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d822      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800467a:	d026      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800467c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004680:	d81c      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004686:	d010      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800468c:	d816      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01d      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d111      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fcd6 	bl	8005050 <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046a8:	e012      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	2102      	movs	r1, #2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd7f 	bl	80051b4 <RCCEx_PLL3_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046ba:	e009      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80046ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e4:	4901      	ldr	r1, [pc, #4]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	658b      	str	r3, [r1, #88]	; 0x58
 80046ea:	e003      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d04b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004706:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800470a:	d02e      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800470c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004710:	d828      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004716:	d02a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d822      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800471e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004722:	d026      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004724:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004728:	d81c      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800472a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800472e:	d010      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004734:	d816      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01d      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800473a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800473e:	d111      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fc82 	bl	8005050 <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004750:	e012      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3324      	adds	r3, #36	; 0x24
 8004756:	2102      	movs	r1, #2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fd2b 	bl	80051b4 <RCCEx_PLL3_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004762:	e009      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	e006      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800476a:	bf00      	nop
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004778:	7dfb      	ldrb	r3, [r7, #23]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800477e:	4b9d      	ldr	r3, [pc, #628]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800478c:	4999      	ldr	r1, [pc, #612]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800478e:	4313      	orrs	r3, r2
 8004790:	658b      	str	r3, [r1, #88]	; 0x58
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ae:	d10a      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3324      	adds	r3, #36	; 0x24
 80047b4:	2102      	movs	r1, #2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fcfc 	bl	80051b4 <RCCEx_PLL3_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047c6:	4b8b      	ldr	r3, [pc, #556]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d4:	4987      	ldr	r1, [pc, #540]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d10a      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fcdb 	bl	80051b4 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004808:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004816:	4977      	ldr	r1, [pc, #476]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004818:	4313      	orrs	r3, r2
 800481a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d034      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800482e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004832:	d01d      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004838:	d817      	bhi.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d009      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004844:	e011      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fbff 	bl	8005050 <RCCEx_PLL2_Config>
 8004852:	4603      	mov	r3, r0
 8004854:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004856:	e00c      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3324      	adds	r3, #36	; 0x24
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fca8 	bl	80051b4 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004868:	e003      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	75fb      	strb	r3, [r7, #23]
      break;
 800486e:	e000      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004878:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004886:	495b      	ldr	r1, [pc, #364]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004888:	4313      	orrs	r3, r2
 800488a:	658b      	str	r3, [r1, #88]	; 0x58
 800488c:	e001      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d033      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048a8:	d01c      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80048aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048ae:	d816      	bhi.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80048b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b4:	d003      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80048b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ba:	d007      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80048bc:	e00f      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	4a4c      	ldr	r2, [pc, #304]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048ca:	e00c      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3324      	adds	r3, #36	; 0x24
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fc6e 	bl	80051b4 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048dc:	e003      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
      break;
 80048e2:	e000      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80048e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fa:	493e      	ldr	r1, [pc, #248]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d029      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491e:	d007      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004920:	e00f      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004922:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4a33      	ldr	r2, [pc, #204]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800492e:	e00b      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fb8a 	bl	8005050 <RCCEx_PLL2_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004940:	e002      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
      break;
 8004946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	4926      	ldr	r1, [pc, #152]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800495c:	4313      	orrs	r3, r2
 800495e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004960:	e001      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3324      	adds	r3, #36	; 0x24
 8004976:	2102      	movs	r1, #2
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fc1b 	bl	80051b4 <RCCEx_PLL3_Config>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d033      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499c:	d017      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800499e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a2:	d811      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d013      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ae:	d80b      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ba:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049c6:	e007      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80049d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ea:	4902      	ldr	r1, [pc, #8]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	654b      	str	r3, [r1, #84]	; 0x54
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	492e      	ldr	r1, [pc, #184]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a34:	4926      	ldr	r1, [pc, #152]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a52:	491f      	ldr	r1, [pc, #124]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a6e:	6113      	str	r3, [r2, #16]
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a7a:	4915      	ldr	r1, [pc, #84]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da08      	bge.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004aba:	7dbb      	ldrb	r3, [r7, #22]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400

08004ad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ad8:	f7ff f85a 	bl	8003b90 <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4904      	ldr	r1, [pc, #16]	; (8004afc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	58024400 	.word	0x58024400
 8004afc:	0800753c 	.word	0x0800753c

08004b00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b08:	4ba1      	ldr	r3, [pc, #644]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b12:	4b9f      	ldr	r3, [pc, #636]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	0b1b      	lsrs	r3, r3, #12
 8004b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b1e:	4b9c      	ldr	r3, [pc, #624]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b2a:	4b99      	ldr	r3, [pc, #612]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	08db      	lsrs	r3, r3, #3
 8004b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8111 	beq.w	8004d70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	f000 8083 	beq.w	8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	f200 80a1 	bhi.w	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d056      	beq.n	8004c18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b6a:	e099      	b.n	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b6c:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02d      	beq.n	8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b78:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	08db      	lsrs	r3, r3, #3
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	4a84      	ldr	r2, [pc, #528]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba2:	4b7b      	ldr	r3, [pc, #492]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bd2:	e087      	b.n	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be6:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bee:	ee07 3a90 	vmov	s15, r3
 8004bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c16:	e065      	b.n	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b59      	ldr	r3, [pc, #356]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c5a:	e043      	b.n	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b48      	ldr	r3, [pc, #288]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c9e:	e021      	b.n	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ce2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ce4:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	0a5b      	lsrs	r3, r3, #9
 8004cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cee:	ee07 3a90 	vmov	s15, r3
 8004cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0a:	ee17 2a90 	vmov	r2, s15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d12:	4b1f      	ldr	r3, [pc, #124]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d38:	ee17 2a90 	vmov	r2, s15
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d40:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	0e1b      	lsrs	r3, r3, #24
 8004d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	ee17 2a90 	vmov	r2, s15
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d6e:	e008      	b.n	8004d82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	bf00      	nop
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400
 8004d94:	03d09000 	.word	0x03d09000
 8004d98:	46000000 	.word	0x46000000
 8004d9c:	4c742400 	.word	0x4c742400
 8004da0:	4a742400 	.word	0x4a742400
 8004da4:	4af42400 	.word	0x4af42400

08004da8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004db0:	4ba1      	ldr	r3, [pc, #644]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004dba:	4b9f      	ldr	r3, [pc, #636]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	0d1b      	lsrs	r3, r3, #20
 8004dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dc6:	4b9c      	ldr	r3, [pc, #624]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dd2:	4b99      	ldr	r3, [pc, #612]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	08db      	lsrs	r3, r3, #3
 8004dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8111 	beq.w	8005018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f000 8083 	beq.w	8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	f200 80a1 	bhi.w	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d056      	beq.n	8004ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e12:	e099      	b.n	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e14:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02d      	beq.n	8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e20:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	4a84      	ldr	r2, [pc, #528]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e7a:	e087      	b.n	8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ebe:	e065      	b.n	8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f02:	e043      	b.n	8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b48      	ldr	r3, [pc, #288]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f46:	e021      	b.n	8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	0a5b      	lsrs	r3, r3, #9
 8004f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb2:	ee17 2a90 	vmov	r2, s15
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe0:	ee17 2a90 	vmov	r2, s15
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	0e1b      	lsrs	r3, r3, #24
 8004fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005002:	edd7 6a07 	vldr	s13, [r7, #28]
 8005006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500e:	ee17 2a90 	vmov	r2, s15
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005016:	e008      	b.n	800502a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
 800503c:	03d09000 	.word	0x03d09000
 8005040:	46000000 	.word	0x46000000
 8005044:	4c742400 	.word	0x4c742400
 8005048:	4a742400 	.word	0x4a742400
 800504c:	4af42400 	.word	0x4af42400

08005050 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800505e:	4b53      	ldr	r3, [pc, #332]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b03      	cmp	r3, #3
 8005068:	d101      	bne.n	800506e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e099      	b.n	80051a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800506e:	4b4f      	ldr	r3, [pc, #316]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a4e      	ldr	r2, [pc, #312]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005074:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507a:	f7fc fafd 	bl	8001678 <HAL_GetTick>
 800507e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005080:	e008      	b.n	8005094 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005082:	f7fc faf9 	bl	8001678 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e086      	b.n	80051a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005094:	4b45      	ldr	r3, [pc, #276]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050a0:	4b42      	ldr	r3, [pc, #264]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	493f      	ldr	r1, [pc, #252]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	628b      	str	r3, [r1, #40]	; 0x28
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	025b      	lsls	r3, r3, #9
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	3b01      	subs	r3, #1
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050e4:	4931      	ldr	r1, [pc, #196]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050ea:	4b30      	ldr	r3, [pc, #192]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	492d      	ldr	r1, [pc, #180]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	f023 0220 	bic.w	r2, r3, #32
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	4928      	ldr	r1, [pc, #160]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800510e:	4b27      	ldr	r3, [pc, #156]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	4a26      	ldr	r2, [pc, #152]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 800511c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <RCCEx_PLL2_Config+0x160>)
 8005120:	4013      	ands	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	69d2      	ldr	r2, [r2, #28]
 8005126:	00d2      	lsls	r2, r2, #3
 8005128:	4920      	ldr	r1, [pc, #128]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 800512a:	4313      	orrs	r3, r2
 800512c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800512e:	4b1f      	ldr	r3, [pc, #124]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	4a1e      	ldr	r2, [pc, #120]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005134:	f043 0310 	orr.w	r3, r3, #16
 8005138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4a19      	ldr	r2, [pc, #100]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800514c:	e00f      	b.n	800516e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d106      	bne.n	8005162 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005154:	4b15      	ldr	r3, [pc, #84]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	4a14      	ldr	r2, [pc, #80]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 800515a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005160:	e005      	b.n	800516e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005162:	4b12      	ldr	r3, [pc, #72]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517a:	f7fc fa7d 	bl	8001678 <HAL_GetTick>
 800517e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005180:	e008      	b.n	8005194 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005182:	f7fc fa79 	bl	8001678 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e006      	b.n	80051a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <RCCEx_PLL2_Config+0x15c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	ffff0007 	.word	0xffff0007

080051b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051c2:	4b53      	ldr	r3, [pc, #332]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d101      	bne.n	80051d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e099      	b.n	8005306 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051d2:	4b4f      	ldr	r3, [pc, #316]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a4e      	ldr	r2, [pc, #312]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051de:	f7fc fa4b 	bl	8001678 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051e6:	f7fc fa47 	bl	8001678 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e086      	b.n	8005306 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051f8:	4b45      	ldr	r3, [pc, #276]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f0      	bne.n	80051e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005204:	4b42      	ldr	r3, [pc, #264]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	051b      	lsls	r3, r3, #20
 8005212:	493f      	ldr	r1, [pc, #252]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005214:	4313      	orrs	r3, r2
 8005216:	628b      	str	r3, [r1, #40]	; 0x28
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	3b01      	subs	r3, #1
 800521e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	3b01      	subs	r3, #1
 8005228:	025b      	lsls	r3, r3, #9
 800522a:	b29b      	uxth	r3, r3
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	3b01      	subs	r3, #1
 8005242:	061b      	lsls	r3, r3, #24
 8005244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005248:	4931      	ldr	r1, [pc, #196]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800524e:	4b30      	ldr	r3, [pc, #192]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	492d      	ldr	r1, [pc, #180]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	4928      	ldr	r1, [pc, #160]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	4a26      	ldr	r2, [pc, #152]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <RCCEx_PLL3_Config+0x160>)
 8005284:	4013      	ands	r3, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	69d2      	ldr	r2, [r2, #28]
 800528a:	00d2      	lsls	r2, r2, #3
 800528c:	4920      	ldr	r1, [pc, #128]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005292:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005296:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4a19      	ldr	r2, [pc, #100]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052b0:	e00f      	b.n	80052d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052b8:	4b15      	ldr	r3, [pc, #84]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052c4:	e005      	b.n	80052d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a11      	ldr	r2, [pc, #68]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052de:	f7fc f9cb 	bl	8001678 <HAL_GetTick>
 80052e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052e4:	e008      	b.n	80052f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052e6:	f7fc f9c7 	bl	8001678 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e006      	b.n	8005306 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	58024400 	.word	0x58024400
 8005314:	ffff0007 	.word	0xffff0007

08005318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e042      	b.n	80053b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fb ff17 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2224      	movs	r2, #36	; 0x24
 8005346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8c2 	bl	80054e4 <UART_SetConfig>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e022      	b.n	80053b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fe1e 	bl	8005fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fea5 	bl	80060f8 <UART_CheckIdleState>
 80053ae:	4603      	mov	r3, r0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	; 0x28
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	f040 8083 	bne.w	80054da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <HAL_UART_Transmit+0x28>
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e07b      	b.n	80054dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Transmit+0x3a>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e074      	b.n	80054dc <HAL_UART_Transmit+0x124>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2221      	movs	r2, #33	; 0x21
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800540a:	f7fc f935 	bl	8001678 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	88fa      	ldrh	r2, [r7, #6]
 800541c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005428:	d108      	bne.n	800543c <HAL_UART_Transmit+0x84>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e003      	b.n	8005444 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800544c:	e02c      	b.n	80054a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	2180      	movs	r1, #128	; 0x80
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fe98 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e039      	b.n	80054dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	3302      	adds	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
 8005484:	e007      	b.n	8005496 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800549c:	b29b      	uxth	r3, r3
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1cc      	bne.n	800544e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2200      	movs	r2, #0
 80054bc:	2140      	movs	r1, #64	; 0x40
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fe65 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e006      	b.n	80054dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e000      	b.n	80054dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e8:	b092      	sub	sp, #72	; 0x48
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	431a      	orrs	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4313      	orrs	r3, r2
 800550a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4bbe      	ldr	r3, [pc, #760]	; (800580c <UART_SetConfig+0x328>)
 8005514:	4013      	ands	r3, r2
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	6812      	ldr	r2, [r2, #0]
 800551a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800551c:	430b      	orrs	r3, r1
 800551e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4ab3      	ldr	r2, [pc, #716]	; (8005810 <UART_SetConfig+0x32c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800554c:	4313      	orrs	r3, r2
 800554e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	4baf      	ldr	r3, [pc, #700]	; (8005814 <UART_SetConfig+0x330>)
 8005558:	4013      	ands	r3, r2
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005560:	430b      	orrs	r3, r1
 8005562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f023 010f 	bic.w	r1, r3, #15
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4aa6      	ldr	r2, [pc, #664]	; (8005818 <UART_SetConfig+0x334>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d177      	bne.n	8005674 <UART_SetConfig+0x190>
 8005584:	4ba5      	ldr	r3, [pc, #660]	; (800581c <UART_SetConfig+0x338>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800558c:	2b28      	cmp	r3, #40	; 0x28
 800558e:	d86d      	bhi.n	800566c <UART_SetConfig+0x188>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0xb4>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	0800563d 	.word	0x0800563d
 800559c:	0800566d 	.word	0x0800566d
 80055a0:	0800566d 	.word	0x0800566d
 80055a4:	0800566d 	.word	0x0800566d
 80055a8:	0800566d 	.word	0x0800566d
 80055ac:	0800566d 	.word	0x0800566d
 80055b0:	0800566d 	.word	0x0800566d
 80055b4:	0800566d 	.word	0x0800566d
 80055b8:	08005645 	.word	0x08005645
 80055bc:	0800566d 	.word	0x0800566d
 80055c0:	0800566d 	.word	0x0800566d
 80055c4:	0800566d 	.word	0x0800566d
 80055c8:	0800566d 	.word	0x0800566d
 80055cc:	0800566d 	.word	0x0800566d
 80055d0:	0800566d 	.word	0x0800566d
 80055d4:	0800566d 	.word	0x0800566d
 80055d8:	0800564d 	.word	0x0800564d
 80055dc:	0800566d 	.word	0x0800566d
 80055e0:	0800566d 	.word	0x0800566d
 80055e4:	0800566d 	.word	0x0800566d
 80055e8:	0800566d 	.word	0x0800566d
 80055ec:	0800566d 	.word	0x0800566d
 80055f0:	0800566d 	.word	0x0800566d
 80055f4:	0800566d 	.word	0x0800566d
 80055f8:	08005655 	.word	0x08005655
 80055fc:	0800566d 	.word	0x0800566d
 8005600:	0800566d 	.word	0x0800566d
 8005604:	0800566d 	.word	0x0800566d
 8005608:	0800566d 	.word	0x0800566d
 800560c:	0800566d 	.word	0x0800566d
 8005610:	0800566d 	.word	0x0800566d
 8005614:	0800566d 	.word	0x0800566d
 8005618:	0800565d 	.word	0x0800565d
 800561c:	0800566d 	.word	0x0800566d
 8005620:	0800566d 	.word	0x0800566d
 8005624:	0800566d 	.word	0x0800566d
 8005628:	0800566d 	.word	0x0800566d
 800562c:	0800566d 	.word	0x0800566d
 8005630:	0800566d 	.word	0x0800566d
 8005634:	0800566d 	.word	0x0800566d
 8005638:	08005665 	.word	0x08005665
 800563c:	2301      	movs	r3, #1
 800563e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005642:	e222      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800564a:	e21e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005652:	e21a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e216      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800565c:	2320      	movs	r3, #32
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e212      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e20e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e20a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a69      	ldr	r2, [pc, #420]	; (8005820 <UART_SetConfig+0x33c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d130      	bne.n	80056e0 <UART_SetConfig+0x1fc>
 800567e:	4b67      	ldr	r3, [pc, #412]	; (800581c <UART_SetConfig+0x338>)
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	2b05      	cmp	r3, #5
 8005688:	d826      	bhi.n	80056d8 <UART_SetConfig+0x1f4>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0x1ac>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a9 	.word	0x080056a9
 8005694:	080056b1 	.word	0x080056b1
 8005698:	080056b9 	.word	0x080056b9
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c9 	.word	0x080056c9
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e1ec      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056b0:	2304      	movs	r3, #4
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e1e8      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056b8:	2308      	movs	r3, #8
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e1e4      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e1e0      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056c8:	2320      	movs	r3, #32
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e1dc      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056d0:	2340      	movs	r3, #64	; 0x40
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e1d8      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056d8:	2380      	movs	r3, #128	; 0x80
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e1d4      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4f      	ldr	r2, [pc, #316]	; (8005824 <UART_SetConfig+0x340>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d130      	bne.n	800574c <UART_SetConfig+0x268>
 80056ea:	4b4c      	ldr	r3, [pc, #304]	; (800581c <UART_SetConfig+0x338>)
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	2b05      	cmp	r3, #5
 80056f4:	d826      	bhi.n	8005744 <UART_SetConfig+0x260>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0x218>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005715 	.word	0x08005715
 8005700:	0800571d 	.word	0x0800571d
 8005704:	08005725 	.word	0x08005725
 8005708:	0800572d 	.word	0x0800572d
 800570c:	08005735 	.word	0x08005735
 8005710:	0800573d 	.word	0x0800573d
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800571a:	e1b6      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e1b2      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e1ae      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e1aa      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e1a6      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800573c:	2340      	movs	r3, #64	; 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e1a2      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e19e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <UART_SetConfig+0x344>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d130      	bne.n	80057b8 <UART_SetConfig+0x2d4>
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <UART_SetConfig+0x338>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b05      	cmp	r3, #5
 8005760:	d826      	bhi.n	80057b0 <UART_SetConfig+0x2cc>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x284>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005781 	.word	0x08005781
 800576c:	08005789 	.word	0x08005789
 8005770:	08005791 	.word	0x08005791
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e180      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e17c      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e178      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e174      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e170      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ae:	e16c      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	; 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057b6:	e168      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <UART_SetConfig+0x348>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d142      	bne.n	8005848 <UART_SetConfig+0x364>
 80057c2:	4b16      	ldr	r3, [pc, #88]	; (800581c <UART_SetConfig+0x338>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d838      	bhi.n	8005840 <UART_SetConfig+0x35c>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <UART_SetConfig+0x2f0>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	08005831 	.word	0x08005831
 80057e8:	08005839 	.word	0x08005839
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e14a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e146      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e142      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e13e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800580c:	cfff69f3 	.word	0xcfff69f3
 8005810:	58000c00 	.word	0x58000c00
 8005814:	11fff4ff 	.word	0x11fff4ff
 8005818:	40011000 	.word	0x40011000
 800581c:	58024400 	.word	0x58024400
 8005820:	40004400 	.word	0x40004400
 8005824:	40004800 	.word	0x40004800
 8005828:	40004c00 	.word	0x40004c00
 800582c:	40005000 	.word	0x40005000
 8005830:	2320      	movs	r3, #32
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e128      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005838:	2340      	movs	r3, #64	; 0x40
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e124      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e120      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4acb      	ldr	r2, [pc, #812]	; (8005b7c <UART_SetConfig+0x698>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d176      	bne.n	8005940 <UART_SetConfig+0x45c>
 8005852:	4bcb      	ldr	r3, [pc, #812]	; (8005b80 <UART_SetConfig+0x69c>)
 8005854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585a:	2b28      	cmp	r3, #40	; 0x28
 800585c:	d86c      	bhi.n	8005938 <UART_SetConfig+0x454>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x380>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005909 	.word	0x08005909
 8005868:	08005939 	.word	0x08005939
 800586c:	08005939 	.word	0x08005939
 8005870:	08005939 	.word	0x08005939
 8005874:	08005939 	.word	0x08005939
 8005878:	08005939 	.word	0x08005939
 800587c:	08005939 	.word	0x08005939
 8005880:	08005939 	.word	0x08005939
 8005884:	08005911 	.word	0x08005911
 8005888:	08005939 	.word	0x08005939
 800588c:	08005939 	.word	0x08005939
 8005890:	08005939 	.word	0x08005939
 8005894:	08005939 	.word	0x08005939
 8005898:	08005939 	.word	0x08005939
 800589c:	08005939 	.word	0x08005939
 80058a0:	08005939 	.word	0x08005939
 80058a4:	08005919 	.word	0x08005919
 80058a8:	08005939 	.word	0x08005939
 80058ac:	08005939 	.word	0x08005939
 80058b0:	08005939 	.word	0x08005939
 80058b4:	08005939 	.word	0x08005939
 80058b8:	08005939 	.word	0x08005939
 80058bc:	08005939 	.word	0x08005939
 80058c0:	08005939 	.word	0x08005939
 80058c4:	08005921 	.word	0x08005921
 80058c8:	08005939 	.word	0x08005939
 80058cc:	08005939 	.word	0x08005939
 80058d0:	08005939 	.word	0x08005939
 80058d4:	08005939 	.word	0x08005939
 80058d8:	08005939 	.word	0x08005939
 80058dc:	08005939 	.word	0x08005939
 80058e0:	08005939 	.word	0x08005939
 80058e4:	08005929 	.word	0x08005929
 80058e8:	08005939 	.word	0x08005939
 80058ec:	08005939 	.word	0x08005939
 80058f0:	08005939 	.word	0x08005939
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005939 	.word	0x08005939
 80058fc:	08005939 	.word	0x08005939
 8005900:	08005939 	.word	0x08005939
 8005904:	08005931 	.word	0x08005931
 8005908:	2301      	movs	r3, #1
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e0bc      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005910:	2304      	movs	r3, #4
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e0b8      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005918:	2308      	movs	r3, #8
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e0b4      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005920:	2310      	movs	r3, #16
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e0b0      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005928:	2320      	movs	r3, #32
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e0ac      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005930:	2340      	movs	r3, #64	; 0x40
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e0a8      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005938:	2380      	movs	r3, #128	; 0x80
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593e:	e0a4      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a8f      	ldr	r2, [pc, #572]	; (8005b84 <UART_SetConfig+0x6a0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d130      	bne.n	80059ac <UART_SetConfig+0x4c8>
 800594a:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <UART_SetConfig+0x69c>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	2b05      	cmp	r3, #5
 8005954:	d826      	bhi.n	80059a4 <UART_SetConfig+0x4c0>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x478>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005975 	.word	0x08005975
 8005960:	0800597d 	.word	0x0800597d
 8005964:	08005985 	.word	0x08005985
 8005968:	0800598d 	.word	0x0800598d
 800596c:	08005995 	.word	0x08005995
 8005970:	0800599d 	.word	0x0800599d
 8005974:	2300      	movs	r3, #0
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e086      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e082      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e07e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e07a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005994:	2320      	movs	r3, #32
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e076      	b.n	8005a8a <UART_SetConfig+0x5a6>
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e072      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059aa:	e06e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a75      	ldr	r2, [pc, #468]	; (8005b88 <UART_SetConfig+0x6a4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d130      	bne.n	8005a18 <UART_SetConfig+0x534>
 80059b6:	4b72      	ldr	r3, [pc, #456]	; (8005b80 <UART_SetConfig+0x69c>)
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d826      	bhi.n	8005a10 <UART_SetConfig+0x52c>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x4e4>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059e1 	.word	0x080059e1
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	080059f1 	.word	0x080059f1
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e050      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e04c      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e048      	b.n	8005a8a <UART_SetConfig+0x5a6>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059fe:	e044      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a00:	2320      	movs	r3, #32
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a06:	e040      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a08:	2340      	movs	r3, #64	; 0x40
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0e:	e03c      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a16:	e038      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a5b      	ldr	r2, [pc, #364]	; (8005b8c <UART_SetConfig+0x6a8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d130      	bne.n	8005a84 <UART_SetConfig+0x5a0>
 8005a22:	4b57      	ldr	r3, [pc, #348]	; (8005b80 <UART_SetConfig+0x69c>)
 8005a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d826      	bhi.n	8005a7c <UART_SetConfig+0x598>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <UART_SetConfig+0x550>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a4d 	.word	0x08005a4d
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e01a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e016      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e012      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6a:	e00e      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a72:	e00a      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a74:	2340      	movs	r3, #64	; 0x40
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7a:	e006      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a82:	e002      	b.n	8005a8a <UART_SetConfig+0x5a6>
 8005a84:	2380      	movs	r3, #128	; 0x80
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <UART_SetConfig+0x6a8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	f040 80f8 	bne.w	8005c86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	dc46      	bgt.n	8005b2c <UART_SetConfig+0x648>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	f2c0 8082 	blt.w	8005ba8 <UART_SetConfig+0x6c4>
 8005aa4:	3b02      	subs	r3, #2
 8005aa6:	2b1e      	cmp	r3, #30
 8005aa8:	d87e      	bhi.n	8005ba8 <UART_SetConfig+0x6c4>
 8005aaa:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <UART_SetConfig+0x5cc>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005b33 	.word	0x08005b33
 8005ab4:	08005ba9 	.word	0x08005ba9
 8005ab8:	08005b3b 	.word	0x08005b3b
 8005abc:	08005ba9 	.word	0x08005ba9
 8005ac0:	08005ba9 	.word	0x08005ba9
 8005ac4:	08005ba9 	.word	0x08005ba9
 8005ac8:	08005b4b 	.word	0x08005b4b
 8005acc:	08005ba9 	.word	0x08005ba9
 8005ad0:	08005ba9 	.word	0x08005ba9
 8005ad4:	08005ba9 	.word	0x08005ba9
 8005ad8:	08005ba9 	.word	0x08005ba9
 8005adc:	08005ba9 	.word	0x08005ba9
 8005ae0:	08005ba9 	.word	0x08005ba9
 8005ae4:	08005ba9 	.word	0x08005ba9
 8005ae8:	08005b5b 	.word	0x08005b5b
 8005aec:	08005ba9 	.word	0x08005ba9
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005ba9 	.word	0x08005ba9
 8005af8:	08005ba9 	.word	0x08005ba9
 8005afc:	08005ba9 	.word	0x08005ba9
 8005b00:	08005ba9 	.word	0x08005ba9
 8005b04:	08005ba9 	.word	0x08005ba9
 8005b08:	08005ba9 	.word	0x08005ba9
 8005b0c:	08005ba9 	.word	0x08005ba9
 8005b10:	08005ba9 	.word	0x08005ba9
 8005b14:	08005ba9 	.word	0x08005ba9
 8005b18:	08005ba9 	.word	0x08005ba9
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005ba9 	.word	0x08005ba9
 8005b24:	08005ba9 	.word	0x08005ba9
 8005b28:	08005b9b 	.word	0x08005b9b
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d037      	beq.n	8005ba0 <UART_SetConfig+0x6bc>
 8005b30:	e03a      	b.n	8005ba8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b32:	f7fe ffcf 	bl	8004ad4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b38:	e03c      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe ffde 	bl	8004b00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b48:	e034      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b4a:	f107 0318 	add.w	r3, r7, #24
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff f92a 	bl	8004da8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b58:	e02c      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <UART_SetConfig+0x69c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <UART_SetConfig+0x69c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	08db      	lsrs	r3, r3, #3
 8005b6c:	f003 0303 	and.w	r3, r3, #3
 8005b70:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <UART_SetConfig+0x6ac>)
 8005b72:	fa22 f303 	lsr.w	r3, r2, r3
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b78:	e01c      	b.n	8005bb4 <UART_SetConfig+0x6d0>
 8005b7a:	bf00      	nop
 8005b7c:	40011400 	.word	0x40011400
 8005b80:	58024400 	.word	0x58024400
 8005b84:	40007800 	.word	0x40007800
 8005b88:	40007c00 	.word	0x40007c00
 8005b8c:	58000c00 	.word	0x58000c00
 8005b90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b94:	4b9d      	ldr	r3, [pc, #628]	; (8005e0c <UART_SetConfig+0x928>)
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b98:	e00c      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b9a:	4b9d      	ldr	r3, [pc, #628]	; (8005e10 <UART_SetConfig+0x92c>)
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b9e:	e009      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba6:	e005      	b.n	8005bb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005bb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 81de 	beq.w	8005f78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	4a94      	ldr	r2, [pc, #592]	; (8005e14 <UART_SetConfig+0x930>)
 8005bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d305      	bcc.n	8005bec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d903      	bls.n	8005bf4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005bf2:	e1c1      	b.n	8005f78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	60fa      	str	r2, [r7, #12]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	4a84      	ldr	r2, [pc, #528]	; (8005e14 <UART_SetConfig+0x930>)
 8005c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2200      	movs	r2, #0
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c16:	f7fa fbb3 	bl	8000380 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	020b      	lsls	r3, r1, #8
 8005c2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c30:	0202      	lsls	r2, r0, #8
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	0849      	lsrs	r1, r1, #1
 8005c38:	2000      	movs	r0, #0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	eb12 0804 	adds.w	r8, r2, r4
 8005c42:	eb43 0905 	adc.w	r9, r3, r5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	4693      	mov	fp, r2
 8005c50:	4652      	mov	r2, sl
 8005c52:	465b      	mov	r3, fp
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa fb92 	bl	8000380 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d308      	bcc.n	8005c7e <UART_SetConfig+0x79a>
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d204      	bcs.n	8005c7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	e17c      	b.n	8005f78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c84:	e178      	b.n	8005f78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	f040 80c5 	bne.w	8005e1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	dc48      	bgt.n	8005d2c <UART_SetConfig+0x848>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	db7b      	blt.n	8005d96 <UART_SetConfig+0x8b2>
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d879      	bhi.n	8005d96 <UART_SetConfig+0x8b2>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x7c4>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005d33 	.word	0x08005d33
 8005cac:	08005d3b 	.word	0x08005d3b
 8005cb0:	08005d97 	.word	0x08005d97
 8005cb4:	08005d97 	.word	0x08005d97
 8005cb8:	08005d43 	.word	0x08005d43
 8005cbc:	08005d97 	.word	0x08005d97
 8005cc0:	08005d97 	.word	0x08005d97
 8005cc4:	08005d97 	.word	0x08005d97
 8005cc8:	08005d53 	.word	0x08005d53
 8005ccc:	08005d97 	.word	0x08005d97
 8005cd0:	08005d97 	.word	0x08005d97
 8005cd4:	08005d97 	.word	0x08005d97
 8005cd8:	08005d97 	.word	0x08005d97
 8005cdc:	08005d97 	.word	0x08005d97
 8005ce0:	08005d97 	.word	0x08005d97
 8005ce4:	08005d97 	.word	0x08005d97
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005d97 	.word	0x08005d97
 8005cf0:	08005d97 	.word	0x08005d97
 8005cf4:	08005d97 	.word	0x08005d97
 8005cf8:	08005d97 	.word	0x08005d97
 8005cfc:	08005d97 	.word	0x08005d97
 8005d00:	08005d97 	.word	0x08005d97
 8005d04:	08005d97 	.word	0x08005d97
 8005d08:	08005d97 	.word	0x08005d97
 8005d0c:	08005d97 	.word	0x08005d97
 8005d10:	08005d97 	.word	0x08005d97
 8005d14:	08005d97 	.word	0x08005d97
 8005d18:	08005d97 	.word	0x08005d97
 8005d1c:	08005d97 	.word	0x08005d97
 8005d20:	08005d97 	.word	0x08005d97
 8005d24:	08005d97 	.word	0x08005d97
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d02e      	beq.n	8005d8e <UART_SetConfig+0x8aa>
 8005d30:	e031      	b.n	8005d96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d32:	f7fd ff5d 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005d36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d38:	e033      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3a:	f7fd ff6f 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005d3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d40:	e02f      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe feda 	bl	8004b00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d50:	e027      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d52:	f107 0318 	add.w	r3, r7, #24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f826 	bl	8004da8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d60:	e01f      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d62:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <UART_SetConfig+0x934>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d6e:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <UART_SetConfig+0x934>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <UART_SetConfig+0x928>)
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d80:	e00f      	b.n	8005da2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d82:	4b22      	ldr	r3, [pc, #136]	; (8005e0c <UART_SetConfig+0x928>)
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d86:	e00c      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <UART_SetConfig+0x92c>)
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d8c:	e009      	b.n	8005da2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d94:	e005      	b.n	8005da2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005da0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80e7 	beq.w	8005f78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <UART_SetConfig+0x930>)
 8005db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dbc:	005a      	lsls	r2, r3, #1
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	085b      	lsrs	r3, r3, #1
 8005dc4:	441a      	add	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2b0f      	cmp	r3, #15
 8005dd4:	d916      	bls.n	8005e04 <UART_SetConfig+0x920>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d212      	bcs.n	8005e04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dea:	085b      	lsrs	r3, r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005df6:	4313      	orrs	r3, r2
 8005df8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e0b9      	b.n	8005f78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e0a:	e0b5      	b.n	8005f78 <UART_SetConfig+0xa94>
 8005e0c:	03d09000 	.word	0x03d09000
 8005e10:	003d0900 	.word	0x003d0900
 8005e14:	0800754c 	.word	0x0800754c
 8005e18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	dc49      	bgt.n	8005eb8 <UART_SetConfig+0x9d4>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	db7c      	blt.n	8005f22 <UART_SetConfig+0xa3e>
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	d87a      	bhi.n	8005f22 <UART_SetConfig+0xa3e>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x950>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005ebf 	.word	0x08005ebf
 8005e38:	08005ec7 	.word	0x08005ec7
 8005e3c:	08005f23 	.word	0x08005f23
 8005e40:	08005f23 	.word	0x08005f23
 8005e44:	08005ecf 	.word	0x08005ecf
 8005e48:	08005f23 	.word	0x08005f23
 8005e4c:	08005f23 	.word	0x08005f23
 8005e50:	08005f23 	.word	0x08005f23
 8005e54:	08005edf 	.word	0x08005edf
 8005e58:	08005f23 	.word	0x08005f23
 8005e5c:	08005f23 	.word	0x08005f23
 8005e60:	08005f23 	.word	0x08005f23
 8005e64:	08005f23 	.word	0x08005f23
 8005e68:	08005f23 	.word	0x08005f23
 8005e6c:	08005f23 	.word	0x08005f23
 8005e70:	08005f23 	.word	0x08005f23
 8005e74:	08005eef 	.word	0x08005eef
 8005e78:	08005f23 	.word	0x08005f23
 8005e7c:	08005f23 	.word	0x08005f23
 8005e80:	08005f23 	.word	0x08005f23
 8005e84:	08005f23 	.word	0x08005f23
 8005e88:	08005f23 	.word	0x08005f23
 8005e8c:	08005f23 	.word	0x08005f23
 8005e90:	08005f23 	.word	0x08005f23
 8005e94:	08005f23 	.word	0x08005f23
 8005e98:	08005f23 	.word	0x08005f23
 8005e9c:	08005f23 	.word	0x08005f23
 8005ea0:	08005f23 	.word	0x08005f23
 8005ea4:	08005f23 	.word	0x08005f23
 8005ea8:	08005f23 	.word	0x08005f23
 8005eac:	08005f23 	.word	0x08005f23
 8005eb0:	08005f23 	.word	0x08005f23
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d02e      	beq.n	8005f1a <UART_SetConfig+0xa36>
 8005ebc:	e031      	b.n	8005f22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebe:	f7fd fe97 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8005ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ec4:	e033      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec6:	f7fd fea9 	bl	8003c1c <HAL_RCC_GetPCLK2Freq>
 8005eca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ecc:	e02f      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe fe14 	bl	8004b00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005edc:	e027      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fe ff60 	bl	8004da8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	e01f      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eee:	4b2d      	ldr	r3, [pc, #180]	; (8005fa4 <UART_SetConfig+0xac0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005efa:	4b2a      	ldr	r3, [pc, #168]	; (8005fa4 <UART_SetConfig+0xac0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	08db      	lsrs	r3, r3, #3
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <UART_SetConfig+0xac4>)
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f0c:	e00f      	b.n	8005f2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005f0e:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <UART_SetConfig+0xac4>)
 8005f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f12:	e00c      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f14:	4b25      	ldr	r3, [pc, #148]	; (8005fac <UART_SetConfig+0xac8>)
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f18:	e009      	b.n	8005f2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f20:	e005      	b.n	8005f2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d021      	beq.n	8005f78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <UART_SetConfig+0xacc>)
 8005f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	441a      	add	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	2b0f      	cmp	r3, #15
 8005f5c:	d909      	bls.n	8005f72 <UART_SetConfig+0xa8e>
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d205      	bcs.n	8005f72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
 8005f70:	e002      	b.n	8005f78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005f94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3748      	adds	r7, #72	; 0x48
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa2:	bf00      	nop
 8005fa4:	58024400 	.word	0x58024400
 8005fa8:	03d09000 	.word	0x03d09000
 8005fac:	003d0900 	.word	0x003d0900
 8005fb0:	0800754c 	.word	0x0800754c

08005fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01a      	beq.n	80060ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b2:	d10a      	bne.n	80060ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006108:	f7fb fab6 	bl	8001678 <HAL_GetTick>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d10e      	bne.n	800613a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f82f 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e025      	b.n	8006186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d10e      	bne.n	8006166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f819 	bl	800618e <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00f      	b.n	8006186 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b09c      	sub	sp, #112	; 0x70
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619e:	e0a9      	b.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	f000 80a5 	beq.w	80062f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fb fa65 	bl	8001678 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80061ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d140      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061d4:	667b      	str	r3, [r7, #100]	; 0x64
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e6      	bne.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006212:	64ba      	str	r2, [r7, #72]	; 0x48
 8006214:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e5      	bne.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e069      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d051      	beq.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d149      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800627e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
 800628a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800628e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	613b      	str	r3, [r7, #16]
   return(result);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062bc:	623a      	str	r2, [r7, #32]
 80062be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e010      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	429a      	cmp	r2, r3
 8006310:	f43f af46 	beq.w	80061a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3770      	adds	r7, #112	; 0x70
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_UARTEx_DisableFifoMode+0x16>
 8006330:	2302      	movs	r3, #2
 8006332:	e027      	b.n	8006384 <HAL_UARTEx_DisableFifoMode+0x66>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2224      	movs	r2, #36	; 0x24
 8006340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0201 	bic.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006362:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e02d      	b.n	8006404 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f84f 	bl	8006488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006420:	2302      	movs	r3, #2
 8006422:	e02d      	b.n	8006480 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f811 	bl	8006488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a8:	e031      	b.n	800650e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064aa:	2310      	movs	r3, #16
 80064ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ae:	2310      	movs	r3, #16
 80064b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	0e5b      	lsrs	r3, r3, #25
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0f5b      	lsrs	r3, r3, #29
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	7b3a      	ldrb	r2, [r7, #12]
 80064d6:	4911      	ldr	r1, [pc, #68]	; (800651c <UARTEx_SetNbDataToProcess+0x94>)
 80064d8:	5c8a      	ldrb	r2, [r1, r2]
 80064da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064de:	7b3a      	ldrb	r2, [r7, #12]
 80064e0:	490f      	ldr	r1, [pc, #60]	; (8006520 <UARTEx_SetNbDataToProcess+0x98>)
 80064e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	7b7a      	ldrb	r2, [r7, #13]
 80064f4:	4909      	ldr	r1, [pc, #36]	; (800651c <UARTEx_SetNbDataToProcess+0x94>)
 80064f6:	5c8a      	ldrb	r2, [r1, r2]
 80064f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064fc:	7b7a      	ldrb	r2, [r7, #13]
 80064fe:	4908      	ldr	r1, [pc, #32]	; (8006520 <UARTEx_SetNbDataToProcess+0x98>)
 8006500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006502:	fb93 f3f2 	sdiv	r3, r3, r2
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	08007564 	.word	0x08007564
 8006520:	0800756c 	.word	0x0800756c

08006524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 001c 	add.w	r0, r7, #28
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	d120      	bne.n	800657e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <USB_CoreInit+0xd4>)
 800654e:	4013      	ands	r3, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 faac 	bl	8006ad0 <USB_CoreReset>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e01a      	b.n	80065b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 faa0 	bl	8006ad0 <USB_CoreReset>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
 80065a6:	e005      	b.n	80065b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d116      	bne.n	80065e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <USB_CoreInit+0xd8>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f043 0206 	orr.w	r2, r3, #6
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065f4:	b004      	add	sp, #16
 80065f6:	4770      	bx	lr
 80065f8:	ffbdffbf 	.word	0xffbdffbf
 80065fc:	03ee0000 	.word	0x03ee0000

08006600 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f023 0201 	bic.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d115      	bne.n	8006670 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006650:	2001      	movs	r0, #1
 8006652:	f7fb f81d 	bl	8001690 <HAL_Delay>
      ms++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fa29 	bl	8006ab4 <USB_GetMode>
 8006662:	4603      	mov	r3, r0
 8006664:	2b01      	cmp	r3, #1
 8006666:	d01e      	beq.n	80066a6 <USB_SetCurrentMode+0x84>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b31      	cmp	r3, #49	; 0x31
 800666c:	d9f0      	bls.n	8006650 <USB_SetCurrentMode+0x2e>
 800666e:	e01a      	b.n	80066a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d115      	bne.n	80066a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006682:	2001      	movs	r0, #1
 8006684:	f7fb f804 	bl	8001690 <HAL_Delay>
      ms++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa10 	bl	8006ab4 <USB_GetMode>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <USB_SetCurrentMode+0x84>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b31      	cmp	r3, #49	; 0x31
 800669e:	d9f0      	bls.n	8006682 <USB_SetCurrentMode+0x60>
 80066a0:	e001      	b.n	80066a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e005      	b.n	80066b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b32      	cmp	r3, #50	; 0x32
 80066aa:	d101      	bne.n	80066b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
	...

080066bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066bc:	b084      	sub	sp, #16
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e009      	b.n	80066f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3340      	adds	r3, #64	; 0x40
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0e      	cmp	r3, #14
 80066f4:	d9f2      	bls.n	80066dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11c      	bne.n	8006736 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670a:	f043 0302 	orr.w	r3, r3, #2
 800670e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e005      	b.n	8006742 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006748:	461a      	mov	r2, r3
 800674a:	2300      	movs	r3, #0
 800674c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	4619      	mov	r1, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	461a      	mov	r2, r3
 800675e:	680b      	ldr	r3, [r1, #0]
 8006760:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10c      	bne.n	8006782 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800676e:	2100      	movs	r1, #0
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f965 	bl	8006a40 <USB_SetDevSpeed>
 8006776:	e008      	b.n	800678a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006778:	2101      	movs	r1, #1
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f960 	bl	8006a40 <USB_SetDevSpeed>
 8006780:	e003      	b.n	800678a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006782:	2103      	movs	r1, #3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f95b 	bl	8006a40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800678a:	2110      	movs	r1, #16
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8f3 	bl	8006978 <USB_FlushTxFifo>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f91f 	bl	80069e0 <USB_FlushRxFifo>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b2:	461a      	mov	r2, r3
 80067b4:	2300      	movs	r3, #0
 80067b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	e043      	b.n	800685e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067ec:	d118      	bne.n	8006820 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e013      	b.n	8006832 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	461a      	mov	r2, r3
 8006818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e008      	b.n	8006832 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	461a      	mov	r2, r3
 8006840:	2300      	movs	r3, #0
 8006842:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006850:	461a      	mov	r2, r3
 8006852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3301      	adds	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	429a      	cmp	r2, r3
 8006864:	d3b7      	bcc.n	80067d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	e043      	b.n	80068f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800687e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006882:	d118      	bne.n	80068b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e013      	b.n	80068c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	461a      	mov	r2, r3
 80068ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	e008      	b.n	80068c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2300      	movs	r3, #0
 80068c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	461a      	mov	r2, r3
 80068d6:	2300      	movs	r3, #0
 80068d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3301      	adds	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d3b7      	bcc.n	800686c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800690a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800690e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800691c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	f043 0210 	orr.w	r2, r3, #16
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699a      	ldr	r2, [r3, #24]
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <USB_DevInit+0x2b4>)
 8006936:	4313      	orrs	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f043 0208 	orr.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d105      	bne.n	8006960 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <USB_DevInit+0x2b8>)
 800695a:	4313      	orrs	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800696c:	b004      	add	sp, #16
 800696e:	4770      	bx	lr
 8006970:	803c3800 	.word	0x803c3800
 8006974:	40000004 	.word	0x40000004

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <USB_FlushTxFifo+0x64>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d901      	bls.n	8006998 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01b      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf2      	bge.n	8006986 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	019b      	lsls	r3, r3, #6
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a08      	ldr	r2, [pc, #32]	; (80069dc <USB_FlushTxFifo+0x64>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e006      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d0f0      	beq.n	80069b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	00030d40 	.word	0x00030d40

080069e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e018      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	daf2      	bge.n	80069ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <USB_FlushRxFifo+0x5c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e006      	b.n	8006a30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b10      	cmp	r3, #16
 8006a2c:	d0f0      	beq.n	8006a10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	00030d40 	.word	0x00030d40

08006a40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	68f9      	ldr	r1, [r7, #12]
 8006a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aa0:	f043 0302 	orr.w	r3, r3, #2
 8006aa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <USB_CoreReset+0x64>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d901      	bls.n	8006aee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e01b      	b.n	8006b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	daf2      	bge.n	8006adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f043 0201 	orr.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <USB_CoreReset+0x64>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e006      	b.n	8006b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d0f0      	beq.n	8006b06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	00030d40 	.word	0x00030d40

08006b38 <__errno>:
 8006b38:	4b01      	ldr	r3, [pc, #4]	; (8006b40 <__errno+0x8>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	24000010 	.word	0x24000010

08006b44 <__libc_init_array>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	4d0d      	ldr	r5, [pc, #52]	; (8006b7c <__libc_init_array+0x38>)
 8006b48:	4c0d      	ldr	r4, [pc, #52]	; (8006b80 <__libc_init_array+0x3c>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	2600      	movs	r6, #0
 8006b50:	42a6      	cmp	r6, r4
 8006b52:	d109      	bne.n	8006b68 <__libc_init_array+0x24>
 8006b54:	4d0b      	ldr	r5, [pc, #44]	; (8006b84 <__libc_init_array+0x40>)
 8006b56:	4c0c      	ldr	r4, [pc, #48]	; (8006b88 <__libc_init_array+0x44>)
 8006b58:	f000 fc8e 	bl	8007478 <_init>
 8006b5c:	1b64      	subs	r4, r4, r5
 8006b5e:	10a4      	asrs	r4, r4, #2
 8006b60:	2600      	movs	r6, #0
 8006b62:	42a6      	cmp	r6, r4
 8006b64:	d105      	bne.n	8006b72 <__libc_init_array+0x2e>
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6c:	4798      	blx	r3
 8006b6e:	3601      	adds	r6, #1
 8006b70:	e7ee      	b.n	8006b50 <__libc_init_array+0xc>
 8006b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b76:	4798      	blx	r3
 8006b78:	3601      	adds	r6, #1
 8006b7a:	e7f2      	b.n	8006b62 <__libc_init_array+0x1e>
 8006b7c:	080075b0 	.word	0x080075b0
 8006b80:	080075b0 	.word	0x080075b0
 8006b84:	080075b0 	.word	0x080075b0
 8006b88:	080075b4 	.word	0x080075b4

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <siprintf>:
 8006b9c:	b40e      	push	{r1, r2, r3}
 8006b9e:	b500      	push	{lr}
 8006ba0:	b09c      	sub	sp, #112	; 0x70
 8006ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ba4:	9002      	str	r0, [sp, #8]
 8006ba6:	9006      	str	r0, [sp, #24]
 8006ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bac:	4809      	ldr	r0, [pc, #36]	; (8006bd4 <siprintf+0x38>)
 8006bae:	9107      	str	r1, [sp, #28]
 8006bb0:	9104      	str	r1, [sp, #16]
 8006bb2:	4909      	ldr	r1, [pc, #36]	; (8006bd8 <siprintf+0x3c>)
 8006bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bb8:	9105      	str	r1, [sp, #20]
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	a902      	add	r1, sp, #8
 8006bc0:	f000 f868 	bl	8006c94 <_svfiprintf_r>
 8006bc4:	9b02      	ldr	r3, [sp, #8]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	b01c      	add	sp, #112	; 0x70
 8006bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd0:	b003      	add	sp, #12
 8006bd2:	4770      	bx	lr
 8006bd4:	24000010 	.word	0x24000010
 8006bd8:	ffff0208 	.word	0xffff0208

08006bdc <__ssputs_r>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	688e      	ldr	r6, [r1, #8]
 8006be2:	429e      	cmp	r6, r3
 8006be4:	4682      	mov	sl, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	4690      	mov	r8, r2
 8006bea:	461f      	mov	r7, r3
 8006bec:	d838      	bhi.n	8006c60 <__ssputs_r+0x84>
 8006bee:	898a      	ldrh	r2, [r1, #12]
 8006bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bf4:	d032      	beq.n	8006c5c <__ssputs_r+0x80>
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	6909      	ldr	r1, [r1, #16]
 8006bfa:	eba5 0901 	sub.w	r9, r5, r1
 8006bfe:	6965      	ldr	r5, [r4, #20]
 8006c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c08:	3301      	adds	r3, #1
 8006c0a:	444b      	add	r3, r9
 8006c0c:	106d      	asrs	r5, r5, #1
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	bf38      	it	cc
 8006c12:	461d      	movcc	r5, r3
 8006c14:	0553      	lsls	r3, r2, #21
 8006c16:	d531      	bpl.n	8006c7c <__ssputs_r+0xa0>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f000 fb63 	bl	80072e4 <_malloc_r>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	b950      	cbnz	r0, 8006c38 <__ssputs_r+0x5c>
 8006c22:	230c      	movs	r3, #12
 8006c24:	f8ca 3000 	str.w	r3, [sl]
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c38:	6921      	ldr	r1, [r4, #16]
 8006c3a:	464a      	mov	r2, r9
 8006c3c:	f000 fabe 	bl	80071bc <memcpy>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	6126      	str	r6, [r4, #16]
 8006c4e:	6165      	str	r5, [r4, #20]
 8006c50:	444e      	add	r6, r9
 8006c52:	eba5 0509 	sub.w	r5, r5, r9
 8006c56:	6026      	str	r6, [r4, #0]
 8006c58:	60a5      	str	r5, [r4, #8]
 8006c5a:	463e      	mov	r6, r7
 8006c5c:	42be      	cmp	r6, r7
 8006c5e:	d900      	bls.n	8006c62 <__ssputs_r+0x86>
 8006c60:	463e      	mov	r6, r7
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	4632      	mov	r2, r6
 8006c66:	4641      	mov	r1, r8
 8006c68:	f000 fab6 	bl	80071d8 <memmove>
 8006c6c:	68a3      	ldr	r3, [r4, #8]
 8006c6e:	1b9b      	subs	r3, r3, r6
 8006c70:	60a3      	str	r3, [r4, #8]
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	4433      	add	r3, r6
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	2000      	movs	r0, #0
 8006c7a:	e7db      	b.n	8006c34 <__ssputs_r+0x58>
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	f000 fba5 	bl	80073cc <_realloc_r>
 8006c82:	4606      	mov	r6, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d1e1      	bne.n	8006c4c <__ssputs_r+0x70>
 8006c88:	6921      	ldr	r1, [r4, #16]
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f000 fabe 	bl	800720c <_free_r>
 8006c90:	e7c7      	b.n	8006c22 <__ssputs_r+0x46>
	...

08006c94 <_svfiprintf_r>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	4698      	mov	r8, r3
 8006c9a:	898b      	ldrh	r3, [r1, #12]
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	b09d      	sub	sp, #116	; 0x74
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	d50e      	bpl.n	8006cc6 <_svfiprintf_r+0x32>
 8006ca8:	690b      	ldr	r3, [r1, #16]
 8006caa:	b963      	cbnz	r3, 8006cc6 <_svfiprintf_r+0x32>
 8006cac:	2140      	movs	r1, #64	; 0x40
 8006cae:	f000 fb19 	bl	80072e4 <_malloc_r>
 8006cb2:	6028      	str	r0, [r5, #0]
 8006cb4:	6128      	str	r0, [r5, #16]
 8006cb6:	b920      	cbnz	r0, 8006cc2 <_svfiprintf_r+0x2e>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e0d1      	b.n	8006e66 <_svfiprintf_r+0x1d2>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	616b      	str	r3, [r5, #20]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cca:	2320      	movs	r3, #32
 8006ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd4:	2330      	movs	r3, #48	; 0x30
 8006cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e80 <_svfiprintf_r+0x1ec>
 8006cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cde:	f04f 0901 	mov.w	r9, #1
 8006ce2:	4623      	mov	r3, r4
 8006ce4:	469a      	mov	sl, r3
 8006ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cea:	b10a      	cbz	r2, 8006cf0 <_svfiprintf_r+0x5c>
 8006cec:	2a25      	cmp	r2, #37	; 0x25
 8006cee:	d1f9      	bne.n	8006ce4 <_svfiprintf_r+0x50>
 8006cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf4:	d00b      	beq.n	8006d0e <_svfiprintf_r+0x7a>
 8006cf6:	465b      	mov	r3, fp
 8006cf8:	4622      	mov	r2, r4
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4638      	mov	r0, r7
 8006cfe:	f7ff ff6d 	bl	8006bdc <__ssputs_r>
 8006d02:	3001      	adds	r0, #1
 8006d04:	f000 80aa 	beq.w	8006e5c <_svfiprintf_r+0x1c8>
 8006d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d0a:	445a      	add	r2, fp
 8006d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80a2 	beq.w	8006e5c <_svfiprintf_r+0x1c8>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d22:	f10a 0a01 	add.w	sl, sl, #1
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	9307      	str	r3, [sp, #28]
 8006d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d30:	4654      	mov	r4, sl
 8006d32:	2205      	movs	r2, #5
 8006d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d38:	4851      	ldr	r0, [pc, #324]	; (8006e80 <_svfiprintf_r+0x1ec>)
 8006d3a:	f7f9 fad1 	bl	80002e0 <memchr>
 8006d3e:	9a04      	ldr	r2, [sp, #16]
 8006d40:	b9d8      	cbnz	r0, 8006d7a <_svfiprintf_r+0xe6>
 8006d42:	06d0      	lsls	r0, r2, #27
 8006d44:	bf44      	itt	mi
 8006d46:	2320      	movmi	r3, #32
 8006d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d4c:	0711      	lsls	r1, r2, #28
 8006d4e:	bf44      	itt	mi
 8006d50:	232b      	movmi	r3, #43	; 0x2b
 8006d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d56:	f89a 3000 	ldrb.w	r3, [sl]
 8006d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5c:	d015      	beq.n	8006d8a <_svfiprintf_r+0xf6>
 8006d5e:	9a07      	ldr	r2, [sp, #28]
 8006d60:	4654      	mov	r4, sl
 8006d62:	2000      	movs	r0, #0
 8006d64:	f04f 0c0a 	mov.w	ip, #10
 8006d68:	4621      	mov	r1, r4
 8006d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d6e:	3b30      	subs	r3, #48	; 0x30
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d94e      	bls.n	8006e12 <_svfiprintf_r+0x17e>
 8006d74:	b1b0      	cbz	r0, 8006da4 <_svfiprintf_r+0x110>
 8006d76:	9207      	str	r2, [sp, #28]
 8006d78:	e014      	b.n	8006da4 <_svfiprintf_r+0x110>
 8006d7a:	eba0 0308 	sub.w	r3, r0, r8
 8006d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d82:	4313      	orrs	r3, r2
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	46a2      	mov	sl, r4
 8006d88:	e7d2      	b.n	8006d30 <_svfiprintf_r+0x9c>
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	1d19      	adds	r1, r3, #4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	9103      	str	r1, [sp, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bfbb      	ittet	lt
 8006d96:	425b      	neglt	r3, r3
 8006d98:	f042 0202 	orrlt.w	r2, r2, #2
 8006d9c:	9307      	strge	r3, [sp, #28]
 8006d9e:	9307      	strlt	r3, [sp, #28]
 8006da0:	bfb8      	it	lt
 8006da2:	9204      	strlt	r2, [sp, #16]
 8006da4:	7823      	ldrb	r3, [r4, #0]
 8006da6:	2b2e      	cmp	r3, #46	; 0x2e
 8006da8:	d10c      	bne.n	8006dc4 <_svfiprintf_r+0x130>
 8006daa:	7863      	ldrb	r3, [r4, #1]
 8006dac:	2b2a      	cmp	r3, #42	; 0x2a
 8006dae:	d135      	bne.n	8006e1c <_svfiprintf_r+0x188>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	9203      	str	r2, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfb8      	it	lt
 8006dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006dc0:	3402      	adds	r4, #2
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e90 <_svfiprintf_r+0x1fc>
 8006dc8:	7821      	ldrb	r1, [r4, #0]
 8006dca:	2203      	movs	r2, #3
 8006dcc:	4650      	mov	r0, sl
 8006dce:	f7f9 fa87 	bl	80002e0 <memchr>
 8006dd2:	b140      	cbz	r0, 8006de6 <_svfiprintf_r+0x152>
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	eba0 000a 	sub.w	r0, r0, sl
 8006dda:	fa03 f000 	lsl.w	r0, r3, r0
 8006dde:	9b04      	ldr	r3, [sp, #16]
 8006de0:	4303      	orrs	r3, r0
 8006de2:	3401      	adds	r4, #1
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dea:	4826      	ldr	r0, [pc, #152]	; (8006e84 <_svfiprintf_r+0x1f0>)
 8006dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006df0:	2206      	movs	r2, #6
 8006df2:	f7f9 fa75 	bl	80002e0 <memchr>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d038      	beq.n	8006e6c <_svfiprintf_r+0x1d8>
 8006dfa:	4b23      	ldr	r3, [pc, #140]	; (8006e88 <_svfiprintf_r+0x1f4>)
 8006dfc:	bb1b      	cbnz	r3, 8006e46 <_svfiprintf_r+0x1b2>
 8006dfe:	9b03      	ldr	r3, [sp, #12]
 8006e00:	3307      	adds	r3, #7
 8006e02:	f023 0307 	bic.w	r3, r3, #7
 8006e06:	3308      	adds	r3, #8
 8006e08:	9303      	str	r3, [sp, #12]
 8006e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0c:	4433      	add	r3, r6
 8006e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e10:	e767      	b.n	8006ce2 <_svfiprintf_r+0x4e>
 8006e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e16:	460c      	mov	r4, r1
 8006e18:	2001      	movs	r0, #1
 8006e1a:	e7a5      	b.n	8006d68 <_svfiprintf_r+0xd4>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	3401      	adds	r4, #1
 8006e20:	9305      	str	r3, [sp, #20]
 8006e22:	4619      	mov	r1, r3
 8006e24:	f04f 0c0a 	mov.w	ip, #10
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2e:	3a30      	subs	r2, #48	; 0x30
 8006e30:	2a09      	cmp	r2, #9
 8006e32:	d903      	bls.n	8006e3c <_svfiprintf_r+0x1a8>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0c5      	beq.n	8006dc4 <_svfiprintf_r+0x130>
 8006e38:	9105      	str	r1, [sp, #20]
 8006e3a:	e7c3      	b.n	8006dc4 <_svfiprintf_r+0x130>
 8006e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e40:	4604      	mov	r4, r0
 8006e42:	2301      	movs	r3, #1
 8006e44:	e7f0      	b.n	8006e28 <_svfiprintf_r+0x194>
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	462a      	mov	r2, r5
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <_svfiprintf_r+0x1f8>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	4638      	mov	r0, r7
 8006e52:	f3af 8000 	nop.w
 8006e56:	1c42      	adds	r2, r0, #1
 8006e58:	4606      	mov	r6, r0
 8006e5a:	d1d6      	bne.n	8006e0a <_svfiprintf_r+0x176>
 8006e5c:	89ab      	ldrh	r3, [r5, #12]
 8006e5e:	065b      	lsls	r3, r3, #25
 8006e60:	f53f af2c 	bmi.w	8006cbc <_svfiprintf_r+0x28>
 8006e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e66:	b01d      	add	sp, #116	; 0x74
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	ab03      	add	r3, sp, #12
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	462a      	mov	r2, r5
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <_svfiprintf_r+0x1f8>)
 8006e74:	a904      	add	r1, sp, #16
 8006e76:	4638      	mov	r0, r7
 8006e78:	f000 f87a 	bl	8006f70 <_printf_i>
 8006e7c:	e7eb      	b.n	8006e56 <_svfiprintf_r+0x1c2>
 8006e7e:	bf00      	nop
 8006e80:	08007574 	.word	0x08007574
 8006e84:	0800757e 	.word	0x0800757e
 8006e88:	00000000 	.word	0x00000000
 8006e8c:	08006bdd 	.word	0x08006bdd
 8006e90:	0800757a 	.word	0x0800757a

08006e94 <_printf_common>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	4616      	mov	r6, r2
 8006e9a:	4699      	mov	r9, r3
 8006e9c:	688a      	ldr	r2, [r1, #8]
 8006e9e:	690b      	ldr	r3, [r1, #16]
 8006ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bfb8      	it	lt
 8006ea8:	4613      	movlt	r3, r2
 8006eaa:	6033      	str	r3, [r6, #0]
 8006eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	b10a      	cbz	r2, 8006eba <_printf_common+0x26>
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	0699      	lsls	r1, r3, #26
 8006ebe:	bf42      	ittt	mi
 8006ec0:	6833      	ldrmi	r3, [r6, #0]
 8006ec2:	3302      	addmi	r3, #2
 8006ec4:	6033      	strmi	r3, [r6, #0]
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	f015 0506 	ands.w	r5, r5, #6
 8006ecc:	d106      	bne.n	8006edc <_printf_common+0x48>
 8006ece:	f104 0a19 	add.w	sl, r4, #25
 8006ed2:	68e3      	ldr	r3, [r4, #12]
 8006ed4:	6832      	ldr	r2, [r6, #0]
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	42ab      	cmp	r3, r5
 8006eda:	dc26      	bgt.n	8006f2a <_printf_common+0x96>
 8006edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ee0:	1e13      	subs	r3, r2, #0
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	bf18      	it	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	0692      	lsls	r2, r2, #26
 8006eea:	d42b      	bmi.n	8006f44 <_printf_common+0xb0>
 8006eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	47c0      	blx	r8
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d01e      	beq.n	8006f38 <_printf_common+0xa4>
 8006efa:	6823      	ldr	r3, [r4, #0]
 8006efc:	68e5      	ldr	r5, [r4, #12]
 8006efe:	6832      	ldr	r2, [r6, #0]
 8006f00:	f003 0306 	and.w	r3, r3, #6
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	bf08      	it	eq
 8006f08:	1aad      	subeq	r5, r5, r2
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	6922      	ldr	r2, [r4, #16]
 8006f0e:	bf0c      	ite	eq
 8006f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f14:	2500      	movne	r5, #0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	bfc4      	itt	gt
 8006f1a:	1a9b      	subgt	r3, r3, r2
 8006f1c:	18ed      	addgt	r5, r5, r3
 8006f1e:	2600      	movs	r6, #0
 8006f20:	341a      	adds	r4, #26
 8006f22:	42b5      	cmp	r5, r6
 8006f24:	d11a      	bne.n	8006f5c <_printf_common+0xc8>
 8006f26:	2000      	movs	r0, #0
 8006f28:	e008      	b.n	8006f3c <_printf_common+0xa8>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	4649      	mov	r1, r9
 8006f30:	4638      	mov	r0, r7
 8006f32:	47c0      	blx	r8
 8006f34:	3001      	adds	r0, #1
 8006f36:	d103      	bne.n	8006f40 <_printf_common+0xac>
 8006f38:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f40:	3501      	adds	r5, #1
 8006f42:	e7c6      	b.n	8006ed2 <_printf_common+0x3e>
 8006f44:	18e1      	adds	r1, r4, r3
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	2030      	movs	r0, #48	; 0x30
 8006f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f4e:	4422      	add	r2, r4
 8006f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f58:	3302      	adds	r3, #2
 8006f5a:	e7c7      	b.n	8006eec <_printf_common+0x58>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4622      	mov	r2, r4
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d0e6      	beq.n	8006f38 <_printf_common+0xa4>
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7d9      	b.n	8006f22 <_printf_common+0x8e>
	...

08006f70 <_printf_i>:
 8006f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	7e0f      	ldrb	r7, [r1, #24]
 8006f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f78:	2f78      	cmp	r7, #120	; 0x78
 8006f7a:	4691      	mov	r9, r2
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	469a      	mov	sl, r3
 8006f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f86:	d807      	bhi.n	8006f98 <_printf_i+0x28>
 8006f88:	2f62      	cmp	r7, #98	; 0x62
 8006f8a:	d80a      	bhi.n	8006fa2 <_printf_i+0x32>
 8006f8c:	2f00      	cmp	r7, #0
 8006f8e:	f000 80d8 	beq.w	8007142 <_printf_i+0x1d2>
 8006f92:	2f58      	cmp	r7, #88	; 0x58
 8006f94:	f000 80a3 	beq.w	80070de <_printf_i+0x16e>
 8006f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fa0:	e03a      	b.n	8007018 <_printf_i+0xa8>
 8006fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fa6:	2b15      	cmp	r3, #21
 8006fa8:	d8f6      	bhi.n	8006f98 <_printf_i+0x28>
 8006faa:	a101      	add	r1, pc, #4	; (adr r1, 8006fb0 <_printf_i+0x40>)
 8006fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fb0:	08007009 	.word	0x08007009
 8006fb4:	0800701d 	.word	0x0800701d
 8006fb8:	08006f99 	.word	0x08006f99
 8006fbc:	08006f99 	.word	0x08006f99
 8006fc0:	08006f99 	.word	0x08006f99
 8006fc4:	08006f99 	.word	0x08006f99
 8006fc8:	0800701d 	.word	0x0800701d
 8006fcc:	08006f99 	.word	0x08006f99
 8006fd0:	08006f99 	.word	0x08006f99
 8006fd4:	08006f99 	.word	0x08006f99
 8006fd8:	08006f99 	.word	0x08006f99
 8006fdc:	08007129 	.word	0x08007129
 8006fe0:	0800704d 	.word	0x0800704d
 8006fe4:	0800710b 	.word	0x0800710b
 8006fe8:	08006f99 	.word	0x08006f99
 8006fec:	08006f99 	.word	0x08006f99
 8006ff0:	0800714b 	.word	0x0800714b
 8006ff4:	08006f99 	.word	0x08006f99
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08006f99 	.word	0x08006f99
 8007000:	08006f99 	.word	0x08006f99
 8007004:	08007113 	.word	0x08007113
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	1d1a      	adds	r2, r3, #4
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007018:	2301      	movs	r3, #1
 800701a:	e0a3      	b.n	8007164 <_printf_i+0x1f4>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	6829      	ldr	r1, [r5, #0]
 8007020:	0606      	lsls	r6, r0, #24
 8007022:	f101 0304 	add.w	r3, r1, #4
 8007026:	d50a      	bpl.n	800703e <_printf_i+0xce>
 8007028:	680e      	ldr	r6, [r1, #0]
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	2e00      	cmp	r6, #0
 800702e:	da03      	bge.n	8007038 <_printf_i+0xc8>
 8007030:	232d      	movs	r3, #45	; 0x2d
 8007032:	4276      	negs	r6, r6
 8007034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007038:	485e      	ldr	r0, [pc, #376]	; (80071b4 <_printf_i+0x244>)
 800703a:	230a      	movs	r3, #10
 800703c:	e019      	b.n	8007072 <_printf_i+0x102>
 800703e:	680e      	ldr	r6, [r1, #0]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007046:	bf18      	it	ne
 8007048:	b236      	sxthne	r6, r6
 800704a:	e7ef      	b.n	800702c <_printf_i+0xbc>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	1d19      	adds	r1, r3, #4
 8007052:	6029      	str	r1, [r5, #0]
 8007054:	0601      	lsls	r1, r0, #24
 8007056:	d501      	bpl.n	800705c <_printf_i+0xec>
 8007058:	681e      	ldr	r6, [r3, #0]
 800705a:	e002      	b.n	8007062 <_printf_i+0xf2>
 800705c:	0646      	lsls	r6, r0, #25
 800705e:	d5fb      	bpl.n	8007058 <_printf_i+0xe8>
 8007060:	881e      	ldrh	r6, [r3, #0]
 8007062:	4854      	ldr	r0, [pc, #336]	; (80071b4 <_printf_i+0x244>)
 8007064:	2f6f      	cmp	r7, #111	; 0x6f
 8007066:	bf0c      	ite	eq
 8007068:	2308      	moveq	r3, #8
 800706a:	230a      	movne	r3, #10
 800706c:	2100      	movs	r1, #0
 800706e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007072:	6865      	ldr	r5, [r4, #4]
 8007074:	60a5      	str	r5, [r4, #8]
 8007076:	2d00      	cmp	r5, #0
 8007078:	bfa2      	ittt	ge
 800707a:	6821      	ldrge	r1, [r4, #0]
 800707c:	f021 0104 	bicge.w	r1, r1, #4
 8007080:	6021      	strge	r1, [r4, #0]
 8007082:	b90e      	cbnz	r6, 8007088 <_printf_i+0x118>
 8007084:	2d00      	cmp	r5, #0
 8007086:	d04d      	beq.n	8007124 <_printf_i+0x1b4>
 8007088:	4615      	mov	r5, r2
 800708a:	fbb6 f1f3 	udiv	r1, r6, r3
 800708e:	fb03 6711 	mls	r7, r3, r1, r6
 8007092:	5dc7      	ldrb	r7, [r0, r7]
 8007094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007098:	4637      	mov	r7, r6
 800709a:	42bb      	cmp	r3, r7
 800709c:	460e      	mov	r6, r1
 800709e:	d9f4      	bls.n	800708a <_printf_i+0x11a>
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d10b      	bne.n	80070bc <_printf_i+0x14c>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07de      	lsls	r6, r3, #31
 80070a8:	d508      	bpl.n	80070bc <_printf_i+0x14c>
 80070aa:	6923      	ldr	r3, [r4, #16]
 80070ac:	6861      	ldr	r1, [r4, #4]
 80070ae:	4299      	cmp	r1, r3
 80070b0:	bfde      	ittt	le
 80070b2:	2330      	movle	r3, #48	; 0x30
 80070b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070bc:	1b52      	subs	r2, r2, r5
 80070be:	6122      	str	r2, [r4, #16]
 80070c0:	f8cd a000 	str.w	sl, [sp]
 80070c4:	464b      	mov	r3, r9
 80070c6:	aa03      	add	r2, sp, #12
 80070c8:	4621      	mov	r1, r4
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff fee2 	bl	8006e94 <_printf_common>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d14c      	bne.n	800716e <_printf_i+0x1fe>
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	b004      	add	sp, #16
 80070da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070de:	4835      	ldr	r0, [pc, #212]	; (80071b4 <_printf_i+0x244>)
 80070e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070e4:	6829      	ldr	r1, [r5, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80070ec:	6029      	str	r1, [r5, #0]
 80070ee:	061d      	lsls	r5, r3, #24
 80070f0:	d514      	bpl.n	800711c <_printf_i+0x1ac>
 80070f2:	07df      	lsls	r7, r3, #31
 80070f4:	bf44      	itt	mi
 80070f6:	f043 0320 	orrmi.w	r3, r3, #32
 80070fa:	6023      	strmi	r3, [r4, #0]
 80070fc:	b91e      	cbnz	r6, 8007106 <_printf_i+0x196>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f023 0320 	bic.w	r3, r3, #32
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	2310      	movs	r3, #16
 8007108:	e7b0      	b.n	800706c <_printf_i+0xfc>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f043 0320 	orr.w	r3, r3, #32
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	2378      	movs	r3, #120	; 0x78
 8007114:	4828      	ldr	r0, [pc, #160]	; (80071b8 <_printf_i+0x248>)
 8007116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800711a:	e7e3      	b.n	80070e4 <_printf_i+0x174>
 800711c:	0659      	lsls	r1, r3, #25
 800711e:	bf48      	it	mi
 8007120:	b2b6      	uxthmi	r6, r6
 8007122:	e7e6      	b.n	80070f2 <_printf_i+0x182>
 8007124:	4615      	mov	r5, r2
 8007126:	e7bb      	b.n	80070a0 <_printf_i+0x130>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	6826      	ldr	r6, [r4, #0]
 800712c:	6961      	ldr	r1, [r4, #20]
 800712e:	1d18      	adds	r0, r3, #4
 8007130:	6028      	str	r0, [r5, #0]
 8007132:	0635      	lsls	r5, r6, #24
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	d501      	bpl.n	800713c <_printf_i+0x1cc>
 8007138:	6019      	str	r1, [r3, #0]
 800713a:	e002      	b.n	8007142 <_printf_i+0x1d2>
 800713c:	0670      	lsls	r0, r6, #25
 800713e:	d5fb      	bpl.n	8007138 <_printf_i+0x1c8>
 8007140:	8019      	strh	r1, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	4615      	mov	r5, r2
 8007148:	e7ba      	b.n	80070c0 <_printf_i+0x150>
 800714a:	682b      	ldr	r3, [r5, #0]
 800714c:	1d1a      	adds	r2, r3, #4
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	681d      	ldr	r5, [r3, #0]
 8007152:	6862      	ldr	r2, [r4, #4]
 8007154:	2100      	movs	r1, #0
 8007156:	4628      	mov	r0, r5
 8007158:	f7f9 f8c2 	bl	80002e0 <memchr>
 800715c:	b108      	cbz	r0, 8007162 <_printf_i+0x1f2>
 800715e:	1b40      	subs	r0, r0, r5
 8007160:	6060      	str	r0, [r4, #4]
 8007162:	6863      	ldr	r3, [r4, #4]
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	2300      	movs	r3, #0
 8007168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800716c:	e7a8      	b.n	80070c0 <_printf_i+0x150>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	462a      	mov	r2, r5
 8007172:	4649      	mov	r1, r9
 8007174:	4640      	mov	r0, r8
 8007176:	47d0      	blx	sl
 8007178:	3001      	adds	r0, #1
 800717a:	d0ab      	beq.n	80070d4 <_printf_i+0x164>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	079b      	lsls	r3, r3, #30
 8007180:	d413      	bmi.n	80071aa <_printf_i+0x23a>
 8007182:	68e0      	ldr	r0, [r4, #12]
 8007184:	9b03      	ldr	r3, [sp, #12]
 8007186:	4298      	cmp	r0, r3
 8007188:	bfb8      	it	lt
 800718a:	4618      	movlt	r0, r3
 800718c:	e7a4      	b.n	80070d8 <_printf_i+0x168>
 800718e:	2301      	movs	r3, #1
 8007190:	4632      	mov	r2, r6
 8007192:	4649      	mov	r1, r9
 8007194:	4640      	mov	r0, r8
 8007196:	47d0      	blx	sl
 8007198:	3001      	adds	r0, #1
 800719a:	d09b      	beq.n	80070d4 <_printf_i+0x164>
 800719c:	3501      	adds	r5, #1
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	9903      	ldr	r1, [sp, #12]
 80071a2:	1a5b      	subs	r3, r3, r1
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dcf2      	bgt.n	800718e <_printf_i+0x21e>
 80071a8:	e7eb      	b.n	8007182 <_printf_i+0x212>
 80071aa:	2500      	movs	r5, #0
 80071ac:	f104 0619 	add.w	r6, r4, #25
 80071b0:	e7f5      	b.n	800719e <_printf_i+0x22e>
 80071b2:	bf00      	nop
 80071b4:	08007585 	.word	0x08007585
 80071b8:	08007596 	.word	0x08007596

080071bc <memcpy>:
 80071bc:	440a      	add	r2, r1
 80071be:	4291      	cmp	r1, r2
 80071c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071c4:	d100      	bne.n	80071c8 <memcpy+0xc>
 80071c6:	4770      	bx	lr
 80071c8:	b510      	push	{r4, lr}
 80071ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d2:	4291      	cmp	r1, r2
 80071d4:	d1f9      	bne.n	80071ca <memcpy+0xe>
 80071d6:	bd10      	pop	{r4, pc}

080071d8 <memmove>:
 80071d8:	4288      	cmp	r0, r1
 80071da:	b510      	push	{r4, lr}
 80071dc:	eb01 0402 	add.w	r4, r1, r2
 80071e0:	d902      	bls.n	80071e8 <memmove+0x10>
 80071e2:	4284      	cmp	r4, r0
 80071e4:	4623      	mov	r3, r4
 80071e6:	d807      	bhi.n	80071f8 <memmove+0x20>
 80071e8:	1e43      	subs	r3, r0, #1
 80071ea:	42a1      	cmp	r1, r4
 80071ec:	d008      	beq.n	8007200 <memmove+0x28>
 80071ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071f6:	e7f8      	b.n	80071ea <memmove+0x12>
 80071f8:	4402      	add	r2, r0
 80071fa:	4601      	mov	r1, r0
 80071fc:	428a      	cmp	r2, r1
 80071fe:	d100      	bne.n	8007202 <memmove+0x2a>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800720a:	e7f7      	b.n	80071fc <memmove+0x24>

0800720c <_free_r>:
 800720c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800720e:	2900      	cmp	r1, #0
 8007210:	d044      	beq.n	800729c <_free_r+0x90>
 8007212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007216:	9001      	str	r0, [sp, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	f1a1 0404 	sub.w	r4, r1, #4
 800721e:	bfb8      	it	lt
 8007220:	18e4      	addlt	r4, r4, r3
 8007222:	f000 f913 	bl	800744c <__malloc_lock>
 8007226:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <_free_r+0x94>)
 8007228:	9801      	ldr	r0, [sp, #4]
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	b933      	cbnz	r3, 800723c <_free_r+0x30>
 800722e:	6063      	str	r3, [r4, #4]
 8007230:	6014      	str	r4, [r2, #0]
 8007232:	b003      	add	sp, #12
 8007234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007238:	f000 b90e 	b.w	8007458 <__malloc_unlock>
 800723c:	42a3      	cmp	r3, r4
 800723e:	d908      	bls.n	8007252 <_free_r+0x46>
 8007240:	6825      	ldr	r5, [r4, #0]
 8007242:	1961      	adds	r1, r4, r5
 8007244:	428b      	cmp	r3, r1
 8007246:	bf01      	itttt	eq
 8007248:	6819      	ldreq	r1, [r3, #0]
 800724a:	685b      	ldreq	r3, [r3, #4]
 800724c:	1949      	addeq	r1, r1, r5
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	e7ed      	b.n	800722e <_free_r+0x22>
 8007252:	461a      	mov	r2, r3
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	b10b      	cbz	r3, 800725c <_free_r+0x50>
 8007258:	42a3      	cmp	r3, r4
 800725a:	d9fa      	bls.n	8007252 <_free_r+0x46>
 800725c:	6811      	ldr	r1, [r2, #0]
 800725e:	1855      	adds	r5, r2, r1
 8007260:	42a5      	cmp	r5, r4
 8007262:	d10b      	bne.n	800727c <_free_r+0x70>
 8007264:	6824      	ldr	r4, [r4, #0]
 8007266:	4421      	add	r1, r4
 8007268:	1854      	adds	r4, r2, r1
 800726a:	42a3      	cmp	r3, r4
 800726c:	6011      	str	r1, [r2, #0]
 800726e:	d1e0      	bne.n	8007232 <_free_r+0x26>
 8007270:	681c      	ldr	r4, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	6053      	str	r3, [r2, #4]
 8007276:	4421      	add	r1, r4
 8007278:	6011      	str	r1, [r2, #0]
 800727a:	e7da      	b.n	8007232 <_free_r+0x26>
 800727c:	d902      	bls.n	8007284 <_free_r+0x78>
 800727e:	230c      	movs	r3, #12
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	e7d6      	b.n	8007232 <_free_r+0x26>
 8007284:	6825      	ldr	r5, [r4, #0]
 8007286:	1961      	adds	r1, r4, r5
 8007288:	428b      	cmp	r3, r1
 800728a:	bf04      	itt	eq
 800728c:	6819      	ldreq	r1, [r3, #0]
 800728e:	685b      	ldreq	r3, [r3, #4]
 8007290:	6063      	str	r3, [r4, #4]
 8007292:	bf04      	itt	eq
 8007294:	1949      	addeq	r1, r1, r5
 8007296:	6021      	streq	r1, [r4, #0]
 8007298:	6054      	str	r4, [r2, #4]
 800729a:	e7ca      	b.n	8007232 <_free_r+0x26>
 800729c:	b003      	add	sp, #12
 800729e:	bd30      	pop	{r4, r5, pc}
 80072a0:	240008fc 	.word	0x240008fc

080072a4 <sbrk_aligned>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4e0e      	ldr	r6, [pc, #56]	; (80072e0 <sbrk_aligned+0x3c>)
 80072a8:	460c      	mov	r4, r1
 80072aa:	6831      	ldr	r1, [r6, #0]
 80072ac:	4605      	mov	r5, r0
 80072ae:	b911      	cbnz	r1, 80072b6 <sbrk_aligned+0x12>
 80072b0:	f000 f8bc 	bl	800742c <_sbrk_r>
 80072b4:	6030      	str	r0, [r6, #0]
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 f8b7 	bl	800742c <_sbrk_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d00a      	beq.n	80072d8 <sbrk_aligned+0x34>
 80072c2:	1cc4      	adds	r4, r0, #3
 80072c4:	f024 0403 	bic.w	r4, r4, #3
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d007      	beq.n	80072dc <sbrk_aligned+0x38>
 80072cc:	1a21      	subs	r1, r4, r0
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f8ac 	bl	800742c <_sbrk_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d101      	bne.n	80072dc <sbrk_aligned+0x38>
 80072d8:	f04f 34ff 	mov.w	r4, #4294967295
 80072dc:	4620      	mov	r0, r4
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	24000900 	.word	0x24000900

080072e4 <_malloc_r>:
 80072e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072e8:	1ccd      	adds	r5, r1, #3
 80072ea:	f025 0503 	bic.w	r5, r5, #3
 80072ee:	3508      	adds	r5, #8
 80072f0:	2d0c      	cmp	r5, #12
 80072f2:	bf38      	it	cc
 80072f4:	250c      	movcc	r5, #12
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	4607      	mov	r7, r0
 80072fa:	db01      	blt.n	8007300 <_malloc_r+0x1c>
 80072fc:	42a9      	cmp	r1, r5
 80072fe:	d905      	bls.n	800730c <_malloc_r+0x28>
 8007300:	230c      	movs	r3, #12
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	2600      	movs	r6, #0
 8007306:	4630      	mov	r0, r6
 8007308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800730c:	4e2e      	ldr	r6, [pc, #184]	; (80073c8 <_malloc_r+0xe4>)
 800730e:	f000 f89d 	bl	800744c <__malloc_lock>
 8007312:	6833      	ldr	r3, [r6, #0]
 8007314:	461c      	mov	r4, r3
 8007316:	bb34      	cbnz	r4, 8007366 <_malloc_r+0x82>
 8007318:	4629      	mov	r1, r5
 800731a:	4638      	mov	r0, r7
 800731c:	f7ff ffc2 	bl	80072a4 <sbrk_aligned>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	4604      	mov	r4, r0
 8007324:	d14d      	bne.n	80073c2 <_malloc_r+0xde>
 8007326:	6834      	ldr	r4, [r6, #0]
 8007328:	4626      	mov	r6, r4
 800732a:	2e00      	cmp	r6, #0
 800732c:	d140      	bne.n	80073b0 <_malloc_r+0xcc>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	4631      	mov	r1, r6
 8007332:	4638      	mov	r0, r7
 8007334:	eb04 0803 	add.w	r8, r4, r3
 8007338:	f000 f878 	bl	800742c <_sbrk_r>
 800733c:	4580      	cmp	r8, r0
 800733e:	d13a      	bne.n	80073b6 <_malloc_r+0xd2>
 8007340:	6821      	ldr	r1, [r4, #0]
 8007342:	3503      	adds	r5, #3
 8007344:	1a6d      	subs	r5, r5, r1
 8007346:	f025 0503 	bic.w	r5, r5, #3
 800734a:	3508      	adds	r5, #8
 800734c:	2d0c      	cmp	r5, #12
 800734e:	bf38      	it	cc
 8007350:	250c      	movcc	r5, #12
 8007352:	4629      	mov	r1, r5
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff ffa5 	bl	80072a4 <sbrk_aligned>
 800735a:	3001      	adds	r0, #1
 800735c:	d02b      	beq.n	80073b6 <_malloc_r+0xd2>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	442b      	add	r3, r5
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	e00e      	b.n	8007384 <_malloc_r+0xa0>
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	1b52      	subs	r2, r2, r5
 800736a:	d41e      	bmi.n	80073aa <_malloc_r+0xc6>
 800736c:	2a0b      	cmp	r2, #11
 800736e:	d916      	bls.n	800739e <_malloc_r+0xba>
 8007370:	1961      	adds	r1, r4, r5
 8007372:	42a3      	cmp	r3, r4
 8007374:	6025      	str	r5, [r4, #0]
 8007376:	bf18      	it	ne
 8007378:	6059      	strne	r1, [r3, #4]
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	bf08      	it	eq
 800737e:	6031      	streq	r1, [r6, #0]
 8007380:	5162      	str	r2, [r4, r5]
 8007382:	604b      	str	r3, [r1, #4]
 8007384:	4638      	mov	r0, r7
 8007386:	f104 060b 	add.w	r6, r4, #11
 800738a:	f000 f865 	bl	8007458 <__malloc_unlock>
 800738e:	f026 0607 	bic.w	r6, r6, #7
 8007392:	1d23      	adds	r3, r4, #4
 8007394:	1af2      	subs	r2, r6, r3
 8007396:	d0b6      	beq.n	8007306 <_malloc_r+0x22>
 8007398:	1b9b      	subs	r3, r3, r6
 800739a:	50a3      	str	r3, [r4, r2]
 800739c:	e7b3      	b.n	8007306 <_malloc_r+0x22>
 800739e:	6862      	ldr	r2, [r4, #4]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	bf0c      	ite	eq
 80073a4:	6032      	streq	r2, [r6, #0]
 80073a6:	605a      	strne	r2, [r3, #4]
 80073a8:	e7ec      	b.n	8007384 <_malloc_r+0xa0>
 80073aa:	4623      	mov	r3, r4
 80073ac:	6864      	ldr	r4, [r4, #4]
 80073ae:	e7b2      	b.n	8007316 <_malloc_r+0x32>
 80073b0:	4634      	mov	r4, r6
 80073b2:	6876      	ldr	r6, [r6, #4]
 80073b4:	e7b9      	b.n	800732a <_malloc_r+0x46>
 80073b6:	230c      	movs	r3, #12
 80073b8:	603b      	str	r3, [r7, #0]
 80073ba:	4638      	mov	r0, r7
 80073bc:	f000 f84c 	bl	8007458 <__malloc_unlock>
 80073c0:	e7a1      	b.n	8007306 <_malloc_r+0x22>
 80073c2:	6025      	str	r5, [r4, #0]
 80073c4:	e7de      	b.n	8007384 <_malloc_r+0xa0>
 80073c6:	bf00      	nop
 80073c8:	240008fc 	.word	0x240008fc

080073cc <_realloc_r>:
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	4680      	mov	r8, r0
 80073d2:	4614      	mov	r4, r2
 80073d4:	460e      	mov	r6, r1
 80073d6:	b921      	cbnz	r1, 80073e2 <_realloc_r+0x16>
 80073d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	4611      	mov	r1, r2
 80073de:	f7ff bf81 	b.w	80072e4 <_malloc_r>
 80073e2:	b92a      	cbnz	r2, 80073f0 <_realloc_r+0x24>
 80073e4:	f7ff ff12 	bl	800720c <_free_r>
 80073e8:	4625      	mov	r5, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	f000 f838 	bl	8007464 <_malloc_usable_size_r>
 80073f4:	4284      	cmp	r4, r0
 80073f6:	4607      	mov	r7, r0
 80073f8:	d802      	bhi.n	8007400 <_realloc_r+0x34>
 80073fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073fe:	d812      	bhi.n	8007426 <_realloc_r+0x5a>
 8007400:	4621      	mov	r1, r4
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff ff6e 	bl	80072e4 <_malloc_r>
 8007408:	4605      	mov	r5, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	d0ed      	beq.n	80073ea <_realloc_r+0x1e>
 800740e:	42bc      	cmp	r4, r7
 8007410:	4622      	mov	r2, r4
 8007412:	4631      	mov	r1, r6
 8007414:	bf28      	it	cs
 8007416:	463a      	movcs	r2, r7
 8007418:	f7ff fed0 	bl	80071bc <memcpy>
 800741c:	4631      	mov	r1, r6
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fef4 	bl	800720c <_free_r>
 8007424:	e7e1      	b.n	80073ea <_realloc_r+0x1e>
 8007426:	4635      	mov	r5, r6
 8007428:	e7df      	b.n	80073ea <_realloc_r+0x1e>
	...

0800742c <_sbrk_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d06      	ldr	r5, [pc, #24]	; (8007448 <_sbrk_r+0x1c>)
 8007430:	2300      	movs	r3, #0
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	f7f9 fd44 	bl	8000ec4 <_sbrk>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_sbrk_r+0x1a>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_sbrk_r+0x1a>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	24000904 	.word	0x24000904

0800744c <__malloc_lock>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__malloc_lock+0x8>)
 800744e:	f000 b811 	b.w	8007474 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	24000908 	.word	0x24000908

08007458 <__malloc_unlock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_unlock+0x8>)
 800745a:	f000 b80c 	b.w	8007476 <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	24000908 	.word	0x24000908

08007464 <_malloc_usable_size_r>:
 8007464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007468:	1f18      	subs	r0, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfbc      	itt	lt
 800746e:	580b      	ldrlt	r3, [r1, r0]
 8007470:	18c0      	addlt	r0, r0, r3
 8007472:	4770      	bx	lr

08007474 <__retarget_lock_acquire_recursive>:
 8007474:	4770      	bx	lr

08007476 <__retarget_lock_release_recursive>:
 8007476:	4770      	bx	lr

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
